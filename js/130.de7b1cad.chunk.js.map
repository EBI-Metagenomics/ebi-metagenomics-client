{"version":3,"file":"js/130.de7b1cad.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Genomes/Table/index.tsx","webpack://mgportalv2/./src/components/UI/Hierarchy/index.tsx","webpack://mgportalv2/./src/components/Genomes/PhyloTree/index.tsx","webpack://mgportalv2/./src/pages/GenomeCatalogue/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { getSimpleTaxLineage } from 'utils/taxon';\n\nconst initialPageSize = 10;\nconst GenomesTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'genomes-page': 1,\n      'genomes-page_size': initialPageSize,\n      'genomes-order': '',\n    },\n    {\n      'genomes-page': Number,\n      'genomes-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `genome-catalogues/${accession}/genomes`,\n    {\n      page: queryParameters['genomes-page'] as number,\n      ordering: queryParameters['genomes-order'] as string,\n      page_size: queryParameters['genomes-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (genome) => genome.relationships.biome.data?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      disableSortBy: true,\n    },\n    {\n      id: 'genome',\n      Header: 'Accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Length',\n      accessor: 'attributes.length',\n    },\n    {\n      Header: 'Num. of genomes',\n      accessor: 'attributes.num-genomes-total',\n    },\n    {\n      Header: 'Completeness',\n      accessor: 'attributes.completeness',\n    },\n    {\n      Header: 'Contamination',\n      accessor: 'attributes.contamination',\n    },\n    {\n      Header: 'Type',\n      accessor: 'attributes.type',\n      disableSortBy: true,\n    },\n    {\n      Header: 'Taxonomy',\n      accessor: 'attributes.taxon-lineage',\n      Cell: ({ cell }) => getSimpleTaxLineage(cell.value, true),\n      disableSortBy: true,\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['genomes-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"genomes-\"\n      sortable\n    />\n  );\n};\n\nexport default GenomesTable;\n","import React, { useState, useEffect } from 'react';\nimport './style.css';\n\nconst ANIMATION_TIME = 400;\n\nexport type Node = {\n  name: string;\n  countgen?: number;\n  type: string;\n  children?: Node[];\n};\n\ninterface HierarchyNodeProps {\n  tree: Node;\n  depth?: number;\n  shouldExpand?: boolean;\n  collapsing?: boolean;\n  getLabel?: (node: Node) => string | React.ReactElement;\n}\nconst HierarchyNode: React.FC<HierarchyNodeProps> = ({\n  tree,\n  depth = 0,\n  shouldExpand = true,\n  collapsing = false,\n  getLabel = (node) => node.name,\n}) => {\n  const [displayChildren, setDisplayChildren] = useState(shouldExpand);\n  const [show, setShow] = useState(false);\n  const [hideChildren, setHideChildren] = useState(false);\n  useEffect(() => setShow(true), []);\n  useEffect(() => {\n    if (hideChildren) {\n      setTimeout(() => setDisplayChildren(false), ANIMATION_TIME);\n    }\n  }, [hideChildren]);\n  const handleExpanderClick = (): void => {\n    setHideChildren(displayChildren);\n    if (!displayChildren) setDisplayChildren(true);\n  };\n  return (\n    <div\n      style={{\n        marginLeft: `${depth * 0.5}rem`,\n      }}\n    >\n      <div\n        className={`mg-hierarchy-selector ${show && !collapsing ? 'show' : ''}`}\n      >\n        {tree.children?.length ? (\n          <button\n            type=\"button\"\n            className=\"mg-expander\"\n            onClick={handleExpanderClick}\n          >\n            {displayChildren ? '▾' : '▸'}\n          </button>\n        ) : (\n          <span className=\"mg-hierarchy-spacer\" />\n        )}\n        <div>\n          <span className=\"mg-hierarchy-label\">\n            {getLabel(tree)}{' '}\n            {tree.countgen && (\n              <span className=\"mg-number\">{tree.countgen}</span>\n            )}\n          </span>\n        </div>\n      </div>\n      {tree.children &&\n        tree.children.length &&\n        displayChildren &&\n        tree.children.map((child) => (\n          <HierarchyNode\n            key={child.name}\n            tree={child}\n            depth={depth + 1}\n            shouldExpand={tree.countgen === 1 && child.countgen === 1}\n            getLabel={getLabel}\n            collapsing={hideChildren}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default HierarchyNode;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport HierarchyNode, { Node } from 'components/UI/Hierarchy';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport useURLAccession from 'hooks/useURLAccession';\n\nconst PhyloTree: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}/downloads/phylo_tree.json`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  return (\n    <HierarchyNode\n      tree={data as unknown as Node}\n      getLabel={(node) => {\n        const label = node.name.split('__').pop();\n        if (node.type === 'genome') {\n          return (\n            <Link to={`/genomes/${label}`} style={{ backgroundColor: 'white' }}>\n              {label}\n            </Link>\n          );\n        }\n\n        return label || 'Unknown';\n      }}\n    />\n  );\n};\nexport default PhyloTree;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport GenomesTable from 'components/Genomes/Table';\nimport PhyloTree from 'components/Genomes/PhyloTree';\nimport ReactMarkdown from 'react-markdown';\n\nimport RouteForHash from 'components/Nav/RouteForHash';\n\nconst tabs = [\n  { label: 'Genome list', to: '#' },\n  { label: 'Taxonomy tree', to: '#phylo-tab' },\n  { label: 'Protein catalogue', to: '#protein-catalog-tab' },\n  { label: 'Search by Gene', to: '#genome-search-tab' },\n  { label: 'Search by MAG', to: '#genome-search-mag-tab' },\n];\n\nconst GenomePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: genomeData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>{genomeData.attributes.name}</h2>\n      <div>\n        <ReactMarkdown>\n          {genomeData.attributes.description as string}\n        </ReactMarkdown>\n      </div>\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"\" isDefault>\n            <GenomesTable />\n          </RouteForHash>\n          <RouteForHash hash=\"#phylo-tab\">\n            <PhyloTree />\n          </RouteForHash>\n          <RouteForHash hash=\"#protein-catalog-tab\">\n            <h3>{genomeData.attributes['protein-catalogue-name'] as string}</h3>\n            <ReactMarkdown>\n              {genomeData.attributes['protein-catalogue-description'] as string}\n            </ReactMarkdown>\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default GenomePage;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["accession","useURLAccession","queryParameters","Number","data","loading","error","isStale","useMGnifyData","page","ordering","page_size","Loading","size","FetchError","columns","id","Header","accessor","genome","relationships","biome","Cell","cell","className","value","style","float","disableSortBy","to","Date","toLocaleDateString","EMGTable","cols","initialPage","initialPageSize","namespace","sortable","HierarchyNode","tree","depth","shouldExpand","collapsing","getLabel","node","name","displayChildren","setDisplayChildren","useState","show","setShow","hideChildren","setHideChildren","useEffect","setTimeout","marginLeft","children","length","type","onClick","countgen","map","child","key","Hierarchy","label","split","pop","backgroundColor","tabs","genomeData","attributes","description","Tabs","RouteForHash","hash","isDefault","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","x","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}