{"version":3,"file":"js/180.cf3af93b.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Study/Studies/index.tsx","webpack://mgportalv2/./src/components/UI/Box/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/components/UI/ExtLink/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/KeyValueList/index.tsx","webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/pages/Publication/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\n\ntype AssociatedStudiesProps = {\n  rootEndpoint: string;\n};\nconst AssociatedStudies: React.FC<AssociatedStudiesProps> = ({\n  rootEndpoint,\n}) => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'studies-page': 1,\n      'studies-page_size': initialPageSize,\n      'studies-order': '',\n    },\n    {\n      'studies-page': Number,\n      'studies-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `${rootEndpoint}/${accession}/studies`,\n    {\n      page: queryParameters['studies-page'] as number,\n      ordering: queryParameters['studies-order'] as string,\n      page_size: queryParameters['studies-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n      Cell: ({ cell }) => <TruncatedText text={(cell.value as string) || ''} />,\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['studies-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-studies-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"studies-\"\n    />\n  );\n};\n\nexport default AssociatedStudies;\n","import React from 'react';\n\nconst Box: React.FC<{ label: string; theme?: string }> = ({\n  label,\n  theme = 'primary',\n  children,\n}) => (\n  <div className=\"vf-grid\">\n    <div className={`vf-box vf-box--easy vf-box-theme--${theme}`}>\n      <h5 className=\"vf-box__heading\">{label}</h5>\n      <div className=\"vf-box__text\">{children}</div>\n    </div>\n  </div>\n);\n\nexport default Box;\n","import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse;\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title: Title,\n  initialPage = 0,\n  initialPageSize = 25,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  sortable = false,\n  loading = false,\n  isStale = false,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: data.data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount: data.meta.pagination.pages,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped ${className}`}\n          ref={tableRef}\n        >\n          {Title && (\n            <caption className=\"vf-table__caption\">\n              {typeof Title === 'string' ? Title : <Title />}\n            </caption>\n          )}\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"vf-table__row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import React from 'react';\n\nimport './style.css';\n\ntype ExtLinkProps = {\n  href: string;\n  title?: string;\n  id?: string;\n};\nconst ExtLink: React.FC<ExtLinkProps> = ({ href, id, title, children }) => (\n  <a\n    href={href}\n    title={title}\n    id={id}\n    target=\"_blank\"\n    rel=\"noreferrer noopener\"\n    className=\"mg-ext\"\n  >\n    <span className=\"icon icon-common icon-external-link-alt\" /> {children}\n  </a>\n);\n\nexport default ExtLink;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React from 'react';\n\ntype KeyValueProps = {\n  list: { key: string; value: string | React.ElementType }[];\n};\n\nconst KeyValueList: React.FC<KeyValueProps> = ({ list }) => (\n  <div\n    className=\"vf-grid vf-grid__col-2\"\n    style={{\n      gridTemplateColumns: '1fr 2fr',\n      rowGap: '0.5rem',\n    }}\n  >\n    {list.map(({ key, value: Value }) => (\n      <React.Fragment key={key}>\n        <div style={{ textAlign: 'right' }}>{key}:</div>\n        <div>{typeof Value === 'string' ? Value : <Value />}</div>\n      </React.Fragment>\n    ))}\n  </div>\n);\n\nexport default KeyValueList;\n","import React from 'react';\n\nconst TruncatedText: React.FC<{ maxLength?: number; text: string }> = ({\n  text,\n  maxLength = 250,\n}) => (\n  <>\n    {text.substring(0, maxLength)}\n    {text.length >= maxLength && '...'}\n  </>\n);\n\nexport default TruncatedText;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    navigate(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      navigate(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  const parts = location.pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Box from 'components/UI/Box';\nimport KeyValueList from 'components/UI/KeyValueList';\nimport ExtLink from 'components/UI/ExtLink';\nimport AssociatedStudies from 'components/Study/Studies';\n\nconst PublicationPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`publications/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: publicationData } = data as MGnifyResponseObj;\n\n  const details = [\n    {\n      key: 'Journal name',\n      value: publicationData.attributes['iso-journal'] as string,\n    },\n    {\n      key: 'DOI',\n      value: () => (\n        <ExtLink href={`https://www.doi.org/${publicationData.attributes.doi}`}>\n          {publicationData.attributes.doi}\n        </ExtLink>\n      ),\n    },\n    {\n      key: 'PMID',\n      value: () => (\n        <ExtLink\n          href={`https://europepmc.org/abstract/MED/${publicationData.id}`}\n        >\n          {publicationData.id}\n        </ExtLink>\n      ),\n    },\n    {\n      key: 'Published year',\n      value: String(publicationData.attributes['published-year']),\n    },\n  ];\n  if (publicationData.attributes['medline-journal']) {\n    details.push({\n      key: 'Medical journal',\n      value: () => (\n        <ExtLink href={publicationData.attributes['medline-journal'] as string}>\n          {publicationData.attributes['medline-journal']}\n        </ExtLink>\n      ),\n    });\n  }\n  return (\n    <section className=\"vf-content\">\n      <h2>Publication: {publicationData?.attributes?.['pub-title'] || ''}</h2>\n      <h4>{publicationData?.attributes?.authors || ''}</h4>\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          {publicationData?.attributes?.abstract && (\n            <div>{publicationData.attributes.abstract}</div>\n          )}\n          <Box label=\"Publication details\">\n            <KeyValueList list={details} />\n          </Box>\n          <Box label=\"Associated studies\">\n            <AssociatedStudies rootEndpoint=\"publications\" />\n          </Box>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default PublicationPage;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["rootEndpoint","accession","queryParameters","Number","data","loading","error","isStale","page","ordering","page_size","size","columns","id","Header","accessor","study","relationships","biomes","Cell","cell","className","value","style","float","to","text","Date","toLocaleDateString","cols","initialPage","initialPageSize","namespace","label","theme","children","currentPageIndex","pageIndex","gotoPage","type","onClick","title","Title","showPagination","sortable","setQueryParameters","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","useRef","isChangingPage","setChangingPage","useState","useEffect","current","scrollIntoView","order","tableSortBy","length","col","desc","replace","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","target","Loading","undefined","ref","map","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","key","render","isSorted","isSortedDesc","row","getRowProps","cells","getCellProps","onBlur","onChange","pg","disabled","paginationIndex","href","rel","refreshPage","window","location","reload","backgroundColor","status","list","gridTemplateColumns","rowGap","Value","textAlign","maxLength","substring","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","Object","entries","forEach","parameter","serializer","String","get","useQueryParametersState","navigate","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","parts","pathname","split","publicationData","details","attributes","doi","authors","abstract","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","x","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}