{"version":3,"file":"js/193.7a28d6a9.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/Box/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/render.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/BySamplesArray/index.tsx","webpack://mgportalv2/./src/components/Sample/Overview/index.tsx","webpack://mgportalv2/./src/pages/Sample/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React from 'react';\n\nconst Box: React.FC<{ label: string; theme?: string }> = ({\n  label,\n  theme = 'primary',\n  children,\n}) => (\n  <div className=\"vf-grid\">\n    <div className={`vf-box vf-box--easy vf-box-theme--${theme}`}>\n      <h5 className=\"vf-box__heading\">{label}</h5>\n      <div className=\"vf-box__text\">{children}</div>\n    </div>\n  </div>\n);\n\nexport default Box;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\n\nimport './style.css';\n\n// TODO: make the link play nicer with react-router\nconst MarkerPopup: React.FC<{ sample: MGnifyDatum }> = ({ sample }) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">\n      <a href={`../samples/${sample.id}`}>{sample.id}</a>\n      {/* <Link to=\"/search/studies\">{sample.id}</Link> */}\n    </h3>\n    <p className=\"vf-box__text\">{sample.attributes['sample-desc']}</p>\n  </div>\n);\nconst ClusterMarkerPopup: React.FC<{ accessions: string[] }> = ({\n  accessions,\n}) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">Samples on this geographical location</h3>\n    <ul className=\"vf-list\">\n      {accessions.map((accession) => (\n        <li ref={accession}>\n          <a href={`../samples/${accession}`}>{accession}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ntype MapProps = {\n  samples: Array<MGnifyDatum>;\n};\n\nconst SamplesMap: React.FC<MapProps> = ({ samples }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const markerCluster = useRef<MarkerClusterer>(null);\n  const sampleInfoWindow = useRef(new google.maps.InfoWindow());\n  const clusterInfoWindow = useRef(new google.maps.InfoWindow());\n  const newBoundary = useRef(new google.maps.LatLngBounds());\n\n  const markers = useRef({});\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n        minZoom: 2,\n      });\n      setTheMap(tmpMap);\n    }\n  }, [theMap]);\n  useEffect(() => {\n    if (theMap && samples) {\n      if (markerCluster.current) {\n        markerCluster.current.clearMarkers();\n      }\n\n      samples\n        .filter(({ id }) => !(id in markers.current))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n            title: sample.id,\n          });\n          newBoundary.current.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.current.setContent(\n              ReactDOMServer.renderToString(<MarkerPopup sample={sample} />)\n            );\n            sampleInfoWindow.current.open(theMap, marker);\n          });\n          markers.current[sample.id] = marker;\n        });\n      markerCluster.current = new MarkerClusterer(\n        theMap,\n        Object.values(markers.current),\n        {\n          imagePath:\n            'https://raw.githubusercontent.com/googlemaps/js-markerclustererplus/master/images/m',\n          maxZoom: 10,\n        }\n      );\n\n      // for clusters in MAX Zoom and with less than 10 elements show a list\n      google.maps.event.addListener(\n        markerCluster.current,\n        'click',\n        // eslint-disable-next-line func-names\n        function (cluster) {\n          if (\n            // eslint-disable-next-line no-underscore-dangle, react/no-this-in-sfc\n            this.prevZoom_ + 1 <= this.getMaxZoom() ||\n            cluster.getSize() >= 10\n          ) {\n            return;\n          }\n          clusterInfoWindow.current.setPosition(cluster.getCenter());\n\n          clusterInfoWindow.current.setContent(\n            ReactDOMServer.renderToString(\n              <ClusterMarkerPopup\n                accessions={cluster.getMarkers().map((m) => m.getTitle())}\n              />\n            )\n          );\n\n          clusterInfoWindow.current.open(theMap);\n        }\n      );\n\n      theMap.fitBounds(newBoundary.current);\n    }\n  }, [theMap, samples]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\nexport default SamplesMap;\n","import React, { ReactElement } from 'react';\nimport { Status } from '@googlemaps/react-wrapper';\nimport { ErrorTypes } from 'hooks/data/useData';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\nexport default render;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash)\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  const parts = location.pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","import React, { useContext } from 'react';\n\nimport { Wrapper } from '@googlemaps/react-wrapper';\n\nimport UserContext from 'pages/Login/UserContext';\nimport SamplesMap from 'components/UI/SamplesMap';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport render from '../render';\n\nimport '../style.css';\n\ntype SamplesMapProps = {\n  samples: Array<MGnifyDatum>;\n};\nconst SamplesMapBySamplesArray: React.FC<SamplesMapProps> = ({ samples }) => {\n  const { config } = useContext(UserContext);\n\n  const samplesFiltered = samples.filter((sample) => {\n    try {\n      return (\n        Number(sample.attributes.longitude) !== 0.0 &&\n        Number(sample.attributes.latitude) !== 0.0\n      );\n    } catch {\n      return false;\n    }\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <SamplesMap samples={samplesFiltered} />\n        </Wrapper>\n      </div>\n      <div className=\"mg-map-progress\">\n        {samplesFiltered.length === 0 && (\n          <div>⚠️ None of the samples have geolocation co-ordinates.</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SamplesMapBySamplesArray;\n","import React from 'react';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMap from 'components/UI/SamplesMap/BySamplesArray';\nimport Box from 'components/UI/Box';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype SampleOverviewProps = {\n  data: MGnifyDatum;\n};\n\nconst SampleOverview: React.FC<SampleOverviewProps> = ({ data }) => {\n  const lineage = data.relationships.biome.data.id;\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <Box label=\"Description\">{data.attributes['sample-desc']}</Box>\n          <Box label=\"External links\">\n            <ul>\n              <li>\n                <a\n                  className=\"ext\"\n                  href={`https://www.ebi.ac.uk/ena/browser/view/${data.attributes.accession}`}\n                >\n                  ENA website ({data.attributes.accession})\n                </a>\n              </li>\n              <li>\n                <a\n                  className=\"ext\"\n                  href={`https://www.ebi.ac.uk/biosamples/samples/${data.attributes.biosample}`}\n                >\n                  EBI biosample ({data.attributes.biosample})\n                </a>\n              </li>\n            </ul>\n          </Box>\n          <Box label=\"Classification\">\n            <span\n              className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n              style={{ float: 'initial' }}\n            />\n            {lineage}\n          </Box>\n        </div>\n        <SamplesMap samples={[data]} />\n      </div>\n    </section>\n  );\n};\n\nexport default SampleOverview;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Sample/Overview';\n\nconst tabs = [\n  { label: 'Sample metadata', to: '#metadata' },\n  { label: 'Associated studies', to: '#studies' },\n  { label: 'Analysed associated runs', to: '#runs' },\n  { label: 'Analysed associated assemblies', to: '#assemblies' },\n];\n\nconst SamplePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`samples/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: studyData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Study {accession}</h2>\n      <h3>{studyData.attributes['study-name']}</h3>\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <Overview data={studyData} />\n          <Tabs tabs={tabs} />\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default SamplePage;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["label","theme","children","className","refreshPage","window","location","reload","error","type","style","backgroundColor","status","onClick","MarkerPopup","sample","href","id","attributes","ClusterMarkerPopup","accessions","map","accession","ref","samples","useRef","theMap","setTheMap","useState","markerCluster","sampleInfoWindow","google","maps","InfoWindow","clusterInfoWindow","newBoundary","LatLngBounds","markers","useEffect","tmpMap","Map","current","maxZoom","minZoom","clearMarkers","filter","forEach","position","lat","latitude","lng","longitude","marker","Marker","title","extend","addListener","setContent","open","Object","values","imagePath","event","cluster","this","prevZoom_","getMaxZoom","getSize","setPosition","getCenter","getMarkers","m","getTitle","fitBounds","height","Status","tabs","Label","to","key","pathname","startsWith","hash","parts","split","length","config","useContext","UserContext","samplesFiltered","Number","Wrapper","apiKey","googleMapsKey","render","SamplesMap","data","lineage","relationships","biome","Date","toDateString","Box","biosample","float","useURLAccession","loading","useMGnifyData","Loading","size","FetchError","studyData","Overview","Tabs","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineageList","x","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}