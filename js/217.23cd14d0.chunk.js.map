{"version":3,"file":"js/217.23cd14d0.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Genomes/COGAnalysis/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/hooks/genomes/useDefaultConfig/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport useDefaultGenomeConfig from 'hooks/genomes/useDefaultConfig';\nimport { TAXONOMY_COLOURS } from 'utils/taxon';\n\nconst COGAnalises: React.FC<{ includePangenomes?: boolean }> = ({\n  includePangenomes = true,\n}) => {\n  const chartComponentRef = useRef<HighchartsReact.RefObject>(null);\n  const accession = useURLAccession();\n  const { columns, options } = useDefaultGenomeConfig();\n  const { data, loading, error } = useMGnifyData(`genomes/${accession}/cogs`, {\n    page_size: 100,\n  });\n\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  let total = 0;\n  const categories = (data.data as MGnifyDatum[]).map((d) =>\n    String(d.attributes.name)\n  );\n  const categoriesDescriptions = (data.data as MGnifyDatum[]).reduce(\n    (memo, d) => {\n      // eslint-disable-next-line no-param-reassign\n      memo[d.attributes.name as string] = d.attributes.description;\n      return memo;\n    },\n    {}\n  );\n  const genomeSeries = (data.data as MGnifyDatum[]).map((d) => {\n    const c = Number(d.attributes['genome-count']);\n    total += c;\n    return c;\n  });\n  const pangenomeSeries = (data.data as MGnifyDatum[]).map((d) => {\n    return d.attributes['pangenome-count'];\n  });\n  options.title = {\n    text: 'Top 10 COG categories',\n  };\n  options.subtitle = {\n    text: `Total: ${total} Genome COG matches - Drag to zoom in/out`,\n  };\n  options.xAxis = {\n    categories,\n  };\n  options.tooltip = {\n    /* eslint-disable react/no-this-in-sfc */\n    formatter() {\n      const description = categoriesDescriptions[this.key];\n      let tooltip = `${this.series.name}<br/>Count: ${this.y}`;\n      if (description) {\n        tooltip += `<br />COG: ${description}`;\n      }\n      return tooltip;\n    },\n    /* eslint-enable react/no-this-in-sfc */\n  };\n  options.series = [\n    {\n      name: 'Genome',\n      type: 'column',\n      data: genomeSeries.slice(0, 10),\n      colors: TAXONOMY_COLOURS,\n      stack: 'genome',\n    },\n  ];\n\n  if (includePangenomes) {\n    options.series.push({\n      name: 'Pan-genome',\n      type: 'column',\n      data: pangenomeSeries.slice(0, 10),\n      colors: TAXONOMY_COLOURS,\n      stack: 'pangenome',\n    });\n  }\n\n  return (\n    <div className=\"vf-stack vf-stack--200\">\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n        ref={chartComponentRef}\n      />\n      <EMGTable\n        cols={columns}\n        data={data as MGnifyResponseList}\n        title={`All ${data.meta.pagination.count} COG categories`}\n        loading={loading}\n        showPagination={false}\n      />\n    </div>\n  );\n};\n\nexport default COGAnalises;\n","import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse;\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title: Title,\n  initialPage = 0,\n  initialPageSize = 25,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  sortable = false,\n  loading = false,\n  isStale = false,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: data.data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount: data.meta.pagination.pages,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped ${className}`}\n          ref={tableRef}\n        >\n          {Title && (\n            <caption className=\"vf-table__caption\">\n              {typeof Title === 'string' ? Title : <Title />}\n            </caption>\n          )}\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"vf-table__row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import { useMemo } from 'react';\nimport * as Highcharts from 'highcharts';\nimport { TAXONOMY_COLOURS } from 'utils/taxon';\n\ntype DefaultConfigType = {\n  columns: {\n    Header: string;\n    accessor: string;\n  }[];\n  options: Highcharts.Options;\n};\n\nconst useGenomeDefaultConfig = (): DefaultConfigType => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'COG ID',\n        accessor: 'attributes.name',\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.description',\n      },\n      {\n        Header: 'Genome Count',\n        accessor: 'attributes.genome-count',\n      },\n      {\n        Header: 'Pan-genome count',\n        accessor: 'attributes.pangenome-count',\n      },\n    ],\n    []\n  );\n\n  const options: Highcharts.Options = {\n    chart: {\n      type: 'column',\n      height: 400,\n      zoomType: 'xy',\n      renderTo: 'container',\n    },\n    // subtitle: {\n    //   text: `Total: ${total} Genome COG matches - Drag to zoom in/out`,\n    // },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Number of matches',\n      },\n    },\n    // xAxis: {\n    //   categories,\n    // },\n    plotOptions: {\n      series: {\n        stacking: 'normal',\n      },\n      column: {\n        allowPointSelect: true,\n        cursor: 'pointer',\n        colors: TAXONOMY_COLOURS,\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n    legend: {\n      enabled: true,\n    },\n    // tooltip: {\n    //   formatter() {\n    //     const description = categoriesDescriptions[this.key];\n    //     let tooltip = this.series.name + '<br/>Count: ' + this.y;\n    //     if (description) {\n    //       tooltip += '<br />COG: ' + description;\n    //     }\n    //     return tooltip;\n    //   },\n    // },\n    // series: [\n    //   {\n    //     name: 'Genome',\n    //     type: 'column',\n    //     data: genomeSeries.slice(0, 10),\n    //     colors: TAXONOMY_COLOURS,\n    //     stack: 'genome',\n    //   },\n    // ],\n  };\n  return { columns, options };\n};\n\nexport default useGenomeDefaultConfig;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    navigate(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      navigate(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n"],"names":["includePangenomes","chartComponentRef","useRef","accession","columns","options","data","loading","error","page_size","size","total","categories","map","d","String","attributes","name","categoriesDescriptions","reduce","memo","description","genomeSeries","c","Number","pangenomeSeries","title","text","subtitle","xAxis","tooltip","formatter","this","key","series","y","type","slice","colors","stack","push","className","highcharts","ref","cols","meta","pagination","count","showPagination","currentPageIndex","pageIndex","gotoPage","onClick","Title","initialPage","initialPageSize","namespace","sortable","isStale","queryParameters","setQueryParameters","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","initialState","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","isChangingPage","setChangingPage","useState","useEffect","current","scrollIntoView","order","tableSortBy","length","col","desc","id","replace","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","page","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","target","value","Loading","undefined","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onBlur","onChange","pg","disabled","paginationIndex","Header","accessor","chart","height","zoomType","renderTo","yAxis","min","plotOptions","stacking","allowPointSelect","cursor","credits","enabled","legend","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","Object","entries","forEach","parameter","serializer","get","useQueryParametersState","location","navigate","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString"],"sourceRoot":""}