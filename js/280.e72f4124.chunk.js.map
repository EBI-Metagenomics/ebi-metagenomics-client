{"version":3,"file":"js/280.e72f4124.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/components/SuperStudy/Flagship/index.tsx","webpack://mgportalv2/./src/components/SuperStudy/Related/index.tsx","webpack://mgportalv2/./src/pages/SuperStudy/index.tsx"],"sourcesContent":["import React from 'react';\n\nconst TruncatedText: React.FC<{ maxLength?: number; text: string }> = ({\n  text,\n  maxLength = 250,\n}) => (\n  <>\n    {text.substring(0, maxLength)}\n    {text.length >= maxLength && '...'}\n  </>\n);\n\nexport default TruncatedText;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  let { pathname } = location;\n  if (pathname.trim().endsWith('/')) pathname = pathname.trim().slice(0, -1);\n  const parts = pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\nconst FlagshipTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'flagship-page': 1,\n      'flagship-page_size': initialPageSize,\n      'flagship-order': '',\n    },\n    {\n      'flagship-page': Number,\n      'flagship-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `super-studies/${accession}/flagship-studies`,\n    {\n      page: queryParameters['flagship-page'] as number,\n      ordering: queryParameters['flagship-order'] as string,\n      page_size: queryParameters['flagship-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      className: 'mg-biome',\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n      Cell: ({ cell }) => <TruncatedText text={(cell.value as string) || ''} />,\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <details>\n      <summary>\n        <b>Flagship Projects</b>\n      </summary>\n      <EMGTable\n        cols={columns}\n        data={data as MGnifyResponseList}\n        initialPage={(queryParameters['flagship-page'] as number) - 1}\n        initialPageSize={initialPageSize}\n        className=\"mg-anlyses-table\"\n        loading={loading}\n        isStale={isStale}\n        namespace=\"flagship-\"\n      />\n    </details>\n  );\n};\n\nexport default FlagshipTable;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\nconst RelatedTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'related-page': 1,\n      'related-page_size': initialPageSize,\n      'related-order': '',\n    },\n    {\n      'related-page': Number,\n      'related-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `super-studies/${accession}/related-studies`,\n    {\n      page: queryParameters['related-page'] as number,\n      ordering: queryParameters['related-order'] as string,\n      page_size: queryParameters['related-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      className: 'mg-biome',\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n  if (!(data?.data as unknown[])?.length) return null;\n  return (\n    <details>\n      <summary>\n        <b>Related Projects</b>\n      </summary>\n      <EMGTable\n        cols={columns}\n        data={data as MGnifyResponseList}\n        initialPage={(queryParameters['related-page'] as number) - 1}\n        initialPageSize={initialPageSize}\n        className=\"mg-anlyses-table\"\n        loading={loading}\n        isStale={isStale}\n        namespace=\"related-\"\n      />\n    </details>\n  );\n};\n\nexport default RelatedTable;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport FlagshipTable from 'components/SuperStudy/Flagship';\nimport RelatedTable from 'components/SuperStudy/Related';\n\nconst SuperStudyPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`super-studies/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: superStudyData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Super Study</h2>\n\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <div style={{ display: 'flex' }}>\n            <div>\n              <h3>{superStudyData.attributes.title}</h3>\n              <p>{superStudyData.attributes.description}</p>\n            </div>\n            <img\n              src={superStudyData.attributes['image-url'] as string}\n              style={{\n                height: '6em',\n              }}\n              alt={`${superStudyData.attributes.title} logo`}\n            />\n          </div>\n          <FlagshipTable />\n          <RelatedTable />\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default SuperStudyPage;\n"],"names":["text","maxLength","substring","length","location","pathname","trim","endsWith","slice","parts","split","accession","useURLAccession","queryParameters","Number","data","loading","error","isStale","useMGnifyData","page","ordering","page_size","Loading","size","FetchError","columns","id","Header","accessor","study","relationships","biomes","Cell","cell","className","value","style","float","to","Date","toLocaleDateString","EMGTable","cols","initialPage","initialPageSize","namespace","superStudyData","display","attributes","title","description","src","height","alt","Flagship","Related"],"sourceRoot":""}