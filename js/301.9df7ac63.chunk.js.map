{"version":3,"sources":["webpack://mgportalv2/./src/components/Publications/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/hooks/data/useSamplesProvider/index.tsx","webpack://mgportalv2/./src/components/UI/Box/index.tsx","webpack://mgportalv2/./src/components/Study/Overview/index.tsx","webpack://mgportalv2/./src/components/Nav/RouteForHash/index.tsx","webpack://mgportalv2/./src/pages/Study/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"names":["Publication","title","journal","year","link","doi","authors","maxAuthorsLength","trimmedAuthors","length","text","authorList","slice","split","pop","push","join","trimAuthors","className","href","MainPublication","publication","pub","main","alt","src","showMore","setShowMore","useState","recent","map","key","type","onClick","refreshPage","window","location","reload","error","style","backgroundColor","status","tabs","label","to","pathname","startsWith","hash","render","Status","Loading","FetchError","MarkerPopup","sample","id","attributes","ClusterMarkerPopup","accessions","accession","ref","MyMapComponent","data","useRef","theMap","setTheMap","markerCluster","sampleInfoWindow","google","maps","InfoWindow","clusterInfoWindow","newBoundary","LatLngBounds","markers","useEffect","tmpMap","Map","current","maxZoom","minZoom","clearMarkers","filter","forEach","position","lat","latitude","lng","longitude","marker","Marker","extend","addListener","setContent","open","Object","values","imagePath","event","cluster","this","prevZoom_","getMaxZoom","getSize","setPosition","getCenter","getMarkers","m","getTitle","fitBounds","height","study","limit","setLimit","samples","total","page","setPage","setSamples","setTotal","isStale","loading","useMGnifyData","study_accession","meta","pagination","aggregatedSamples","totalInResponse","count","links","next","config","useContext","UserContext","samplesFiltered","Wrapper","apiKey","googleMapsKey","max","value","theme","children","included","lineage","relationships","biomes","Date","toDateString","float","studies","enaURL","isDefault","history","parts","include","size","studyData","Overview","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineageList","x","toLowerCase","lineageD2","lineageD3","lineageD4","lineageD5","lineageD6"],"mappings":"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","file":"js/301.9df7ac63.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport CoverImage from 'images/cover_main_publication.gif';\nimport publications from './publications.json';\n\nimport './style.css';\n\nconst trimAuthors = (text: string, maxAuthorsLength: number): string => {\n  const authorList = text.slice(0, maxAuthorsLength).split(',');\n  authorList.pop();\n  authorList.push(' et al.');\n  return authorList.join(',');\n};\n\nexport const Publication: React.FC<{\n  title: string;\n  journal: string;\n  year: number;\n  link: string;\n  doi: string;\n  authors: string;\n  maxAuthorsLength?: number;\n}> = ({ title, journal, year, link, doi, authors, maxAuthorsLength }) => {\n  const trimmedAuthors =\n    maxAuthorsLength && authors.length > maxAuthorsLength\n      ? trimAuthors(authors, maxAuthorsLength)\n      : authors;\n  return (\n    <section className=\"mg-pub\">\n      <span className=\"mg-pub-title\">{title}.</span>{' '}\n      <span className=\"mg-pub-journal\">{journal}</span> (\n      <span className=\"mg-pub-year\">{year}</span>){' '}\n      <span className=\"mg-pub-doi\">\n        doi:\n        <a title={title} href={link} className=\"ext\">\n          {doi}\n        </a>\n      </span>\n      <div className=\"mg-pub-authors\">{trimmedAuthors}.</div>\n    </section>\n  );\n};\nexport const MainPublication: React.FC = () => {\n  const publication = publications.filter((pub) => pub.main)?.[0];\n  return (\n    <div className=\"embl-grid | vf-content\">\n      <div className=\"vf-section-header mg-pub-section-header\">\n        <img\n          alt=\"Cover of the journal\"\n          src={CoverImage}\n          className=\"mg-pub-cover\"\n        />\n      </div>\n      <div>\n        <p>To cite MGnify, please refer to the following publication:</p>\n        {publication && (\n          <Publication\n            title={publication.title}\n            journal={publication.journal}\n            year={publication.year}\n            link={publication.link}\n            doi={publication.doi}\n            authors={publication.authors}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\nconst Publications: React.FC = () => {\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <section className=\"mg-pub-section\">\n      {publications\n        .filter((pub) => showMore || pub.recent)\n        .map((pub) => (\n          <article key={pub.doi}>\n            <Publication\n              title={pub.title}\n              journal={pub.journal}\n              year={pub.year}\n              link={pub.link}\n              doi={pub.doi}\n              authors={pub.authors}\n            />\n          </article>\n        ))}\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--sm\"\n          onClick={() => setShowMore(!showMore)}\n        >\n          {showMore ? 'Less' : 'More'} publications\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Publications;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label, to }) => (\n          <li className=\"vf-tabs__item\" key={label}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash)\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n  useContext,\n  ReactElement,\n} from 'react';\nimport ReactDOMServer from 'react-dom/server';\n// import { Link } from 'react-router-dom';\n\nimport { Wrapper, Status } from '@googlemaps/react-wrapper';\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport useSamplesProvider from 'hooks/data/useSamplesProvider';\nimport { ErrorTypes, MGnifyDatum } from 'hooks/data/useData';\n\nimport UserContext from 'pages/Login/UserContext';\nimport './style.css';\n\nconst LIMIT = 200;\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\n// TODO: make the link play nicer with react-router\nconst MarkerPopup: React.FC<{ sample: MGnifyDatum }> = ({ sample }) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">\n      <a href={`../samples/${sample.id}`}>{sample.id}</a>\n      {/* <Link to=\"/search/studies\">{sample.id}</Link> */}\n    </h3>\n    <p className=\"vf-box__text\">{sample.attributes['sample-desc']}</p>\n  </div>\n);\nconst ClusterMarkerPopup: React.FC<{ accessions: string[] }> = ({\n  accessions,\n}) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">Samples on this geographical location</h3>\n    <ul className=\"vf-list\">\n      {accessions.map((accession) => (\n        <li ref={accession}>\n          <a href={`../samples/${accession}`}>{accession}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ntype MapProps = {\n  data: Array<MGnifyDatum>;\n};\nconst MyMapComponent: React.FC<MapProps> = ({ data }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const markerCluster = useRef<MarkerClusterer>(null);\n  const sampleInfoWindow = useRef(new google.maps.InfoWindow());\n  const clusterInfoWindow = useRef(new google.maps.InfoWindow());\n  const newBoundary = useRef(new google.maps.LatLngBounds());\n\n  const markers = useRef({});\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n        minZoom: 2,\n      });\n      setTheMap(tmpMap);\n    }\n  }, [theMap]);\n  useEffect(() => {\n    if (theMap && data) {\n      if (markerCluster.current) {\n        markerCluster.current.clearMarkers();\n      }\n\n      data\n        .filter(({ id }) => !(id in markers.current))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n            title: sample.id,\n          });\n          newBoundary.current.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.current.setContent(\n              ReactDOMServer.renderToString(<MarkerPopup sample={sample} />)\n            );\n            sampleInfoWindow.current.open(theMap, marker);\n          });\n          markers.current[sample.id] = marker;\n        });\n      markerCluster.current = new MarkerClusterer(\n        theMap,\n        Object.values(markers.current),\n        {\n          imagePath:\n            'https://googlemaps.github.io/js-markerclustererplus/images/m',\n          maxZoom: 10,\n        }\n      );\n\n      // for clusters in MAX Zoom and with less than 10 elements show a list\n      google.maps.event.addListener(\n        markerCluster.current,\n        'click',\n        // eslint-disable-next-line func-names\n        function (cluster) {\n          if (\n            // eslint-disable-next-line no-underscore-dangle, react/no-this-in-sfc\n            this.prevZoom_ + 1 <= this.getMaxZoom() ||\n            cluster.getSize() >= 10\n          ) {\n            return;\n          }\n          clusterInfoWindow.current.setPosition(cluster.getCenter());\n\n          clusterInfoWindow.current.setContent(\n            ReactDOMServer.renderToString(\n              <ClusterMarkerPopup\n                accessions={cluster.getMarkers().map((m) => m.getTitle())}\n              />\n            )\n          );\n\n          clusterInfoWindow.current.open(theMap);\n        }\n      );\n\n      theMap.fitBounds(newBoundary.current);\n    }\n  }, [theMap, data]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\ntype SamplesMapProps = {\n  study: string;\n};\nconst SamplesMap: React.FC<SamplesMapProps> = ({ study }) => {\n  const [limit, setLimit] = useState(LIMIT);\n  const { samples, total } = useSamplesProvider(study, limit);\n  const { config } = useContext(UserContext);\n\n  const samplesFiltered = samples.filter((sample) => {\n    if (\n      sample.attributes &&\n      'longitude' in sample.attributes &&\n      'latitude' in sample.attributes\n    ) {\n      return (\n        sample.attributes.longitude !== 0.0 &&\n        sample.attributes.latitude !== 0.0\n      );\n    }\n    return false;\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <MyMapComponent data={samplesFiltered} />\n        </Wrapper>\n      </div>\n      {total && (\n        <div className=\"mg-map-progress\">\n          <progress max={total} value={samples.length} />\n          {total > limit && (\n            <div>\n              ⚠️ We are only loading the first {LIMIT} samples. Click{' '}\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--link mg-button-as-link\"\n                onClick={() => setLimit(total)}\n              >\n                HERE\n              </button>{' '}\n              to load them all.\n            </div>\n          )}\n          {samplesFiltered.length === 0 && (\n            <div>\n              ⚠️ None of the {total > limit ? 'loaded' : ''} samples have\n              geolocation co-ordinates.\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SamplesMap;\n","import { useState, useEffect } from 'react';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, ErrorFromFetch } from 'hooks/data/useData';\n\ntype SampleProviderResponse = {\n  samples: MGnifyDatum[];\n  total: number | null;\n  loading: boolean;\n  error: ErrorFromFetch;\n};\nconst useSamplesProvider = (\n  study: string,\n  limit?: number\n): SampleProviderResponse => {\n  const [page, setPage] = useState(1);\n  const [samples, setSamples] = useState<MGnifyDatum[]>([]);\n  const [total, setTotal] = useState(null);\n  const { data, isStale, loading, error } = useMGnifyData('samples', {\n    study_accession: study,\n    page,\n  });\n  useEffect(() => {\n    if (data?.data && !isStale && page === data?.meta?.pagination?.page) {\n      const aggregatedSamples = [...samples, ...(data.data as MGnifyDatum[])];\n      setSamples(aggregatedSamples);\n      const totalInResponse = data?.meta?.pagination?.count;\n      if (total !== totalInResponse && typeof totalInResponse === 'number') {\n        setTotal(totalInResponse);\n      }\n      if (data?.links?.next && aggregatedSamples.length < limit) {\n        setPage(page + 1);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, page, limit]);\n  useEffect(() => {\n    if (data?.links?.next && samples.length < limit) {\n      setPage(page + 1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [limit]);\n\n  return { samples, total, loading, error };\n};\n\nexport default useSamplesProvider;\n","import React from 'react';\n\nconst Box: React.FC<{ label: string; theme?: string }> = ({\n  label,\n  theme = 'primary',\n  children,\n}) => (\n  <div className=\"vf-grid\">\n    <div className={`vf-box vf-box--easy vf-box-theme--${theme}`}>\n      <h5 className=\"vf-box__heading\">{label}</h5>\n      <div className=\"vf-box__text\">{children}</div>\n    </div>\n  </div>\n);\n\nexport default Box;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMap from 'components/UI/SamplesMap';\nimport Box from 'components/UI/Box';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { Publication } from 'components/Publications';\nimport UserContext from 'pages/Login/UserContext';\n\ntype StudyOverviewProps = {\n  data: MGnifyDatum;\n  included: Array<unknown>;\n};\nconst StudyOverview: React.FC<StudyOverviewProps> = ({ data, included }) => {\n  const { config } = useContext(UserContext);\n  const lineage = data.relationships.biomes.data[0].id;\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <Box label=\"Classification\">\n            <span\n              className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n              style={{ float: 'initial' }}\n            />\n            {lineage}\n          </Box>\n          <Box label=\"Description\">{data.attributes['study-abstract']}</Box>\n        </div>\n        <SamplesMap study={data.id} />\n      </div>\n      <div className=\"mg-flex\">\n        {data?.relationships?.studies?.data?.length && (\n          <Box label=\"Related studies\">\n            <ul className=\"vf-list\">\n              {data.relationships.studies.data.map(({ id }) => (\n                <li key={id as string}>\n                  <Link to={`/studies/${id}`}>{id}</Link>\n                </li>\n              ))}\n            </ul>\n          </Box>\n        )}\n        <div>\n          {data?.attributes?.['is-public'] && (\n            <Box label=\"External links\">\n              <ul className=\"vf-list\">\n                <li>\n                  <a\n                    className=\"ext\"\n                    href={`${config.enaURL}/${data.attributes['secondary-accession']}`}\n                  >\n                    ENA website ({data.attributes['secondary-accession']})\n                  </a>\n                </li>\n              </ul>\n            </Box>\n          )}\n          <Box label=\"Publications\">\n            <ul className=\"vf-list\">\n              {included\n                .filter(({ type }) => type === 'publications')\n                .map(({ attributes, id }) => (\n                  <li key={id as string}>\n                    <Publication\n                      title={attributes['pub-title']}\n                      journal={attributes['iso-journal']}\n                      year={attributes['published-year']}\n                      link={`http://${attributes.doi}`}\n                      doi={attributes.doi}\n                      authors={attributes.authors}\n                      maxAuthorsLength={70}\n                    />\n                  </li>\n                ))}\n            </ul>\n          </Box>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default StudyOverview;\n","import React from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\ntype PropsType = {\n  hash: string;\n  isDefault?: boolean;\n};\nconst RouteForHash: React.FC<PropsType> = ({\n  hash,\n  isDefault = false,\n  children,\n}) => {\n  const location = useLocation();\n  const history = useHistory();\n  if (location.hash === '' && isDefault) {\n    history.push(hash);\n  }\n\n  if (location.hash === hash) {\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport default RouteForHash;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Study/Overview';\nimport RouteForHash from 'components/Nav/RouteForHash';\n\nconst tabs = [\n  { label: 'Overview', to: '#overview' },\n  { label: 'Analysis summary', to: '#analysis' },\n];\n\nconst StudyPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`studies/${accession}`, {\n    include: 'publications',\n  });\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: studyData, included } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Study {accession}</h2>\n      <h3>{studyData.attributes['study-name']}</h3>\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"#overview\" isDefault>\n            <Overview data={studyData} included={included || []} />\n          </RouteForHash>\n          <RouteForHash hash=\"#analysis\">\n            <div>analysis ????</div>\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default StudyPage;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  const parts = location.pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"sourceRoot":""}