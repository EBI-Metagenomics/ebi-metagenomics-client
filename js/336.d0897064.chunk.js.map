{"version":3,"file":"js/336.d0897064.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Publications/index.tsx","webpack://mgportalv2/./src/components/UI/Box/index.tsx","webpack://mgportalv2/./src/components/UI/ExtLink/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/render.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/ByStudy/index.tsx","webpack://mgportalv2/./src/hooks/data/useSamplesProvider/index.tsx","webpack://mgportalv2/./src/components/Analyses/Table/index.tsx","webpack://mgportalv2/./src/components/Study/Overview/index.tsx","webpack://mgportalv2/./src/components/Study/SummaryTab/index.tsx","webpack://mgportalv2/./src/pages/Study/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport CoverImage from 'images/cover_main_publication.gif';\nimport publications from './publications.json';\n\nimport './style.css';\n\nconst trimAuthors = (text: string, maxAuthorsLength: number): string => {\n  const authorList = text.slice(0, maxAuthorsLength).split(',');\n  authorList.pop();\n  authorList.push(' et al.');\n  return authorList.join(',');\n};\n\nexport const Publication: React.FC<{\n  title: string;\n  journal: string;\n  year: number;\n  link: string;\n  doi: string;\n  authors: string;\n  maxAuthorsLength?: number;\n}> = ({ title, journal, year, link, doi, authors, maxAuthorsLength }) => {\n  const trimmedAuthors =\n    maxAuthorsLength && authors.length > maxAuthorsLength\n      ? trimAuthors(authors, maxAuthorsLength)\n      : authors;\n  return (\n    <section className=\"mg-pub\">\n      <span className=\"mg-pub-title\">{title}.</span>{' '}\n      <span className=\"mg-pub-journal\">{journal}</span> (\n      <span className=\"mg-pub-year\">{year}</span>){' '}\n      <span className=\"mg-pub-doi\">\n        doi:\n        <a title={title} href={link} className=\"mg-ext\">\n          {doi}\n        </a>\n      </span>\n      <div className=\"mg-pub-authors\">{trimmedAuthors}.</div>\n    </section>\n  );\n};\nexport const MainPublication: React.FC = () => {\n  const publication = publications.filter((pub) => pub.main)?.[0];\n  return (\n    <div className=\"embl-grid | vf-content\">\n      <div className=\"vf-section-header mg-pub-section-header\">\n        <img\n          alt=\"Cover of the journal\"\n          src={CoverImage}\n          className=\"mg-pub-cover\"\n        />\n      </div>\n      <div>\n        <p>To cite MGnify, please refer to the following publication:</p>\n        {publication && (\n          <Publication\n            title={publication.title}\n            journal={publication.journal}\n            year={publication.year}\n            link={publication.link}\n            doi={publication.doi}\n            authors={publication.authors}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\nconst Publications: React.FC = () => {\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <section className=\"mg-pub-section\">\n      {publications\n        .filter((pub) => showMore || pub.recent)\n        .map((pub) => (\n          <article key={pub.doi}>\n            <Publication\n              title={pub.title}\n              journal={pub.journal}\n              year={pub.year}\n              link={pub.link}\n              doi={pub.doi}\n              authors={pub.authors}\n            />\n          </article>\n        ))}\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--sm\"\n          onClick={() => setShowMore(!showMore)}\n        >\n          {showMore ? 'Less' : 'More'} publications\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Publications;\n","import React from 'react';\n\nconst Box: React.FC<{ label: string; theme?: string }> = ({\n  label,\n  theme = 'primary',\n  children,\n}) => (\n  <div className=\"vf-grid\">\n    <div className={`vf-box vf-box--easy vf-box-theme--${theme}`}>\n      <h5 className=\"vf-box__heading\">{label}</h5>\n      <div className=\"vf-box__text\">{children}</div>\n    </div>\n  </div>\n);\n\nexport default Box;\n","import React from 'react';\n\nimport './style.css';\n\ntype ExtLinkProps = {\n  href: string;\n  title?: string;\n  id?: string;\n};\nconst ExtLink: React.FC<ExtLinkProps> = ({ href, id, title, children }) => (\n  <a\n    href={href}\n    title={title}\n    id={id}\n    target=\"_blank\"\n    rel=\"noreferrer noopener\"\n    className=\"mg-ext\"\n  >\n    <span className=\"icon icon-common icon-external-link-alt\" /> {children}\n  </a>\n);\n\nexport default ExtLink;\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\n\nimport './style.css';\n\n// TODO: make the link play nicer with react-router\nconst MarkerPopup: React.FC<{ sample: MGnifyDatum }> = ({ sample }) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">\n      <a href={`../samples/${sample.id}`}>{sample.id}</a>\n      {/* <Link to=\"/search/studies\">{sample.id}</Link> */}\n    </h3>\n    <p className=\"vf-box__text\">{sample.attributes['sample-desc']}</p>\n  </div>\n);\nconst ClusterMarkerPopup: React.FC<{ accessions: string[] }> = ({\n  accessions,\n}) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">Samples on this geographical location</h3>\n    <ul className=\"vf-list\">\n      {accessions.map((accession) => (\n        <li ref={accession}>\n          <a href={`../samples/${accession}`}>{accession}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ntype MapProps = {\n  samples: Array<MGnifyDatum>;\n};\n\nconst SamplesMap: React.FC<MapProps> = ({ samples }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const markerCluster = useRef<MarkerClusterer>(null);\n  const sampleInfoWindow = useRef(new google.maps.InfoWindow());\n  const clusterInfoWindow = useRef(new google.maps.InfoWindow());\n  const newBoundary = useRef(new google.maps.LatLngBounds());\n\n  const markers = useRef({});\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n        minZoom: 2,\n      });\n      setTheMap(tmpMap);\n    }\n  }, [theMap]);\n  useEffect(() => {\n    if (theMap && samples) {\n      if (markerCluster.current) {\n        markerCluster.current.clearMarkers();\n      }\n\n      samples\n        .filter(({ id }) => !(id in markers.current))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n            title: sample.id,\n          });\n          newBoundary.current.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.current.setContent(\n              ReactDOMServer.renderToString(<MarkerPopup sample={sample} />)\n            );\n            sampleInfoWindow.current.open(theMap, marker);\n          });\n          markers.current[sample.id] = marker;\n        });\n      markerCluster.current = new MarkerClusterer(\n        theMap,\n        Object.values(markers.current),\n        {\n          imagePath:\n            'https://raw.githubusercontent.com/googlemaps/js-markerclustererplus/master/images/m',\n          maxZoom: 10,\n        }\n      );\n\n      // for clusters in MAX Zoom and with less than 10 elements show a list\n      google.maps.event.addListener(\n        markerCluster.current,\n        'click',\n        // eslint-disable-next-line func-names\n        function (cluster) {\n          if (\n            // eslint-disable-next-line no-underscore-dangle, react/no-this-in-sfc\n            this.prevZoom_ + 1 <= this.getMaxZoom() ||\n            cluster.getSize() >= 10\n          ) {\n            return;\n          }\n          clusterInfoWindow.current.setPosition(cluster.getCenter());\n\n          clusterInfoWindow.current.setContent(\n            ReactDOMServer.renderToString(\n              <ClusterMarkerPopup\n                accessions={cluster.getMarkers().map((m) => m.getTitle())}\n              />\n            )\n          );\n\n          clusterInfoWindow.current.open(theMap);\n        }\n      );\n\n      theMap.fitBounds(newBoundary.current);\n    }\n  }, [theMap, samples]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\nexport default SamplesMap;\n","import React, { ReactElement } from 'react';\nimport { Status } from '@googlemaps/react-wrapper';\nimport { ErrorTypes } from 'hooks/data/useData';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\nexport default render;\n","import React, { useState, useContext } from 'react';\n\nimport { Wrapper } from '@googlemaps/react-wrapper';\n\nimport useSamplesProvider from 'hooks/data/useSamplesProvider';\n\nimport UserContext from 'pages/Login/UserContext';\nimport SamplesMap from 'components/UI/SamplesMap';\nimport render from '../render';\nimport '../style.css';\n\nconst LIMIT = 200;\n\ntype SamplesMapProps = {\n  study: string;\n};\nconst SamplesMapByStudy: React.FC<SamplesMapProps> = ({ study }) => {\n  const [limit, setLimit] = useState(LIMIT);\n  const { samples, total } = useSamplesProvider(study, limit);\n  const { config } = useContext(UserContext);\n\n  const samplesFiltered = samples.filter((sample) => {\n    try {\n      return (\n        Number(sample.attributes.longitude) !== 0.0 &&\n        Number(sample.attributes.latitude) !== 0.0\n      );\n    } catch {\n      return false;\n    }\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <SamplesMap samples={samplesFiltered} />\n        </Wrapper>\n      </div>\n      {total && (\n        <div className=\"mg-map-progress\">\n          <progress max={total} value={samples.length} />\n          {total > limit && (\n            <div>\n              ⚠️ We are only loading the first {LIMIT} samples. Click{' '}\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--link mg-button-as-link\"\n                onClick={() => setLimit(total)}\n              >\n                HERE\n              </button>{' '}\n              to load them all.\n            </div>\n          )}\n          {samplesFiltered.length === 0 && (\n            <div>\n              ⚠️ None of the {total > limit ? 'loaded' : ''} samples have\n              geolocation co-ordinates.\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SamplesMapByStudy;\n","import { useState, useEffect } from 'react';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, ErrorFromFetch } from 'hooks/data/useData';\n\ntype SampleProviderResponse = {\n  samples: MGnifyDatum[];\n  total: number | null;\n  loading: boolean;\n  error: ErrorFromFetch;\n};\nconst useSamplesProvider = (\n  study: string,\n  limit?: number\n): SampleProviderResponse => {\n  const [page, setPage] = useState(1);\n  const [samples, setSamples] = useState<MGnifyDatum[]>([]);\n  const [total, setTotal] = useState(null);\n  const { data, isStale, loading, error } = useMGnifyData('samples', {\n    study_accession: study,\n    page,\n  });\n  useEffect(() => {\n    if (data?.data && !isStale && page === data?.meta?.pagination?.page) {\n      const aggregatedSamples = [...samples, ...(data.data as MGnifyDatum[])];\n      setSamples(aggregatedSamples);\n      const totalInResponse = data?.meta?.pagination?.count;\n      if (total !== totalInResponse && typeof totalInResponse === 'number') {\n        setTotal(totalInResponse);\n      }\n      if (data?.links?.next && aggregatedSamples.length < limit) {\n        setPage(page + 1);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, page, limit]);\n  useEffect(() => {\n    if (data?.links?.next && samples.length < limit) {\n      setPage(page + 1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [limit]);\n\n  return { samples, total, loading, error };\n};\n\nexport default useSamplesProvider;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { unescape } from 'lodash';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\nconst AnalysesTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'analyses-page': 1,\n      'analyses-page_size': initialPageSize,\n      'analyses-order': '',\n    },\n    {\n      'analyses-page': Number,\n      'analyses-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `studies/${accession}/analyses`,\n    {\n      include: 'sample',\n      page: queryParameters['analyses-page'] as number,\n      ordering: queryParameters['analyses-order'] as string,\n      page_size: queryParameters['analyses-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const samples = {};\n  data.included\n    ?.filter(({ type }) => type === 'samples')\n    .forEach((sample) => {\n      samples[sample.id as string] = {\n        description: sample.attributes['sample-desc'],\n        biome: (\n          sample.relationships as Record<string, { data: { id: string } }>\n        ).biome.data.id,\n      };\n    });\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (analysis) =>\n        samples?.[analysis?.relationships?.sample?.data?.id]?.biome || '',\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n    },\n    {\n      id: 'sample',\n      Header: 'Sample accession',\n      accessor: (analysis) => analysis?.relationships?.sample?.data?.id,\n      Cell: ({ cell }) => (\n        <Link to={`/samples/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'description_id',\n      Header: 'Sample description',\n      accessor: (analysis) =>\n        samples?.[analysis?.relationships?.sample?.data?.id]?.description || '',\n      Cell: ({ cell }) => unescape(cell.value),\n    },\n    {\n      id: 'assembly_id',\n      Header: ' Run / Assembly accession',\n      accessor: (analysis) => analysis?.relationships?.sample?.data?.id || '',\n      Cell: ({ cell }) => (\n        <Link to={`/assemblies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'pipeline_id',\n      Header: 'Pipeline version',\n      accessor: (analysis) => analysis.attributes['pipeline-version'],\n      Cell: ({ cell }) => (\n        <Link to={`/pipelines/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'analysis_id',\n      Header: 'Analysis accession',\n      accessor: (analysis) => analysis.id,\n      Cell: ({ cell }) => (\n        <Link to={`/analyses/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      title=\"Analyses\"\n      initialPage={(queryParameters['analyses-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"analyses-\"\n    />\n  );\n};\n\nexport default AnalysesTable;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMapByStudy from 'components/UI/SamplesMap/ByStudy';\nimport Box from 'components/UI/Box';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { Publication } from 'components/Publications';\nimport AnalysesTable from 'components/Analyses/Table';\nimport ExtLink from 'components/UI/ExtLink';\nimport UserContext from 'pages/Login/UserContext';\n\ntype StudyOverviewProps = {\n  data: MGnifyDatum;\n  included: Array<unknown>;\n};\nconst StudyOverview: React.FC<StudyOverviewProps> = ({ data, included }) => {\n  const { config } = useContext(UserContext);\n  const lineage = data.relationships.biomes.data[0].id;\n  const publications = included.filter(({ type }) => type === 'publications');\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <Box label=\"Classification\">\n            <span\n              className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n              style={{ float: 'initial' }}\n            />\n            {lineage}\n          </Box>\n          <Box label=\"Description\">{data.attributes['study-abstract']}</Box>\n        </div>\n        <SamplesMapByStudy study={data.id} />\n      </div>\n      <br />\n      <div className=\"mg-flex\">\n        {data?.relationships?.studies?.data?.length > 0 && (\n          <Box label=\"Related studies\">\n            <ul className=\"vf-list\">\n              {data.relationships.studies.data.map(({ id }) => (\n                <li key={id as string}>\n                  <Link to={`/studies/${id}`}>{id}</Link>\n                </li>\n              ))}\n            </ul>\n          </Box>\n        )}\n        <div>\n          {data?.attributes?.['is-public'] && (\n            <Box label=\"External links\">\n              <ul className=\"vf-list\">\n                <li>\n                  <ExtLink\n                    href={`${config.enaURL}/${data.attributes['secondary-accession']}`}\n                  >\n                    ENA website ({data.attributes['secondary-accession']})\n                  </ExtLink>\n                </li>\n              </ul>\n            </Box>\n          )}\n          {publications?.length > 0 && (\n            <Box label=\"Publications\">\n              <ul className=\"vf-list\">\n                {publications.map(({ attributes, id }) => (\n                  <li key={id as string}>\n                    <Publication\n                      title={attributes['pub-title']}\n                      journal={attributes['iso-journal']}\n                      year={attributes['published-year']}\n                      link={`http://${attributes.doi}`}\n                      doi={attributes.doi}\n                      authors={attributes.authors}\n                      maxAuthorsLength={70}\n                    />\n                  </li>\n                ))}\n              </ul>\n            </Box>\n          )}\n        </div>\n      </div>\n      <br />\n      <div>\n        <AnalysesTable />\n      </div>\n    </section>\n  );\n};\n\nexport default StudyOverview;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\n\ntype SummaryProps = {\n  accession: string;\n};\ntype DownloadResponseType = {\n  attributes: {\n    'group-type': string;\n    description: {\n      label: string;\n    };\n  };\n  relationships: {\n    pipeline: {\n      data: {\n        id: string;\n      };\n    };\n  };\n  links: {\n    self: string;\n  };\n};\nconst SummaryTab: React.FC<SummaryProps> = ({ accession }) => {\n  const { data, loading, error } = useMGnifyData(\n    `studies/${accession}/downloads`\n  );\n  const pipelines = {};\n  ((data?.data as DownloadResponseType[]) || []).forEach((download) => {\n    const pipeline = download?.relationships?.pipeline?.data?.id;\n    const group = download?.attributes?.['group-type'];\n    const label = download?.attributes?.description.label;\n    const link = download?.links?.self;\n    if (!pipelines[pipeline]) {\n      pipelines[pipeline] = {};\n    }\n    if (!pipelines[pipeline][group]) {\n      pipelines[pipeline][group] = [];\n    }\n    pipelines[pipeline][group].push({\n      label,\n      link,\n    });\n  });\n  return (\n    <section>\n      <p>\n        In this section you can download the different results matrix files\n        summarising the study. Each downloadable file contains an aggregation of\n        the analysis results from the individual study&apos;s runs. To visualise\n        and download the analysis results for individual runs, please access\n        their respective pages.\n      </p>\n      {loading && <Loading />}\n      {error && <FetchError error={error} />}\n      <ul className=\"vf-list\">\n        {Object.entries(pipelines).map(([pipeline, groups]) => (\n          <li key={pipeline} className=\"vf-list__item mg-list__item\">\n            <h4>Pipeline version: {pipeline}</h4>\n            <ul className=\"vf-list\">\n              {Object.entries(groups).map(([group, links]) => (\n                <li key={group} className=\"vf-list__item mg-list__item\">\n                  <h6>{group}</h6>\n                  <ul className=\"vf-list\">\n                    {links.map(({ label, link }) => (\n                      <li key={link} className=\"vf-list__item mg-list__item\">\n                        <a href={link} download>\n                          <span className=\"icon icon-common icon-download\" />{' '}\n                          {label}\n                        </a>\n                      </li>\n                    ))}\n                  </ul>\n                </li>\n              ))}\n            </ul>\n            <hr />\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default SummaryTab;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Study/Overview';\nimport SummaryTab from 'components/Study/SummaryTab';\nimport RouteForHash from 'components/Nav/RouteForHash';\n\nconst tabs = [\n  { label: 'Overview', to: '#overview' },\n  { label: 'Analysis summary', to: '#analysis' },\n];\n\nconst StudyPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`studies/${accession}`, {\n    include: 'publications',\n  });\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: studyData, included } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Study {accession}</h2>\n      <h3>{studyData.attributes['study-name']}</h3>\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"#overview\" isDefault>\n            <Overview data={studyData} included={included || []} />\n          </RouteForHash>\n          <RouteForHash hash=\"#analysis\">\n            <SummaryTab accession={accession} />\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default StudyPage;\n"],"names":["Publication","title","journal","year","link","doi","authors","maxAuthorsLength","trimmedAuthors","length","text","authorList","slice","split","pop","push","join","trimAuthors","className","href","MainPublication","publication","pub","main","alt","src","showMore","setShowMore","useState","recent","map","key","type","onClick","label","theme","children","id","target","rel","MarkerPopup","sample","attributes","ClusterMarkerPopup","accessions","accession","ref","samples","useRef","theMap","setTheMap","markerCluster","sampleInfoWindow","google","maps","InfoWindow","clusterInfoWindow","newBoundary","LatLngBounds","markers","useEffect","tmpMap","Map","current","maxZoom","minZoom","clearMarkers","filter","forEach","position","lat","latitude","lng","longitude","marker","Marker","extend","addListener","setContent","open","Object","values","imagePath","event","cluster","this","prevZoom_","getMaxZoom","getSize","setPosition","getCenter","getMarkers","m","getTitle","fitBounds","style","height","status","Status","error","study","limit","setLimit","total","page","setPage","setSamples","setTotal","data","isStale","loading","useMGnifyData","study_accession","meta","pagination","aggregatedSamples","totalInResponse","count","links","next","config","useContext","UserContext","samplesFiltered","Number","Wrapper","apiKey","googleMapsKey","render","SamplesMap","max","value","useURLAccession","queryParameters","include","ordering","page_size","Loading","size","FetchError","included","description","biome","relationships","columns","Header","accessor","analysis","Cell","cell","float","to","unescape","EMGTable","cols","initialPage","initialPageSize","namespace","lineage","biomes","publications","Date","toDateString","Box","studies","ExtLink","enaURL","pipelines","download","pipeline","group","self","entries","groups","tabs","studyData","Tabs","RouteForHash","hash","isDefault","Overview"],"sourceRoot":""}