{"version":3,"sources":["webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/hooks/useMGnifyData/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/components/UI/BiomeSelector/index.tsx","webpack://mgportalv2/./src/pages/Browse/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"names":["PaginationButton","currentPageIndex","pageIndex","gotoPage","className","type","onClick","cols","data","title","fetchPage","onChangeSort","initialPage","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","nextPage","previousPage","state","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","paginationRanges","startingPages","adjacentPages","Math","max","page","length","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","disabled","paginationIndex","key","ErrorTypes","EmptyResponse","loading","error","NullURL","useData","url","setFullState","useState","setPartialState","updatedValues","prevState","useEffect","updateState","response","json","fetch","FetchError","ok","JSONError","status","NotOK","fetchData","useEBISearchData","endpoint","parameters","allParemeters","format","start","Object","entries","value","join","undefined","includes","useMGnifyData","keys","useBlogData","resource","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","forEach","parameter","serializer","String","get","useQueryParametersState","location","history","stateWithURL","useMemo","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","OptionLabel","label","style","display","alignItems","id","float","onSelect","initialValue","biomes","setValue","options","groupedLineages","biome","replace","childBiomes","lineageLabel","attributes","o","theme","borderRadius","border","colors","primary","primary25","primary50","primary75","neutral0","neutral5","neutral10","neutral20","neutral30","neutral40","neutral50","neutral60","neutral70","neutral80","neutral90","danger","dangerLight","styles","control","provided","isFocused","boxShadow","color","placeholder","onChange","option","action","formatOptionLabel","isLoading","isSearchable","name","queryParameters","setQueryParameters","order","Number","hasData","setHasData","studiesList","ordering","lineage","page_size","Header","accessor","study","relationships","Cell","href","original","links","self","height","EMGTable","count","tableSortBy","col","desc","getOrderingQueryParamFromSortedColumn","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineageList","split","x","toLowerCase","lineageD2","slice","lineageD3","lineageD4","lineageD5","lineageD6"],"mappings":"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","file":"js/34.8aa4c28e.chunk.js","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, { MouseEventHandler } from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: {\n    data: Record<string, any>[];\n    meta: Record<string, any>;\n    links?: Record<string, any>;\n  };\n  title?: string;\n  fetchPage?: (pageIndex: number, pageSize: number) => void;\n  onChangeSort?: (columnId: string) => void;\n  initialPage?: number;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title,\n  fetchPage,\n  onChangeSort,\n  initialPage = 0,\n}) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: data.data,\n      initialState: { pageIndex: initialPage },\n      pageCount: data.meta.pagination.pages,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n\n  React.useEffect(() => {\n    if (fetchPage) {\n      fetchPage(pageIndex, pageSize);\n    }\n  }, [fetchPage, pageIndex, pageSize]);\n\n  React.useEffect(() => {\n    if (onChangeSort) {\n      onChangeSort(sortBy);\n    }\n  }, [onChangeSort, sortBy]);\n\n  const paginationRanges = React.useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n\n  return (\n    <section>\n      <table {...getTableProps} className=\"vf-table--striped\">\n        <caption className=\"vf-table__caption\">{title}</caption>\n        <thead className=\"vf-table__header\">\n          {headerGroups.map((headerGroup) => (\n            <tr\n              {...headerGroup.getHeaderGroupProps()}\n              className=\"vf-table__row\"\n            >\n              {headerGroup.headers.map((column) => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className=\"vf-table__heading\"\n                >\n                  {column.render('Header')}\n                  {onChangeSort && (\n                    <>\n                      &nbsp;\n                      <span>\n                        {/* eslint-disable-next-line no-nested-ternary */}\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"icon icon-common icon-sort-down\" />\n                          ) : (\n                            <i className=\"icon icon-common icon-sort-up\" />\n                          )\n                        ) : (\n                          <i className=\"icon icon-common icon-sort\" />\n                        )}\n                      </span>\n                    </>\n                  )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n          {rows.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()} className=\"vf-table__row\">\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                      {cell.render('Cell')}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {fetchPage && (\n        <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n          <ul className=\"vf-pagination__list\">\n            <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n              <button\n                disabled={!canPreviousPage}\n                type=\"button\"\n                onClick={previousPage}\n                className=\"vf-button vf-button--link vf-pagination__link\"\n              >\n                Previous<span className=\"vf-u-sr-only\"> page</span>\n              </button>\n            </li>\n\n            {paginationRanges.startingPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            {paginationRanges.hasJumpFromStart && (\n              <li className=\"vf-pagination__item\">\n                <span className=\"vf-pagination__label\">...</span>\n              </li>\n            )}\n\n            {paginationRanges.adjacentPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            {paginationRanges.hasJumpToEnd && (\n              <li className=\"vf-pagination__item\">\n                <span className=\"vf-pagination__label\">...</span>\n              </li>\n            )}\n\n            {paginationRanges.endingPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n              <button\n                disabled={!canNextPage}\n                type=\"button\"\n                onClick={nextPage}\n                className=\"vf-button vf-button--link vf-pagination__link\"\n              >\n                Next<span className=\"vf-u-sr-only\"> page</span>\n              </button>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import { useState, useEffect } from 'react';\nimport config from 'config.json';\n\ntype KeyValue = {\n  [key: string]: string | number | Record<string, unknown> | [];\n};\ntype MGnifyResponse = {\n  data: Array<{\n    attributes: KeyValue;\n    id: string;\n    links: KeyValue;\n    type: string;\n    relationships: {\n      biomes?: {\n        data?: Array<{\n          id: string;\n        }>;\n      };\n      [key: string]: unknown;\n    };\n  }>;\n  links: {\n    first?: string;\n    last?: string;\n    next?: string;\n    prev?: string;\n  };\n  meta: {\n    pagination: {\n      count: number;\n      page: number;\n      pages: number;\n    };\n  };\n};\n\ntype BlogResponse = {\n  [category: string]: {\n    title: string;\n    url: string;\n    image: string;\n    excerpt: string;\n    category: string;\n    published: string;\n    emg: {\n      text: string;\n      url: string;\n    };\n  };\n};\n\nexport type ErrorFromFetch = {\n  status?: number;\n  response?: Promise<Response>;\n  type: ErrorTypes;\n  error?: unknown;\n};\nexport enum ErrorTypes {\n  FetchError,\n  NotOK,\n  JSONError,\n  NullURL,\n}\n\ninterface DataResponse {\n  data: null | KeyValue | MGnifyResponse | BlogResponse;\n  error: ErrorFromFetch | null;\n  loading: boolean;\n}\n\ninterface EBIDataResponse extends DataResponse {\n  data: KeyValue;\n}\ninterface MgnifyDataResponse extends DataResponse {\n  data: MGnifyResponse;\n}\ninterface BlogDataResponse extends DataResponse {\n  data: BlogResponse;\n}\n\nconst EmptyResponse = {\n  data: null,\n  loading: false,\n  error: {\n    type: ErrorTypes.NullURL,\n    error: 'The queried URL is null',\n  },\n};\n\nasync function fetchData(\n  url: string,\n  updateState: (DataResponse) => void\n): Promise<void> {\n  let response = null;\n  let json = null;\n  try {\n    response = await fetch(url);\n  } catch (error) {\n    updateState({\n      error: {\n        error,\n        type: ErrorTypes.FetchError,\n      },\n      loading: false,\n    });\n    return;\n  }\n  if (!response.ok) {\n    updateState({\n      error: {\n        status: response.status,\n        response,\n        type: ErrorTypes.NotOK,\n      },\n      loading: false,\n    });\n    return;\n  }\n  try {\n    json = await response.json();\n  } catch (error) {\n    updateState({\n      error: {\n        error,\n        type: ErrorTypes.JSONError,\n      },\n      loading: false,\n    });\n    return;\n  }\n\n  updateState({ data: json, loading: false, error: null });\n}\n\nconst useData: (url: string) => DataResponse = (url) => {\n  const [state, setFullState] = useState({\n    data: null,\n    loading: true,\n    error: null,\n  });\n  const setPartialState = (updatedValues): void => {\n    setFullState((prevState) => ({\n      ...prevState,\n      ...updatedValues,\n    }));\n  };\n  useEffect(() => {\n    // If the URL is null don't do the fetch and return the empty response\n    if (!url) {\n      setFullState(EmptyResponse);\n      return;\n    }\n    fetchData(url, setPartialState);\n  }, [url]);\n  return state;\n};\n\nexport const useEBISearchData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => EBIDataResponse = (endpoint, parameters = {}) => {\n  const defaultParameters = {\n    format: 'json',\n    start: 0,\n  };\n  const allParemeters = { ...defaultParameters, ...parameters };\n  const url = `${config.ebisearch}${endpoint}?${Object.entries(allParemeters)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')}`;\n  const data = useData([null, undefined].includes(endpoint) ? null : url);\n  return data as EBIDataResponse;\n};\n\nexport const useMGnifyData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => MgnifyDataResponse = (endpoint, parameters = {}) => {\n  const defaultParameters = {};\n  const allParemeters = { ...defaultParameters, ...parameters };\n  let url = `${config.api}${endpoint}`;\n  if (Object.keys(allParemeters).length > 0)\n    url += `?${Object.entries(allParemeters)\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&')}`;\n  const data = useData([null, undefined].includes(endpoint) ? null : url);\n  return data as MgnifyDataResponse;\n};\n\nexport const useBlogData: (resource: string) => BlogDataResponse = (\n  resource\n) => {\n  const data = useData(\n    [null, undefined].includes(resource) ? null : `${config.blog}${resource}`\n  );\n  return data as BlogDataResponse;\n};\n\nexport default useData;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const history = useHistory();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    history.push(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const history = useHistory();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      history.push(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\n\nimport groupBy from 'lodash/groupBy';\nimport split from 'lodash/split';\nimport map from 'lodash/map';\nimport flatMap from 'lodash/flatMap';\nimport find from 'lodash/find';\n\nimport Select from 'react-select';\nimport { useMGnifyData } from 'hooks/useMGnifyData';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype BiomeSelectorProps = {\n  onSelect: (lineage: string) => void;\n  initialValue?: string;\n};\n\ntype OptionProps = {\n  value: any;\n  label: string | number | Record<string, unknown> | [];\n};\n\nconst OptionLabel: React.FC<OptionProps> = ({ value, label }) => (\n  <div style={{ display: 'flex', alignItems: 'center' }}>\n    <div style={{ display: 'flex' }}>\n      <span\n        className={`biome_icon icon_xxs ${getBiomeIcon(value.id)}`}\n        style={{ float: 'initial' }}\n      />\n    </div>\n    <div>{label}</div>\n  </div>\n);\n\nconst BiomeSelector: React.FC<BiomeSelectorProps> = ({\n  onSelect,\n  initialValue,\n}) => {\n  const { data: biomes, loading } = useMGnifyData(\n    'biomes/root/children?depth_gte=1&depth_lte=3&page_size=100'\n  );\n  const [value, setValue] = useState<OptionProps | undefined>();\n  const options = React.useMemo(() => {\n    if (loading) {\n      return [{ label: 'Loading...', value: 'root' }];\n    }\n    const groupedLineages = groupBy(biomes.data, (biome) =>\n      split(biome.id.replace('root:', ''), ':', 1).join(':')\n    );\n    return map(groupedLineages, (childBiomes, lineageLabel) => ({\n      label: lineageLabel,\n      options: childBiomes.map((biome) => ({\n        value: biome,\n        label:\n          lineageLabel === biome.attributes['biome-name']\n            ? `All ${lineageLabel}`\n            : biome.attributes['biome-name'],\n      })),\n    }));\n  }, [biomes, loading]);\n\n  useEffect(() => {\n    if (initialValue && options?.length && !loading) {\n      setValue(\n        find(flatMap(options, 'options'), (o) => {\n          return o.value.id === initialValue;\n        })\n      );\n    }\n  }, [initialValue, options, loading]);\n\n  return (\n    <Select\n      theme={(theme) => ({\n        ...theme,\n        borderRadius: 0,\n        border: '2px solid grey',\n        colors: {\n          ...theme.colors,\n          primary: 'var(--vf-color--blue--dark)',\n          primary25: 'var(--vf-color--blue--light)',\n          primary50: 'var(--vf-color--blue--light)',\n          primary75: 'var(--vf-color--blue)',\n          neutral0: 'var(--vf-color--neutral--0)',\n          neutral5: 'var(--vf-color--neutral--100)',\n          neutral10: 'var(--vf-color--neutral--100)',\n          neutral20: 'var(--vf-color--neutral--200)',\n          neutral30: 'var(--vf-color--neutral--300)',\n          neutral40: 'var(--vf-color--neutral--400)',\n          neutral50: 'var(--vf-color--neutral--500)',\n          neutral60: 'var(--vf-color--neutral--600)',\n          neutral70: 'var(--vf-color--neutral--700)',\n          neutral80: 'var(--vf-color--neutral--800)',\n          neutral90: 'var(--vf-color--neutral--900)',\n          danger: 'var(--vf-color--red)',\n          dangerLight: 'var(--vf-color--red--light)',\n        },\n      })}\n      styles={{\n        control: (provided, state) => ({\n          ...provided,\n          border: state.isFocused\n            ? '2px solid var(--vf-color--grey--dark)'\n            : '2px solid var(--vf-color--grey)',\n          boxShadow: state.isFocused\n            ? '0 0 0 .0625rem var(--vf-color--grey--dark)'\n            : 'unset',\n          '&:hover': {\n            border: '2px solid var(--vf-color--grey--dark)',\n            boxShadow: '0 0 0 .0625rem var(--vf-color--grey--dark)',\n          },\n          color: state.isFocused\n            ? 'var(--vf-color--grey--dark)'\n            : 'var(--vf-color--grey)',\n        }),\n      }}\n      placeholder=\"Filter by biome\"\n      value={value}\n      onChange={(option, action) => {\n        if (action.action === 'select-option') {\n          setValue(option);\n          onSelect(option.value.id);\n        }\n      }}\n      formatOptionLabel={OptionLabel}\n      isLoading={loading}\n      isSearchable\n      name=\"biome\"\n      options={options}\n    />\n  );\n};\n\nexport default BiomeSelector;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { useMGnifyData } from 'hooks/useMGnifyData';\nimport EMGTable from 'components/UI/EMGTable';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport BiomeSelector from 'components/UI/BiomeSelector';\n\nfunction getOrderingQueryParamFromSortedColumn(tableSortBy: any): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\nconst Browse: React.FC = () => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n    },\n    {\n      page: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const { data: studiesList } = useMGnifyData('studies', {\n    page: Number(queryParameters.page),\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: 10,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n      },\n      {\n        id: 'accession',\n        Header: 'Accession',\n        accessor: 'attributes.accession',\n        Cell: ({ cell, row }) => (\n          <a href={row.original.links.self} className=\"vf-link\">\n            {cell.value}\n          </a>\n        ),\n      },\n      {\n        Header: 'Study name',\n        accessor: 'attributes.study-name',\n      },\n      {\n        Header: 'Samples',\n        accessor: 'attributes.samples-count',\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!studiesList);\n  }, [studiesList]);\n\n  return (\n    <section className=\"vf-content\">\n      <h2>Browse Page.</h2>\n      <BiomeSelector\n        onSelect={async (biome) => {\n          await setHasData(false);\n          setQueryParameters({\n            ...queryParameters,\n            biome,\n            page: 1,\n          });\n          await studiesList;\n          setHasData(true);\n        }}\n        initialValue={queryParameters.biome as string}\n      />\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={studiesList}\n          title={`Studies (${studiesList.meta.pagination.count})`}\n          fetchPage={(pageIndex) => {\n            setQueryParameters({\n              ...queryParameters,\n              page: pageIndex + 1,\n            });\n          }}\n          onChangeSort={(sortBy) => {\n            const order = getOrderingQueryParamFromSortedColumn(sortBy);\n            if (order === queryParameters.order) return;\n            setQueryParameters({\n              ...queryParameters,\n              order,\n              page: 1,\n            });\n          }}\n          initialPage={(queryParameters.page as number) - 1}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default Browse;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"sourceRoot":""}