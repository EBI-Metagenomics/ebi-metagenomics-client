{"version":3,"file":"js/400.0c9e012e.chunk.js","mappings":"sIAEA,MAUA,EAVsE,EACpEA,KAAAA,EACAC,UAAAA,EAAY,OAEZ,gCACGD,EAAKE,UAAU,EAAGD,GAClBD,EAAKG,QAAUF,GAAa,Q,mJCMjC,MA8BA,EA9B4D,EAAGG,QAAAA,MAC7D,MAAM,OAAEC,IAAW,IAAAC,YAAWC,EAAA,GAExBC,EAAkBJ,EAAQK,QAAQC,IACtC,IACE,OAC0C,IAAxCC,OAAOD,EAAOE,WAAWC,YACc,IAAvCF,OAAOD,EAAOE,WAAWE,UAE3B,SACA,OAAO,MAIX,OACE,uBAAKC,UAAU,oBACb,uBAAKA,UAAU,kBACb,gBAAC,EAAAC,QAAO,CAACC,OAAQZ,EAAOa,cAAeC,OAAQA,EAAA,GAC7C,gBAACC,EAAA,EAAU,CAAChB,QAASI,MAGzB,uBAAKO,UAAU,mBACe,IAA3BP,EAAgBL,QACf,uF,kCCzBV,MA6CA,EA7CsD,EAAGkB,KAAAA,M,MACvD,MAAMC,EAAUD,EAAKE,cAAcC,MAAMH,KAAKI,GAC9C,OACE,+BACE,uBAAKV,UAAU,WACb,2BACE,0B,gBACgB,IACb,IAAIW,KACa,QAAhB,EAAAL,MAAAA,OAAI,EAAJA,EAAMT,kBAAU,eAAG,gBACnBe,gBAEJ,gBAACC,EAAA,EAAG,CAACC,MAAM,eAAeR,EAAKT,WAAW,gBAC1C,gBAACgB,EAAA,EAAG,CAACC,MAAM,kBACT,0BACE,0BACE,gBAACC,EAAA,EAAO,CACNC,KAAM,0CAA0CV,EAAKT,WAAWoB,a,gBAElDX,EAAKT,WAAWoB,U,MAGlC,0BACE,gBAACF,EAAA,EAAO,CACNC,KAAM,4CAA4CV,EAAKT,WAAWqB,a,kBAElDZ,EAAKT,WAAWqB,U,QAKxC,gBAACL,EAAA,EAAG,CAACC,MAAM,kBACT,wBACEd,UAAW,uBAAsB,OAAaO,KAC9CY,MAAO,CAAEC,MAAO,aAEjBb,IAGL,gBAAC,EAAU,CAAClB,QAAS,CAACiB,Q,4CCtC9B,MAiFA,EA/EoC,KAClC,MAAMW,GAAY,EAAAI,EAAA,MACXC,IAAmB,OACxB,CACE,eAAgB,EAChB,oBAPkB,GAQlB,gBAAiB,IAEnB,CACE,eAAgB1B,OAChB,oBAAqBA,UAGnB,KAAEU,EAAI,QAAEiB,EAAO,MAAEC,EAAK,QAAEC,IAAY,EAAAC,EAAA,GACxC,WAAWT,YACX,CACEU,KAAML,EAAgB,gBACtBM,SAAUN,EAAgB,iBAC1BO,UAAWP,EAAgB,uBAG/B,GAAIC,IAAYE,EAAS,OAAO,gBAACK,EAAA,EAAO,CAACC,KAAK,UAC9C,GAAIP,IAAUlB,EAAM,OAAO,gBAAC0B,EAAA,EAAU,CAACR,MAAOA,IAE9C,MAAMS,EAAU,CACd,CACEvB,GAAI,WACJwB,OAAQ,QACRC,SAAWC,IAAS,QAAC,OAAoC,QAApC,EAA+B,QAA/B,EAAAA,EAAM5B,cAAc6B,OAAO/B,YAAI,eAAG,UAAE,eAAEI,IAC3D4B,KAAM,EAAGC,KAAAA,KACP,wBACEvC,UAAW,uBAAsB,OAAauC,EAAKC,SACnDrB,MAAO,CAAEC,MAAO,cAItB,CACEV,GAAI,QACJwB,OAAQ,kBACRC,SAAU,KACVG,KAAM,EAAGC,KAAAA,KACP,gBAAC,KAAI,CAACE,GAAI,YAAYF,EAAKC,SAAUD,EAAKC,QAG9C,CACEN,OAAQ,OACRC,SAAU,yBAEZ,CACED,OAAQ,WACRC,SAAU,4BACVG,KAAM,EAAGC,KAAAA,KAAW,gBAAC,IAAa,CAACtD,KAAOsD,EAAKC,OAAoB,MAErE,CACEN,OAAQ,gBACRC,SAAU,4BAEZ,CACEzB,GAAI,cACJwB,OAAQ,eACRC,SAAU,yBACVG,KAAM,EAAGC,KAAAA,KAAW,IAAI5B,KAAK4B,EAAKC,OAAOE,uBAI7C,OACE,gBAACC,EAAA,EAAQ,CACPC,KAAMX,EACN3B,KAAMA,EACNuC,YAAcvB,EAAgB,gBAA6B,EAC3DwB,gBAxEkB,GAyElB9C,UAAU,mBACVuB,QAASA,EACTE,QAASA,EACTsB,UAAU,cCXhB,EAjEiC,KAC/B,MAAM9B,GAAY,EAAAI,EAAA,MACXC,IAAmB,OACxB,CACE,YAAa,EACb,iBAPkB,GAQlB,aAAc,IAEhB,CACE,YAAa1B,OACb,iBAAkBA,UAGhB,KAAEU,EAAI,QAAEiB,EAAO,MAAEC,EAAK,QAAEC,IAAY,EAAAC,EAAA,GACxC,WAAWT,SACX,CACEU,KAAML,EAAgB,aACtBM,SAAUN,EAAgB,cAC1BO,UAAWP,EAAgB,oBAG/B,GAAIC,IAAYE,EAAS,OAAO,gBAACK,EAAA,EAAO,CAACC,KAAK,UAC9C,GAAIP,IAAUlB,EAAM,OAAO,gBAAC0B,EAAA,EAAU,CAACR,MAAOA,IAE9C,MAAMS,EAAU,CACd,CACEvB,GAAI,MACJwB,OAAQ,SACRC,SAAU,KACVG,KAAM,EAAGC,KAAAA,KAAW,gBAAC,KAAI,CAACE,GAAI,SAASF,EAAKC,SAAUD,EAAKC,QAE7D,CACEN,OAAQ,kBACRC,SAAU,8BAEZ,CACED,OAAQ,mBACRC,SAAU,+BAEZ,CACED,OAAQ,sBACRC,SAAU,kCAEZ,CACED,OAAQ,oBACRC,SAAU,+BACVG,KAAM,EAAGC,KAAAA,KACNA,EAAKC,MAA2BQ,KAAI,EAAGtC,GAAAA,KAASA,IAAIuC,KAAK,QAIhE,OACE,gBAACN,EAAA,EAAQ,CACPC,KAAMX,EACN3B,KAAMA,EACNuC,YAAcvB,EAAgB,aAA0B,EACxDwB,gBA1DkB,GA2DlB9C,UAAU,gBACVuB,QAASA,EACTE,QAASA,EACTsB,UAAU,WCIhB,EAhEuC,KACrC,MAAM9B,GAAY,EAAAI,EAAA,MACXC,IAAmB,OACxB,CACE,gBAAiB,EACjB,qBAPkB,GAQlB,iBAAkB,IAEpB,CACE,gBAAiB1B,OACjB,qBAAsBA,UAGpB,KAAEU,EAAI,QAAEiB,EAAO,MAAEC,EAAK,QAAEC,IAAY,EAAAC,EAAA,GAAc,aAAc,CACpEwB,iBAAkBjC,EAClBU,KAAML,EAAgB,iBACtBM,SAAUN,EAAgB,kBAC1BO,UAAWP,EAAgB,wBAE7B,GAAIC,IAAYE,EAAS,OAAO,gBAACK,EAAA,EAAO,CAACC,KAAK,UAC9C,GAAIP,IAAUlB,EAAM,OAAO,gBAAC0B,EAAA,EAAU,CAACR,MAAOA,IAE9C,MAAMS,EAAU,CACd,CACEC,OAAQ,cACRC,SAAU,KACVG,KAAM,EAAGC,KAAAA,KACP,gBAAC,KAAI,CAACE,GAAI,eAAeF,EAAKC,SAAUD,EAAKC,QAGjD,CACEN,OAAQ,kBACRC,SAAU,8BAEZ,CACED,OAAQ,SACRC,SAAU,4BAEZ,CACED,OAAQ,YACRC,SAAU,+BAEZ,CACED,OAAQ,oBACRC,SAAU,+BACVG,KAAM,EAAGC,KAAAA,KACNA,EAAKC,MAA2BQ,KAAI,EAAGtC,GAAAA,KAASA,IAAIuC,KAAK,QAIhE,OACE,gBAACN,EAAA,EAAQ,CACPC,KAAMX,EACN3B,KAAMA,EACNuC,YAAcvB,EAAgB,iBAA8B,EAC5DwB,gBAzDkB,GA0DlB9C,UAAU,oBACVuB,QAASA,EACTE,QAASA,EACTsB,UAAU,e,cClEhB,MAiBA,EAjB8C,EAAGI,KAAAA,KAC/C,uBACEnD,UAAU,yBACVmB,MAAO,CACLiC,oBAAqB,UACrBC,OAAQ,WAGTF,EAAKH,KAAI,EAAGM,IAAAA,EAAKd,MAAAA,KAChB,gBAAC,WAAc,CAACc,IAAKA,GACnB,uBAAKnC,MAAO,CAAEoC,UAAW,UAAYD,E,KACrC,2BAAMd,OCFRgB,EAAO,CACX,CAAE1C,MAAO,kBAAmB2B,GAAI,KAChC,CAAE3B,MAAO,qBAAsB2B,GAAI,YACnC,CAAE3B,MAAO,2BAA4B2B,GAAI,SACzC,CAAE3B,MAAO,iCAAkC2B,GAAI,gBA+CjD,EA5C6B,K,MAC3B,MAAMxB,GAAY,EAAAI,EAAA,MACZ,KAAEf,EAAI,QAAEiB,EAAO,MAAEC,IAAU,EAAAE,EAAA,GAAc,WAAWT,KAC1D,GAAIM,EAAS,OAAO,gBAACO,EAAA,EAAO,CAACC,KAAK,UAClC,GAAIP,EAAO,OAAO,gBAACQ,EAAA,EAAU,CAACR,MAAOA,IACrC,IAAKlB,EAAM,OAAO,gBAACwB,EAAA,EAAO,MAC1B,MAAQxB,KAAMmD,GAAenD,EAC7B,OACE,2BAASN,UAAU,cACjB,0B,oBAAsBiB,E,KACtB,0B,UAAYwC,EAAW5D,WAAW,gBAClC,2BAASG,UAAU,WACjB,uBAAKA,UAAU,0BACb,gBAAC0D,EAAQ,CAACpD,KAAMmD,IAChB,gBAACE,EAAA,EAAI,CAACH,KAAMA,IACZ,2BAASxD,UAAU,WACjB,uBAAKA,UAAU,0BACb,gBAAC4D,EAAA,EAAY,CAACC,KAAK,GAAGC,WAAS,GAC7B,gBAAC,EAAY,CACXX,MACyB,QAAtB,EAAAM,MAAAA,OAAU,EAAVA,EAAY5D,kBAAU,eAAG,qBAGlB,MAId,gBAAC+D,EAAA,EAAY,CAACC,KAAK,YACjB,gBAAC,EAAiB,OAEpB,gBAACD,EAAA,EAAY,CAACC,KAAK,SACjB,gBAAC,EAAc,OAEjB,gBAACD,EAAA,EAAY,CAACC,KAAK,eACjB,gBAAC,EAAoB","sources":["webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/BySamplesArray/index.tsx","webpack://mgportalv2/./src/components/Sample/Overview/index.tsx","webpack://mgportalv2/./src/components/Sample/Studies/index.tsx","webpack://mgportalv2/./src/components/Sample/Runs/index.tsx","webpack://mgportalv2/./src/components/Sample/Assemblies/index.tsx","webpack://mgportalv2/./src/components/UI/KeyValueList/index.tsx","webpack://mgportalv2/./src/pages/Sample/index.tsx"],"sourcesContent":["import React from 'react';\n\nconst TruncatedText: React.FC<{ maxLength?: number; text: string }> = ({\n  text,\n  maxLength = 250,\n}) => (\n  <>\n    {text.substring(0, maxLength)}\n    {text.length >= maxLength && '...'}\n  </>\n);\n\nexport default TruncatedText;\n","import React, { useContext } from 'react';\n\nimport { Wrapper } from '@googlemaps/react-wrapper';\n\nimport UserContext from 'pages/Login/UserContext';\nimport SamplesMap from 'components/UI/SamplesMap';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport render from '../render';\n\nimport '../style.css';\n\ntype SamplesMapProps = {\n  samples: Array<MGnifyDatum>;\n};\nconst SamplesMapBySamplesArray: React.FC<SamplesMapProps> = ({ samples }) => {\n  const { config } = useContext(UserContext);\n\n  const samplesFiltered = samples.filter((sample) => {\n    try {\n      return (\n        Number(sample.attributes.longitude) !== 0.0 &&\n        Number(sample.attributes.latitude) !== 0.0\n      );\n    } catch {\n      return false;\n    }\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <SamplesMap samples={samplesFiltered} />\n        </Wrapper>\n      </div>\n      <div className=\"mg-map-progress\">\n        {samplesFiltered.length === 0 && (\n          <div>⚠️ None of the samples have geolocation co-ordinates.</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SamplesMapBySamplesArray;\n","import React from 'react';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMap from 'components/UI/SamplesMap/BySamplesArray';\nimport Box from 'components/UI/Box';\nimport ExtLink from 'components/UI/ExtLink';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype SampleOverviewProps = {\n  data: MGnifyDatum;\n};\n\nconst SampleOverview: React.FC<SampleOverviewProps> = ({ data }) => {\n  const lineage = data.relationships.biome.data.id;\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <Box label=\"Description\">{data.attributes['sample-desc']}</Box>\n          <Box label=\"External links\">\n            <ul>\n              <li>\n                <ExtLink\n                  href={`https://www.ebi.ac.uk/ena/browser/view/${data.attributes.accession}`}\n                >\n                  ENA website ({data.attributes.accession})\n                </ExtLink>\n              </li>\n              <li>\n                <ExtLink\n                  href={`https://www.ebi.ac.uk/biosamples/samples/${data.attributes.biosample}`}\n                >\n                  EBI biosample ({data.attributes.biosample})\n                </ExtLink>\n              </li>\n            </ul>\n          </Box>\n          <Box label=\"Classification\">\n            <span\n              className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n              style={{ float: 'initial' }}\n            />\n            {lineage}\n          </Box>\n        </div>\n        <SamplesMap samples={[data]} />\n      </div>\n    </section>\n  );\n};\n\nexport default SampleOverview;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\n\nconst AssociatedStudies: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'studies-page': 1,\n      'studies-page_size': initialPageSize,\n      'studies-order': '',\n    },\n    {\n      'studies-page': Number,\n      'studies-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `samples/${accession}/studies`,\n    {\n      page: queryParameters['studies-page'] as number,\n      ordering: queryParameters['studies-order'] as string,\n      page_size: queryParameters['studies-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n      Cell: ({ cell }) => <TruncatedText text={(cell.value as string) || ''} />,\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['studies-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-studies-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"studies-\"\n    />\n  );\n};\n\nexport default AssociatedStudies;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst initialPageSize = 10;\n\nconst AssociatedRuns: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'runs-page': 1,\n      'runs-page_size': initialPageSize,\n      'runs-order': '',\n    },\n    {\n      'runs-page': Number,\n      'runs-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `samples/${accession}/runs`,\n    {\n      page: queryParameters['runs-page'] as number,\n      ordering: queryParameters['runs-order'] as string,\n      page_size: queryParameters['runs-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'run',\n      Header: 'Run ID',\n      accessor: 'id',\n      Cell: ({ cell }) => <Link to={`/runs/${cell.value}`}>{cell.value}</Link>,\n    },\n    {\n      Header: 'Experiment type',\n      accessor: 'attributes.experiment-type',\n    },\n    {\n      Header: 'Instrument model',\n      accessor: 'attributes.instrument-model',\n    },\n    {\n      Header: 'Instrument platform',\n      accessor: 'attributes.instrument-platform',\n    },\n    {\n      Header: 'pipeline versions',\n      accessor: 'relationships.pipelines.data',\n      Cell: ({ cell }) =>\n        (cell.value as { id: string }[]).map(({ id }) => id).join(', '),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['runs-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-runs-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"runs-\"\n    />\n  );\n};\n\nexport default AssociatedRuns;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst initialPageSize = 10;\n\nconst AssociatedAssemblies: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'assembly-page': 1,\n      'assembly-page_size': initialPageSize,\n      'assembly-order': '',\n    },\n    {\n      'assembly-page': Number,\n      'assembly-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(`assemblies`, {\n    sample_accession: accession,\n    page: queryParameters['assembly-page'] as number,\n    ordering: queryParameters['assembly-order'] as string,\n    page_size: queryParameters['assembly-page_size'] as number,\n  });\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      Header: 'Assembly ID',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/assemblies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Experiment type',\n      accessor: 'attributes.experiment-type',\n    },\n    {\n      Header: 'WGS ID',\n      accessor: 'attributes.wgs-accession',\n    },\n    {\n      Header: 'Legacy ID',\n      accessor: 'attributes.legacy-accession',\n    },\n    {\n      Header: 'Pipeline versions',\n      accessor: 'relationships.pipelines.data',\n      Cell: ({ cell }) =>\n        (cell.value as { id: string }[]).map(({ id }) => id).join(', '),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['assembly-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-assembly-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"assembly-\"\n    />\n  );\n};\n\nexport default AssociatedAssemblies;\n","import React from 'react';\n\ntype KeyValueProps = {\n  list: { key: string; value: string }[];\n};\n\nconst KeyValueList: React.FC<KeyValueProps> = ({ list }) => (\n  <div\n    className=\"vf-grid vf-grid__col-2\"\n    style={{\n      gridTemplateColumns: '1fr 2fr',\n      rowGap: '0.5rem',\n    }}\n  >\n    {list.map(({ key, value }) => (\n      <React.Fragment key={key}>\n        <div style={{ textAlign: 'right' }}>{key}:</div>\n        <div>{value}</div>\n      </React.Fragment>\n    ))}\n  </div>\n);\n\nexport default KeyValueList;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Sample/Overview';\nimport AssociatedStudies from 'components/Sample/Studies';\nimport AssociatedRuns from 'components/Sample/Runs';\nimport AssociatedAssemblies from 'components/Sample/Assemblies';\nimport RouteForHash from 'components/Nav/RouteForHash';\nimport KeyValueList from 'components/UI/KeyValueList';\n\nconst tabs = [\n  { label: 'Sample metadata', to: '#' },\n  { label: 'Associated studies', to: '#studies' },\n  { label: 'Analysed associated runs', to: '#runs' },\n  { label: 'Analysed associated assemblies', to: '#assemblies' },\n];\n\nconst SamplePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`samples/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: sampleData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Sample overview ({accession})</h2>\n      <h3>Sample {sampleData.attributes['sample-name']}</h3>\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <Overview data={sampleData} />\n          <Tabs tabs={tabs} />\n          <section className=\"vf-grid\">\n            <div className=\"vf-stack vf-stack--200\">\n              <RouteForHash hash=\"\" isDefault>\n                <KeyValueList\n                  list={\n                    (sampleData?.attributes?.['sample-metadata'] as {\n                      key: string;\n                      value: string;\n                    }[]) || []\n                  }\n                />\n              </RouteForHash>\n              <RouteForHash hash=\"#studies\">\n                <AssociatedStudies />\n              </RouteForHash>\n              <RouteForHash hash=\"#runs\">\n                <AssociatedRuns />\n              </RouteForHash>\n              <RouteForHash hash=\"#assemblies\">\n                <AssociatedAssemblies />\n              </RouteForHash>\n            </div>\n          </section>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default SamplePage;\n"],"names":["text","maxLength","substring","length","samples","config","useContext","UserContext","samplesFiltered","filter","sample","Number","attributes","longitude","latitude","className","Wrapper","apiKey","googleMapsKey","render","SamplesMap","data","lineage","relationships","biome","id","Date","toDateString","Box","label","ExtLink","href","accession","biosample","style","float","useURLAccession","queryParameters","loading","error","isStale","useMGnifyData","page","ordering","page_size","Loading","size","FetchError","columns","Header","accessor","study","biomes","Cell","cell","value","to","toLocaleDateString","EMGTable","cols","initialPage","initialPageSize","namespace","map","join","sample_accession","list","gridTemplateColumns","rowGap","key","textAlign","tabs","sampleData","Overview","Tabs","RouteForHash","hash","isDefault"],"sourceRoot":""}