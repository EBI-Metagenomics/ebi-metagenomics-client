{"version":3,"file":"js/422.f51dcfb6.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/components/UI/BiomeSelector/index.tsx","webpack://mgportalv2/./src/components/Browse/Studies/index.tsx","webpack://mgportalv2/./src/components/Browse/SuperStudies/index.tsx","webpack://mgportalv2/./src/components/Browse/Samples/index.tsx","webpack://mgportalv2/./src/components/Browse/Publications/index.tsx","webpack://mgportalv2/./src/components/Browse/Genomes/index.tsx","webpack://mgportalv2/./src/components/Browse/Biomes/index.tsx","webpack://mgportalv2/./src/pages/Browse/index.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n  preservedQueryParameters?: string[];\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs, preservedQueryParameters }) => {\n  const location = useLocation();\n  const queryParamString = useMemo(() => {\n    if (!preservedQueryParameters) return '';\n    const preserved = new URLSearchParams();\n    const existing = new URLSearchParams(location.search);\n    let anyPreserved = false;\n    preservedQueryParameters.forEach((queryParam) => {\n      if (existing.has(queryParam))\n        preserved.append(queryParam, existing.get(queryParam));\n      anyPreserved = true;\n    });\n    return anyPreserved ? `?${preserved.toString()}` : '';\n  }, [preservedQueryParameters, location.search]);\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to + queryParamString}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\n\nimport { groupBy, split, map, flatMap, find } from 'lodash-es';\nimport Select from 'react-select';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList, MGnifyDatum } from 'hooks/data/useData';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype BiomeSelectorProps = {\n  onSelect: (lineage: string) => void;\n  initialValue?: string;\n};\n\ntype OptionProps = {\n  value: MGnifyDatum | string;\n  label: string | number | Record<string, unknown> | [];\n};\n\nconst OptionLabel: React.FC<OptionProps> = ({ value, label }) => (\n  <div className=\"vf-flag vf-flag--middle vf-flag--200\">\n    <div className=\"vf-flag__media\">\n      <span\n        className={`biome_icon icon_xxs ${getBiomeIcon(\n          typeof value === 'string' ? value : value.id\n        )}`}\n        style={{ float: 'initial' }}\n      />\n    </div>\n    <div className=\"vf-flag__body\">{label}</div>\n  </div>\n);\n\nconst BiomeSelector: React.FC<BiomeSelectorProps> = ({\n  onSelect,\n  initialValue,\n}) => {\n  const { data: biomes, loading } = useMGnifyData(\n    'biomes/root/children?depth_gte=1&depth_lte=4&page_size=100'\n  );\n  const [value, setValue] = useState<OptionProps | undefined>();\n  const options = React.useMemo(() => {\n    if (loading) {\n      return [{ label: 'Loading...', value: 'root' }];\n    }\n    const groupedLineages = groupBy(\n      (biomes as MGnifyResponseList).data,\n      (biome) => split(biome.id.replace('root:', ''), ':', 1).join(':')\n    );\n    return map(groupedLineages, (childBiomes, lineageLabel) => ({\n      label: lineageLabel,\n      options: childBiomes.map((biome) => ({\n        value: biome,\n        label: `${\n          (biome.attributes.lineage as string).replace(/[^:]/g, '').length > 2\n            ? '↳  '\n            : ''\n        }${\n          lineageLabel === biome.attributes['biome-name']\n            ? `All ${lineageLabel}`\n            : biome.attributes['biome-name']\n        }\n            `,\n      })),\n    }));\n  }, [biomes, loading]);\n\n  useEffect(() => {\n    if (initialValue && options?.length && !loading) {\n      setValue(\n        find(flatMap(options, 'options'), (o) => {\n          return o.value.id === initialValue;\n        })\n      );\n    }\n  }, [initialValue, options, loading]);\n\n  return (\n    <div style={{ flexGrow: 1, maxWidth: '320px' }}>\n      <label className=\"vf-form__label\" htmlFor=\"biome-select\">\n        Filter biome\n      </label>\n      <Select\n        theme={(theme) => ({\n          ...theme,\n          borderRadius: 0,\n          border: '2px solid grey',\n          colors: {\n            ...theme.colors,\n            primary: 'var(--vf-color--blue--dark)',\n            primary25: 'var(--vf-color--blue--light)',\n            primary50: 'var(--vf-color--blue--light)',\n            primary75: 'var(--vf-color--blue)',\n            neutral0: 'var(--vf-color--neutral--0)',\n            neutral5: 'var(--vf-color--neutral--100)',\n            neutral10: 'var(--vf-color--neutral--100)',\n            neutral20: 'var(--vf-color--neutral--200)',\n            neutral30: 'var(--vf-color--neutral--300)',\n            neutral40: 'var(--vf-color--neutral--400)',\n            neutral50: 'var(--vf-color--neutral--500)',\n            neutral60: 'var(--vf-color--neutral--600)',\n            neutral70: 'var(--vf-color--neutral--700)',\n            neutral80: 'var(--vf-color--neutral--800)',\n            neutral90: 'var(--vf-color--neutral--900)',\n            danger: 'var(--vf-color--red)',\n            dangerLight: 'var(--vf-color--red--light)',\n          },\n        })}\n        styles={{\n          control: (provided, state) => ({\n            ...provided,\n            border: state.isFocused\n              ? '2px solid var(--vf-color--grey--dark)'\n              : '2px solid var(--vf-color--grey)',\n            boxShadow: state.isFocused\n              ? '0 0 0 .0625rem var(--vf-color--grey--dark)'\n              : 'unset',\n            '&:hover': {\n              border: '2px solid var(--vf-color--grey--dark)',\n              boxShadow: '0 0 0 .0625rem var(--vf-color--grey--dark)',\n            },\n            color: state.isFocused\n              ? 'var(--vf-color--grey--dark)'\n              : 'var(--vf-color--grey)',\n          }),\n        }}\n        placeholder=\"Filter by biome\"\n        value={value}\n        onChange={(option, action) => {\n          if (action.action === 'select-option') {\n            setValue(option);\n            onSelect(\n              typeof option.value === 'string' ? option.value : option.value.id\n            );\n          }\n        }}\n        formatOptionLabel={OptionLabel}\n        isLoading={loading}\n        isSearchable\n        name=\"biome\"\n        inputId=\"biome-select\"\n        options={options}\n      />\n    </div>\n  );\n};\n\nexport default BiomeSelector;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport BiomeSelector from 'components/UI/BiomeSelector';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport Loading from 'components/UI/Loading';\n\nconst BrowseStudies: React.FC = () => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n      search: '',\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: studiesList,\n    loading,\n    isStale,\n    downloadURL,\n  } = useMGnifyData('studies', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n    search: (queryParameters.search as string) || undefined,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n        className: 'mg-biome',\n      },\n      {\n        id: 'study_id',\n        Header: 'Accession',\n        accessor: 'attributes.accession',\n        Cell: ({ cell }) => (\n          <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Study name',\n        accessor: 'attributes.study-name',\n      },\n      {\n        Header: 'Samples',\n        accessor: 'attributes.samples-count',\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!studiesList);\n  }, [studiesList]);\n  if (!studiesList && loading) return <Loading />;\n  return (\n    <section className=\"mg-browse-section\">\n      <div>\n        <BiomeSelector\n          onSelect={async (biome) => {\n            await setHasData(false);\n            setQueryParameters({\n              ...queryParameters,\n              biome,\n              page: 1,\n            });\n            await studiesList;\n            setHasData(true);\n          }}\n          initialValue={queryParameters.biome as string}\n        />\n      </div>\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={studiesList as MGnifyResponseList}\n          Title={`Studies (${studiesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          showTextFilter\n          downloadURL={downloadURL}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseStudies;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport Loading from 'components/UI/Loading';\n\nconst BrowseSuperStudies: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: superStudiesList,\n    loading,\n    isStale,\n    downloadURL,\n  } = useMGnifyData('super-studies', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Title',\n        accessor: 'attributes.title',\n        Cell: ({ cell }) => (\n          <Link\n            to={`/super-studies/${cell.row.original.attributes['url-slug']}`}\n          >\n            {cell.value}\n          </Link>\n        ),\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.description',\n        disableSortBy: true,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!superStudiesList);\n  }, [superStudiesList]);\n  if (!superStudiesList && loading) return <Loading />;\n\n  return (\n    <section className=\"mg-browse-section\">\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={superStudiesList as MGnifyResponseList}\n          Title={`Super Studies (${superStudiesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          showPagination={false}\n          downloadURL={downloadURL}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSuperStudies;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport BiomeSelector from 'components/UI/BiomeSelector';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport Loading from 'components/UI/Loading';\n\nconst BrowseSamples: React.FC = () => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n      search: '',\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: samplesList,\n    loading,\n    isStale,\n    downloadURL,\n  } = useMGnifyData('samples', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n    search: (queryParameters.search as string) || undefined,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (sample) => sample.relationships.biome.data?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n        className: 'mg-biome',\n      },\n      {\n        Header: 'Accession',\n        accessor: 'attributes.accession',\n        Cell: ({ cell }) => (\n          <Link to={`/samples/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Sample name',\n        accessor: 'attributes.sample-name',\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.sample-desc',\n        disableSortBy: true,\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!samplesList);\n  }, [samplesList]);\n  if (!samplesList && loading) return <Loading />;\n\n  return (\n    <section className=\"mg-browse-section\">\n      <div>\n        <BiomeSelector\n          onSelect={async (biome) => {\n            await setHasData(false);\n            setQueryParameters({\n              ...queryParameters,\n              biome,\n              page: 1,\n            });\n            await samplesList;\n            setHasData(true);\n          }}\n          initialValue={queryParameters.biome as string}\n        />\n      </div>\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={samplesList as MGnifyResponseList}\n          Title={`Samples (${samplesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          showTextFilter\n          downloadURL={downloadURL}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSamples;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport ExtLink from 'components/UI/ExtLink';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport Loading from 'components/UI/Loading';\n\nconst BrowsePublications: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      page_size: 25,\n      search: '',\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: publicationsList,\n    loading,\n    isStale,\n    downloadURL,\n  } = useMGnifyData('publications', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    page_size: queryParameters.page_size as number,\n    search: (queryParameters.search as string) || undefined,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'pubmed_id',\n        Header: 'PMID',\n        accessor: 'id',\n        Cell: ({ cell }) => (\n          <ExtLink href={`https://europepmc.org/abstract/MED/${cell.value}`}>\n            {cell.value}\n          </ExtLink>\n        ),\n      },\n      {\n        Header: 'Publication title',\n        accessor: 'attributes.pub-title',\n        disableSortBy: true,\n      },\n      {\n        Header: 'Studies',\n        accessor: 'attributes.studies-count',\n      },\n      {\n        Header: 'Year of pub.',\n        accessor: 'attributes.published-year',\n      },\n      {\n        Header: 'Link',\n        accessor: 'attributes.pubmed-id',\n        Cell: ({ cell }) => (\n          <Link\n            to={`/publications/${cell.value}`}\n            className=\"vf-button vf-button--primary vf-button--sm \"\n          >\n            View details\n          </Link>\n        ),\n        disableSortBy: true,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!publicationsList);\n  }, [publicationsList]);\n  if (!publicationsList && loading) return <Loading />;\n\n  return (\n    <section className=\"mg-browse-section\">\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={publicationsList as MGnifyResponseList}\n          Title={`Publications (${publicationsList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          showTextFilter\n          downloadURL={downloadURL}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowsePublications;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport Loading from 'components/UI/Loading';\n\nconst BrowseSamples: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: genomesList,\n    loading,\n    isStale,\n    downloadURL,\n  } = useMGnifyData('genome-catalogues', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (catalogue) => catalogue.relationships.biome.data?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n        className: 'mg-biome',\n      },\n      {\n        Header: 'Catalogue ID',\n        accessor: 'id',\n        Cell: ({ cell }) => (\n          <Link to={`/genome-catalogues/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Catalogue name',\n        accessor: 'attributes.name',\n      },\n      {\n        Header: 'Catalogue version',\n        accessor: 'attributes.version',\n      },\n      {\n        Header: 'Genomes count',\n        accessor: 'attributes.genome-count',\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!genomesList);\n  }, [genomesList]);\n\n  if (!genomesList && loading) return <Loading />;\n  return (\n    <section className=\"mg-browse-section\">\n      <div>\n        <p>\n          Genome catalogues are biome-specific collections of\n          metagenomic-assembled and isolate genomes. The latest version of each\n          catalogue is shown on this website. Data for current and previous\n          versions are available on the{' '}\n          <a href=\"https://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/\">\n            FTP server\n          </a>\n          .\n        </p>\n        <p>Select a catalogue in the table to browse or search its genomes.</p>\n      </div>\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={genomesList as MGnifyResponseList}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          downloadURL={downloadURL}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSamples;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport Loading from 'components/UI/Loading';\n\nconst BrowseBiomes: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '-samples_count',\n      page_size: 25,\n      search: '',\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: biomesList,\n    loading,\n    isStale,\n    downloadURL,\n  } = useMGnifyData('biomes', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    page_size: queryParameters.page_size as number,\n    search: (queryParameters.search as string) || undefined,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: '',\n        accessor: 'id',\n        Cell: ({ cell }) => (\n          <span className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`} />\n        ),\n        disableSortBy: true,\n        className: 'mg-biome',\n      },\n      {\n        id: 'biome_name',\n        Header: 'Biome name and lineage',\n        accessor: (biome) => ({\n          lineage: biome.attributes.lineage,\n          name: biome.attributes['biome-name'],\n        }),\n        Cell: ({ cell }) => (\n          <>\n            <Link to={`/browse/studies?biome=${cell.value.lineage}`}>\n              {cell.value.name}\n            </Link>\n            <br />\n            {cell.value.lineage}\n          </>\n        ),\n      },\n      {\n        Header: 'Samples excluding sub-lineages',\n        id: 'samples_count',\n        accessor: (biome) => ({\n          lineage: biome.attributes.lineage,\n          count: biome.attributes['samples-count'],\n        }),\n        Cell: ({ cell }) => (\n          <Link to={`/browse/samples?biome=${cell.value.lineage}`}>\n            {cell.value.count}\n          </Link>\n        ),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!biomesList);\n  }, [biomesList]);\n  if (!biomesList && loading) return <Loading />;\n\n  return (\n    <section className=\"mg-browse-section\">\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={biomesList as MGnifyResponseList}\n          Title={`Biomes (${biomesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          showTextFilter\n          downloadURL={downloadURL}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseBiomes;\n","import React from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\n\nimport BrowseStudies from 'components/Browse/Studies';\nimport BrowseSuperStudies from 'components/Browse/SuperStudies';\nimport BrowseSamples from 'components/Browse/Samples';\nimport BrowsePublications from 'components/Browse/Publications';\nimport BrowseGenomes from 'components/Browse/Genomes';\nimport BrowseBiomes from 'components/Browse/Biomes';\nimport Tabs from 'components/UI/Tabs';\n\nconst tabs = [\n  { label: 'Super Studies', to: '/browse/super-studies' },\n  { label: 'Studies', to: '/browse/studies' },\n  { label: 'Samples', to: '/browse/samples' },\n  { label: 'Publications', to: '/browse/publications' },\n  { label: 'Genomes', to: '/browse/genomes' },\n  { label: 'Biomes', to: '/browse/biomes' },\n];\n\nconst Browse: React.FC = () => {\n  return (\n    <section className=\"vf-content\">\n      <h2>Browse MGnify</h2>\n      <Tabs tabs={tabs} />\n      <div className=\"vf-u-padding__top--600\">\n        <Routes>\n          <Route path=\"super-studies\" element={<BrowseSuperStudies />} />\n          <Route path=\"studies\" element={<BrowseStudies />} />\n          <Route path=\"samples\" element={<BrowseSamples />} />\n          <Route path=\"publications\" element={<BrowsePublications />} />\n          <Route path=\"genomes\" element={<BrowseGenomes />} />\n          <Route path=\"biomes\" element={<BrowseBiomes />} />\n          <Route index element={<Navigate to=\"super-studies\" replace />} />\n        </Routes>\n      </div>\n    </section>\n  );\n};\n\nexport default Browse;\n"],"names":["tabs","preservedQueryParameters","location","queryParamString","useMemo","preserved","URLSearchParams","existing","search","anyPreserved","forEach","queryParam","has","append","get","toString","className","map","label","Label","to","key","pathname","startsWith","hash","OptionLabel","value","id","style","float","onSelect","initialValue","data","biomes","loading","useMGnifyData","setValue","useState","options","groupedLineages","groupBy","biome","split","replace","join","childBiomes","lineageLabel","attributes","lineage","length","useEffect","find","flatMap","o","flexGrow","maxWidth","htmlFor","theme","borderRadius","border","colors","primary","primary25","primary50","primary75","neutral0","neutral5","neutral10","neutral20","neutral30","neutral40","neutral50","neutral60","neutral70","neutral80","neutral90","danger","dangerLight","styles","control","provided","state","isFocused","boxShadow","color","placeholder","onChange","option","action","formatOptionLabel","isLoading","isSearchable","name","inputId","queryParameters","setQueryParameters","page","order","page_size","Number","hasData","setHasData","studiesList","isStale","downloadURL","ordering","undefined","columns","Header","accessor","study","relationships","Cell","cell","disableSortBy","Date","toLocaleDateString","Loading","height","EMGTable","cols","Title","meta","pagination","count","initialPage","sortable","showTextFilter","superStudiesList","row","original","showPagination","samplesList","sample","publicationsList","ExtLink","href","genomesList","catalogue","biomesList","Tabs","path","element","index"],"sourceRoot":""}