{"version":3,"file":"js/452.c5a6c8e7.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/Box/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/TextInputDebounced/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/components/UI/ExtLink/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React from 'react';\n\nconst Box: React.FC<{ label: string; theme?: string }> = ({\n  label,\n  theme = 'primary',\n  children,\n}) => (\n  <div className=\"vf-grid\">\n    <div className={`vf-box vf-box--easy vf-box-theme--${theme}`}>\n      <h5 className=\"vf-box__heading\">{label}</h5>\n      <div className=\"vf-box__text\">{children}</div>\n    </div>\n  </div>\n);\n\nexport default Box;\n","import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","import React, { useState, useCallback } from 'react';\nimport { debounce } from 'lodash-es';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport './style.css';\n\ntype TextInputDebouncedProps = {\n  namespace: string;\n};\nconst TextInputDebounced: React.FC<TextInputDebouncedProps> = ({\n  namespace,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState({\n    [`${namespace}search`]: '',\n  });\n  const [value, setValue] = useState(\n    (queryParameters[`${namespace}search`] as string) || ''\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounced = useCallback(\n    debounce((v: string): void => {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}search`]: v,\n      });\n    }, 300),\n    []\n  );\n  const handleOnChange = (event): void => {\n    const v = event.target.value;\n    setValue(v);\n    debounced(v);\n  };\n  return (\n    <div className=\"vf-form__item mg-textsearch\">\n      <label className=\"vf-form__label vf-search__label\" htmlFor=\"searchitem\">\n        Filter\n      </label>\n      <input\n        type=\"search\"\n        placeholder=\"Enter your search terms\"\n        id=\"searchitem\"\n        className=\"vf-form__input\"\n        onChange={handleOnChange}\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default TextInputDebounced;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable, Row } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse, MGnifyDatum } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\nimport TextInputDebounced from '../TextInputDebounced';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse | Array<MGnifyDatum> | Record<string, unknown>[];\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  showTextFilter?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  initialPageCount?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n  downloadURL?: string;\n  onMouseEnterRow?: (row: Row) => void;\n  onMouseLeaveRow?: (row: Row) => void;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title: Title,\n  initialPage = 0,\n  initialPageSize = 25,\n  initialPageCount = null,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  showTextFilter = false,\n  sortable = false,\n  loading = false,\n  isStale = false,\n  downloadURL = null,\n  onMouseEnterRow = () => null,\n  onMouseLeaveRow = () => null,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n      [`${namespace}search`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: (data as MGnifyResponse)?.data || data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount:\n        initialPageCount ||\n        (data as MGnifyResponse)?.meta?.pagination?.pages ||\n        1,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped mg-table ${className}`}\n          ref={tableRef}\n        >\n          {(Title || showTextFilter || downloadURL) && (\n            <caption className=\"vf-table__caption mg-table-caption\">\n              <div>\n                <div>\n                  {showTextFilter && (\n                    <TextInputDebounced namespace={namespace} />\n                  )}\n                  {downloadURL && (\n                    <>\n                      {' '}\n                      <a\n                        href={downloadURL}\n                        className=\"vf-button vf-button--secondary vf-button--sm\"\n                        style={{ whiteSpace: 'nowrap' }}\n                        download\n                      >\n                        <span className=\"icon icon-common icon-download\" />{' '}\n                        Download\n                      </a>\n                    </>\n                  )}\n                </div>\n                {Title && (typeof Title === 'string' ? Title : <Title />)}\n              </div>\n            </caption>\n          )}\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr\n                  {...row.getRowProps()}\n                  className=\"vf-table__row\"\n                  onMouseEnter={() => onMouseEnterRow(row)}\n                  onMouseLeave={() => onMouseLeaveRow(row)}\n                >\n                  {row.cells.map((cell) => {\n                    return (\n                      <td\n                        {...cell.getCellProps()}\n                        colSpan={\n                          typeof cell.column?.colspan === 'function'\n                            ? cell.column.colspan(cell)\n                            : cell.column?.colspan\n                        }\n                        className=\"vf-table__cell\"\n                      >\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import React from 'react';\n\nimport './style.css';\n\ntype ExtLinkProps = {\n  href: string;\n  title?: string;\n  id?: string;\n};\nconst ExtLink: React.FC<ExtLinkProps> = ({ href, id, title, children }) => (\n  <a\n    href={href}\n    title={title}\n    id={id}\n    target=\"_blank\"\n    rel=\"noreferrer noopener\"\n    className=\"mg-ext\"\n  >\n    <span className=\"icon icon-common icon-external-link-alt\" /> {children}\n  </a>\n);\n\nexport default ExtLink;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    navigate(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      navigate(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  let { pathname } = location;\n  if (pathname.trim().endsWith('/')) pathname = pathname.trim().slice(0, -1);\n  const parts = pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["label","theme","children","className","currentPageIndex","pageIndex","gotoPage","type","onClick","namespace","queryParameters","setQueryParameters","value","setValue","useState","debounced","useCallback","debounce","v","htmlFor","placeholder","id","onChange","event","target","cols","data","title","Title","initialPage","initialPageSize","initialPageCount","showPagination","showTextFilter","sortable","loading","isStale","downloadURL","onMouseEnterRow","onMouseLeaveRow","Number","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","useRef","isChangingPage","setChangingPage","useEffect","current","scrollIntoView","order","tableSortBy","length","col","desc","replace","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","page","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","Loading","size","undefined","ref","href","style","whiteSpace","download","map","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","key","render","isSorted","isSortedDesc","row","getRowProps","onMouseEnter","onMouseLeave","cells","cell","getCellProps","colSpan","colspan","onBlur","pg","disabled","paginationIndex","rel","refreshPage","window","location","reload","error","backgroundColor","status","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","Object","entries","forEach","parameter","serializer","String","get","useQueryParametersState","navigate","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","pathname","trim","endsWith","slice","parts","split","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","x","toLowerCase","lineageD2","join","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}