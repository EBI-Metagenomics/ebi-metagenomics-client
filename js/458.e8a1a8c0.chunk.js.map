{"version":3,"file":"js/458.e8a1a8c0.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Genomes/Table/index.tsx","webpack://mgportalv2/./src/utils/taxon.ts","webpack://mgportalv2/./src/pages/Genome/index.tsx","webpack://mgportalv2/./src/utils/miniMDProcessor.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { getSimpleTaxLineage } from 'utils/taxon';\n\nconst initialPageSize = 10;\nconst GenomesTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'genomes-page': 1,\n      'genomes-page_size': initialPageSize,\n      'genomes-order': '',\n    },\n    {\n      'genomes-page': Number,\n      'genomes-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `genome-catalogues/${accession}/genomes`,\n    {\n      page: queryParameters['genomes-page'] as number,\n      ordering: queryParameters['genomes-order'] as string,\n      page_size: queryParameters['genomes-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (genome) => genome.relationships.biome.data?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      disableSortBy: true,\n    },\n    {\n      id: 'genome',\n      Header: 'Accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Length',\n      accessor: 'attributes.length',\n    },\n    {\n      Header: 'Num. of genomes',\n      accessor: 'attributes.num-genomes-total',\n    },\n    {\n      Header: 'Completeness',\n      accessor: 'attributes.completeness',\n    },\n    {\n      Header: 'Contamination',\n      accessor: 'attributes.contamination',\n    },\n    {\n      Header: 'Type',\n      accessor: 'attributes.type',\n      disableSortBy: true,\n    },\n    {\n      Header: 'Taxonomy',\n      accessor: 'attributes.taxon-lineage',\n      Cell: ({ cell }) => getSimpleTaxLineage(cell.value, true),\n      disableSortBy: true,\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['genomes-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"genomes-\"\n      sortable\n    />\n  );\n};\n\nexport default GenomesTable;\n","/**\n * Remove the s__ prefixes from a lineage.\n * @param {string} lineage string with the lineage `d__Bacteria;p__Proteobacteria;c__Gammapr...`\n * @param {string} replace replace string\n * @return {string}\n */\nexport function cleanTaxLineage(lineage: string, replace = ''): string {\n  return lineage.replace(/;/g, '').replace(/[d|p|c|o|f|g|s]__/g, replace);\n}\n\n/**\n * Retrieve a non-blank taxonomic identity from the species level or upwards\n * @param {string} fullLineage\n * @param {bool} removePrefix true if this should remove the 'd|p|c|o|f|g|s__' prefix\n * @return {string}\n */\nexport function getSimpleTaxLineage(\n  fullLineage: string,\n  removePrefix: boolean\n): string {\n  const l = fullLineage.split(';');\n  let head = l.pop();\n  // Remove all until species\n  while (head.indexOf('s__') === -1) {\n    head = l.pop();\n  }\n  // Find first non-null\n  while (head.length <= 3) {\n    head = l.pop();\n  }\n  if (removePrefix && head) {\n    return cleanTaxLineage(head);\n  }\n  return head;\n}\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport ExtLink from 'components/UI/ExtLink';\nimport GenomesTable from 'components/Genomes/Table';\nimport { processMDLinks } from 'utils/miniMDProcessor';\nimport RouteForHash from 'components/Nav/RouteForHash';\n\nconst tabs = [\n  { label: 'Genome list', to: '#' },\n  { label: 'Taxonomy tree', to: '#phylo-tab' },\n  { label: 'Protein catalogue', to: '#protein-catalog-tab' },\n  { label: 'Search by Gene', to: '#genome-search-tab' },\n  { label: 'Search by MAG', to: '#genome-search-mag-tab' },\n];\n\nconst GenomePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: genomeData } = data as MGnifyResponseObj;\n  const blocks = processMDLinks(\n    (genomeData.attributes.description as string) || ''\n  );\n  return (\n    <section className=\"vf-content\">\n      <h2>{genomeData.attributes.name}</h2>\n      <p>\n        {blocks.map((block) =>\n          block.type === 'text' ? (\n            <span key={block.content}>{block.content}</span>\n          ) : (\n            <ExtLink key={block.content} href={block.href}>\n              {block.content}\n            </ExtLink>\n          )\n        )}\n      </p>\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"\" isDefault>\n            <GenomesTable />\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default GenomePage;\n","type TextBlock = {\n  type: 'link' | 'text';\n  content: string;\n  href?: string;\n};\n\nexport const processMDLinks = (text: string): TextBlock[] => {\n  return text.split(/(\\[[^\\]]+\\]\\([^)]+\\))/).map((block) => {\n    if (block.startsWith('[')) {\n      const match = block.match(/\\[([^\\]]+)\\]\\(([^)]+)\\)/);\n      return {\n        type: 'link',\n        content: match[1],\n        href: match[2],\n      };\n    }\n    return {\n      type: 'text',\n      content: block,\n    };\n  });\n};\n\nexport default processMDLinks;\n"],"names":["accession","useURLAccession","queryParameters","Number","data","loading","error","isStale","useMGnifyData","page","ordering","page_size","Loading","size","FetchError","columns","id","Header","accessor","genome","relationships","biome","Cell","cell","className","value","style","float","disableSortBy","to","fullLineage","removePrefix","l","split","head","pop","indexOf","length","lineage","replace","cleanTaxLineage","getSimpleTaxLineage","Date","toLocaleDateString","EMGTable","cols","initialPage","initialPageSize","namespace","sortable","tabs","label","genomeData","blocks","attributes","description","map","block","startsWith","match","type","content","href","name","key","ExtLink","Tabs","RouteForHash","hash","isDefault"],"sourceRoot":""}