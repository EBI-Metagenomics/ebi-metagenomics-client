{"version":3,"file":"js/499.30d2edb0.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/components/UI/Tooltip/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/components/SuperStudy/Flagship/index.tsx","webpack://mgportalv2/./src/components/SuperStudy/Related/index.tsx","webpack://mgportalv2/./src/pages/SuperStudy/index.tsx"],"sourcesContent":["import React from 'react';\nimport Tooltip from 'components/UI/Tooltip';\n\nconst TruncatedText: React.FC<{\n  maxLength?: number;\n  text: string;\n  withTooltip?: boolean;\n}> = ({ text, maxLength = 250, withTooltip = false }) => {\n  const isTruncated = text.length >= maxLength;\n  const truncated = (\n    <>\n      {text.substring(0, maxLength)}\n      {isTruncated && '...'}\n    </>\n  );\n  if (withTooltip && isTruncated)\n    return (\n      <Tooltip content={text}>\n        <span>{truncated}</span>\n      </Tooltip>\n    );\n  return truncated;\n};\n\nexport default TruncatedText;\n","import React from 'react';\nimport Tippy from '@tippyjs/react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport 'tippy.js/dist/tippy.css';\n\ntype TooltipProps = {\n  content: React.ReactNode;\n  children?: React.ReactNode;\n};\n\nconst Tooltip: React.FC<TooltipProps> = ({ content, children }) => (\n  <Tippy content={content}>{children as React.ReactElement}</Tippy>\n);\nexport default Tooltip;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  let { pathname } = location;\n  if (pathname.trim().endsWith('/')) pathname = pathname.trim().slice(0, -1);\n  const parts = pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { getBiomeIcon } from 'utils/biomes';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\n\nconst initialPageSize = 10;\nconst FlagshipTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [flagshipPage] = useQueryParamState('flagship-page', 1, Number);\n  const [flagshipPageSize] = useQueryParamState(\n    'flagship-page_size',\n    initialPageSize,\n    Number\n  );\n  const [flagshipOrder] = useQueryParamState('flagship-order', '');\n  const { data, loading, error, isStale } = useMGnifyData(\n    `super-studies/${accession}/flagship-studies`,\n    {\n      page: flagshipPage as number,\n      ordering: flagshipOrder as string,\n      page_size: flagshipPageSize as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      className: 'mg-biome',\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n      Cell: ({ cell }) => <TruncatedText text={(cell.value as string) || ''} />,\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <details>\n      <summary>\n        <b>Flagship Projects</b>\n      </summary>\n      <EMGTable\n        cols={columns}\n        data={data as MGnifyResponseList}\n        initialPage={(flagshipPage as number) - 1}\n        initialPageSize={initialPageSize}\n        className=\"mg-anlyses-table\"\n        loading={loading}\n        isStale={isStale}\n        namespace=\"flagship-\"\n      />\n    </details>\n  );\n};\n\nexport default FlagshipTable;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { getBiomeIcon } from 'utils/biomes';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\n\nconst initialPageSize = 10;\nconst RelatedTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [relatedPage] = useQueryParamState('related-page', 1, Number);\n  const [relatedPageSize] = useQueryParamState(\n    'related-page_size',\n    initialPageSize,\n    Number\n  );\n  const [relatedOrder] = useQueryParamState('related-order', '');\n  const { data, loading, error, isStale } = useMGnifyData(\n    `super-studies/${accession}/related-studies`,\n    {\n      page: relatedPage as number,\n      ordering: relatedOrder as string,\n      page_size: relatedPageSize as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      className: 'mg-biome',\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n  if (!(data?.data as unknown[])?.length) return null;\n  return (\n    <details>\n      <summary>\n        <b>Related Projects</b>\n      </summary>\n      <EMGTable\n        cols={columns}\n        data={data as MGnifyResponseList}\n        initialPage={(relatedPage as number) - 1}\n        initialPageSize={initialPageSize}\n        className=\"mg-anlyses-table\"\n        loading={loading}\n        isStale={isStale}\n        namespace=\"related-\"\n      />\n    </details>\n  );\n};\n\nexport default RelatedTable;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport FlagshipTable from 'components/SuperStudy/Flagship';\nimport RelatedTable from 'components/SuperStudy/Related';\n\nconst SuperStudyPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`super-studies/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: superStudyData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Super Study</h2>\n\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <div style={{ display: 'flex' }}>\n            <div>\n              <h3>{superStudyData.attributes.title}</h3>\n              <p>{superStudyData.attributes.description}</p>\n            </div>\n            <img\n              src={superStudyData.attributes['image-url'] as string}\n              style={{\n                height: '6em',\n              }}\n              alt={`${superStudyData.attributes.title} logo`}\n            />\n          </div>\n          <FlagshipTable />\n          <RelatedTable />\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default SuperStudyPage;\n"],"names":["text","maxLength","withTooltip","isTruncated","length","truncated","substring","content","children","location","pathname","trim","endsWith","slice","parts","split","accession","useURLAccession","flagshipPage","useQueryParamState","Number","flagshipPageSize","flagshipOrder","data","loading","error","isStale","useMGnifyData","page","ordering","page_size","Loading","size","FetchError","columns","id","Header","accessor","study","relationships","biomes","Cell","cell","className","value","style","float","to","Date","toLocaleDateString","EMGTable","cols","initialPage","initialPageSize","namespace","relatedPage","relatedPageSize","relatedOrder","superStudyData","display","attributes","title","description","src","height","alt","Flagship","Related"],"sourceRoot":""}