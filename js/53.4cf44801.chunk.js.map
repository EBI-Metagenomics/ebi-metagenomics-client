{"version":3,"file":"js/53.4cf44801.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Publications/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/ByStudy/index.tsx","webpack://mgportalv2/./src/hooks/data/useSamplesProvider/index.tsx","webpack://mgportalv2/./src/components/Analyses/Table/index.tsx","webpack://mgportalv2/./src/components/Study/Overview/index.tsx","webpack://mgportalv2/./src/components/Study/SummaryTab/index.tsx","webpack://mgportalv2/./src/pages/Study/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport CoverImage from 'images/cover_main_publication.gif';\nimport publications from './publications.json';\n\nimport './style.css';\n\nconst trimAuthors = (text: string, maxAuthorsLength: number): string => {\n  const authorList = text.slice(0, maxAuthorsLength).split(',');\n  authorList.pop();\n  authorList.push(' et al.');\n  return authorList.join(',');\n};\n\nexport const Publication: React.FC<{\n  title: string;\n  journal: string;\n  year: number;\n  link: string;\n  doi: string;\n  authors: string;\n  maxAuthorsLength?: number;\n}> = ({ title, journal, year, link, doi, authors, maxAuthorsLength }) => {\n  const trimmedAuthors =\n    maxAuthorsLength && authors.length > maxAuthorsLength\n      ? trimAuthors(authors, maxAuthorsLength)\n      : authors;\n  return (\n    <section className=\"mg-pub\">\n      <span className=\"mg-pub-title\">{title}.</span>{' '}\n      <span className=\"mg-pub-journal\">{journal}</span> (\n      <span className=\"mg-pub-year\">{year}</span>){' '}\n      <span className=\"mg-pub-doi\">\n        doi:\n        <a title={title} href={link} className=\"mg-ext\">\n          {doi}\n        </a>\n      </span>\n      <div className=\"mg-pub-authors\">{trimmedAuthors}.</div>\n    </section>\n  );\n};\nexport const MainPublication: React.FC = () => {\n  const publication = publications.filter((pub) => pub.main)?.[0];\n  return (\n    <div className=\"embl-grid | vf-content\">\n      <div className=\"vf-section-header mg-pub-section-header\">\n        <img\n          alt=\"Cover of the journal\"\n          src={CoverImage}\n          className=\"mg-pub-cover\"\n        />\n      </div>\n      <div>\n        <p>To cite MGnify, please refer to the following publication:</p>\n        {publication && (\n          <Publication\n            title={publication.title}\n            journal={publication.journal}\n            year={publication.year}\n            link={publication.link}\n            doi={publication.doi}\n            authors={publication.authors}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\nconst Publications: React.FC = () => {\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <section className=\"mg-pub-section\">\n      {publications\n        .filter((pub) => showMore || pub.recent)\n        .map((pub) => (\n          <article key={pub.doi}>\n            <Publication\n              title={pub.title}\n              journal={pub.journal}\n              year={pub.year}\n              link={pub.link}\n              doi={pub.doi}\n              authors={pub.authors}\n            />\n          </article>\n        ))}\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--sm\"\n          onClick={() => setShowMore(!showMore)}\n        >\n          {showMore ? 'Less' : 'More'} publications\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Publications;\n","import React, { useState, useContext } from 'react';\n\nimport { Wrapper } from '@googlemaps/react-wrapper';\n\nimport useSamplesProvider from 'hooks/data/useSamplesProvider';\n\nimport UserContext from 'pages/Login/UserContext';\nimport SamplesMap from 'components/UI/SamplesMap';\nimport render from '../render';\nimport '../style.css';\n\nconst LIMIT = 200;\n\ntype SamplesMapProps = {\n  study: string;\n};\nconst SamplesMapByStudy: React.FC<SamplesMapProps> = ({ study }) => {\n  const [limit, setLimit] = useState(LIMIT);\n  const { samples, total } = useSamplesProvider(study, limit);\n  const { config } = useContext(UserContext);\n\n  const samplesFiltered = samples.filter((sample) => {\n    try {\n      return (\n        Number(sample.attributes.longitude) !== 0.0 &&\n        Number(sample.attributes.latitude) !== 0.0\n      );\n    } catch {\n      return false;\n    }\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <SamplesMap samples={samplesFiltered} />\n        </Wrapper>\n      </div>\n      {total && (\n        <div className=\"mg-map-progress\">\n          <progress max={total} value={samples.length} />\n          {total > limit && (\n            <div>\n              ⚠️ We are only loading the first {LIMIT} samples. Click{' '}\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--link mg-button-as-link\"\n                onClick={() => setLimit(total)}\n              >\n                HERE\n              </button>{' '}\n              to load them all.\n            </div>\n          )}\n          {samplesFiltered.length === 0 && (\n            <div>\n              ⚠️ None of the {total > limit ? 'loaded' : ''} samples have\n              geolocation co-ordinates.\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SamplesMapByStudy;\n","import { useState, useEffect } from 'react';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, ErrorFromFetch } from 'hooks/data/useData';\n\ntype SampleProviderResponse = {\n  samples: MGnifyDatum[];\n  total: number | null;\n  loading: boolean;\n  error: ErrorFromFetch;\n};\nconst useSamplesProvider = (\n  study: string,\n  limit?: number\n): SampleProviderResponse => {\n  const [page, setPage] = useState(1);\n  const [samples, setSamples] = useState<MGnifyDatum[]>([]);\n  const [total, setTotal] = useState(null);\n  const { data, isStale, loading, error } = useMGnifyData('samples', {\n    study_accession: study,\n    page,\n  });\n  useEffect(() => {\n    if (data?.data && !isStale && page === data?.meta?.pagination?.page) {\n      const aggregatedSamples = [...samples, ...(data.data as MGnifyDatum[])];\n      setSamples(aggregatedSamples);\n      const totalInResponse = data?.meta?.pagination?.count;\n      if (total !== totalInResponse && typeof totalInResponse === 'number') {\n        setTotal(totalInResponse);\n      }\n      if (data?.links?.next && aggregatedSamples.length < limit) {\n        setPage(page + 1);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, page, limit]);\n  useEffect(() => {\n    if (data?.links?.next && samples.length < limit) {\n      setPage(page + 1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [limit]);\n\n  return { samples, total, loading, error };\n};\n\nexport default useSamplesProvider;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { unescape } from 'lodash';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\nconst AnalysesTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'analyses-page': 1,\n      'analyses-page_size': initialPageSize,\n      'analyses-order': '',\n    },\n    {\n      'analyses-page': Number,\n      'analyses-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `studies/${accession}/analyses`,\n    {\n      include: 'sample',\n      page: queryParameters['analyses-page'] as number,\n      ordering: queryParameters['analyses-order'] as string,\n      page_size: queryParameters['analyses-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const samples = {};\n  data.included\n    ?.filter(({ type }) => type === 'samples')\n    .forEach((sample) => {\n      samples[sample.id as string] = {\n        description: sample.attributes['sample-desc'],\n        biome: (\n          sample.relationships as Record<string, { data: { id: string } }>\n        ).biome.data.id,\n      };\n    });\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (analysis) =>\n        samples?.[analysis?.relationships?.sample?.data?.id]?.biome || '',\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n    },\n    {\n      id: 'sample',\n      Header: 'Sample accession',\n      accessor: (analysis) => analysis?.relationships?.sample?.data?.id,\n      Cell: ({ cell }) => (\n        <Link to={`/samples/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'description_id',\n      Header: 'Sample description',\n      accessor: (analysis) =>\n        samples?.[analysis?.relationships?.sample?.data?.id]?.description || '',\n      Cell: ({ cell }) => unescape(cell.value),\n    },\n    {\n      id: 'assembly_id',\n      Header: ' Run / Assembly accession',\n      accessor: (analysis) => analysis?.relationships?.sample?.data?.id || '',\n      Cell: ({ cell }) => (\n        <Link to={`/assemblies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'pipeline_id',\n      Header: 'Pipeline version',\n      accessor: (analysis) => analysis.attributes['pipeline-version'],\n      Cell: ({ cell }) => (\n        <Link to={`/pipelines/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'analysis_id',\n      Header: 'Analysis accession',\n      accessor: (analysis) => analysis.id,\n      Cell: ({ cell }) => (\n        <Link to={`/analyses/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      title=\"Analyses\"\n      initialPage={(queryParameters['analyses-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"analyses-\"\n    />\n  );\n};\n\nexport default AnalysesTable;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMapByStudy from 'components/UI/SamplesMap/ByStudy';\nimport Box from 'components/UI/Box';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { Publication } from 'components/Publications';\nimport AnalysesTable from 'components/Analyses/Table';\nimport ExtLink from 'components/UI/ExtLink';\nimport UserContext from 'pages/Login/UserContext';\n\ntype StudyOverviewProps = {\n  data: MGnifyDatum;\n  included: Array<unknown>;\n};\nconst StudyOverview: React.FC<StudyOverviewProps> = ({ data, included }) => {\n  const { config } = useContext(UserContext);\n  const lineage = data.relationships.biomes.data[0].id;\n  const publications = included.filter(({ type }) => type === 'publications');\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <Box label=\"Classification\">\n            <span\n              className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n              style={{ float: 'initial' }}\n            />\n            {lineage}\n          </Box>\n          <Box label=\"Description\">{data.attributes['study-abstract']}</Box>\n        </div>\n        <SamplesMapByStudy study={data.id} />\n      </div>\n      <br />\n      <div className=\"mg-flex\">\n        {data?.relationships?.studies?.data?.length > 0 && (\n          <Box label=\"Related studies\">\n            <ul className=\"vf-list\">\n              {data.relationships.studies.data.map(({ id }) => (\n                <li key={id as string}>\n                  <Link to={`/studies/${id}`}>{id}</Link>\n                </li>\n              ))}\n            </ul>\n          </Box>\n        )}\n        <div>\n          {data?.attributes?.['is-public'] && (\n            <Box label=\"External links\">\n              <ul className=\"vf-list\">\n                <li>\n                  <ExtLink\n                    href={`${config.enaURL}/${data.attributes['secondary-accession']}`}\n                  >\n                    ENA website ({data.attributes['secondary-accession']})\n                  </ExtLink>\n                </li>\n              </ul>\n            </Box>\n          )}\n          {publications?.length > 0 && (\n            <Box label=\"Publications\">\n              <ul className=\"vf-list\">\n                {publications.map(({ attributes, id }) => (\n                  <li key={id as string}>\n                    <Publication\n                      title={attributes['pub-title']}\n                      journal={attributes['iso-journal']}\n                      year={attributes['published-year']}\n                      link={`http://${attributes.doi}`}\n                      doi={attributes.doi}\n                      authors={attributes.authors}\n                      maxAuthorsLength={70}\n                    />\n                  </li>\n                ))}\n              </ul>\n            </Box>\n          )}\n        </div>\n      </div>\n      <br />\n      <div>\n        <AnalysesTable />\n      </div>\n    </section>\n  );\n};\n\nexport default StudyOverview;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\n\ntype SummaryProps = {\n  accession: string;\n};\ntype DownloadResponseType = {\n  attributes: {\n    'group-type': string;\n    description: {\n      label: string;\n    };\n  };\n  relationships: {\n    pipeline: {\n      data: {\n        id: string;\n      };\n    };\n  };\n  links: {\n    self: string;\n  };\n};\nconst SummaryTab: React.FC<SummaryProps> = ({ accession }) => {\n  const { data, loading, error } = useMGnifyData(\n    `studies/${accession}/downloads`\n  );\n  const pipelines = {};\n  ((data?.data as DownloadResponseType[]) || []).forEach((download) => {\n    const pipeline = download?.relationships?.pipeline?.data?.id;\n    const group = download?.attributes?.['group-type'];\n    const label = download?.attributes?.description.label;\n    const link = download?.links?.self;\n    if (!pipelines[pipeline]) {\n      pipelines[pipeline] = {};\n    }\n    if (!pipelines[pipeline][group]) {\n      pipelines[pipeline][group] = [];\n    }\n    pipelines[pipeline][group].push({\n      label,\n      link,\n    });\n  });\n  return (\n    <section>\n      <p>\n        In this section you can download the different results matrix files\n        summarising the study. Each downloadable file contains an aggregation of\n        the analysis results from the individual study&apos;s runs. To visualise\n        and download the analysis results for individual runs, please access\n        their respective pages.\n      </p>\n      {loading && <Loading />}\n      {error && <FetchError error={error} />}\n      <ul className=\"vf-list\">\n        {Object.entries(pipelines).map(([pipeline, groups]) => (\n          <li key={pipeline} className=\"vf-list__item mg-list__item\">\n            <h4>Pipeline version: {pipeline}</h4>\n            <ul className=\"vf-list\">\n              {Object.entries(groups).map(([group, links]) => (\n                <li key={group} className=\"vf-list__item mg-list__item\">\n                  <h6>{group}</h6>\n                  <ul className=\"vf-list\">\n                    {links.map(({ label, link }) => (\n                      <li key={link} className=\"vf-list__item mg-list__item\">\n                        <a href={link} download>\n                          <span className=\"icon icon-common icon-download\" />{' '}\n                          {label}\n                        </a>\n                      </li>\n                    ))}\n                  </ul>\n                </li>\n              ))}\n            </ul>\n            <hr />\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default SummaryTab;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Study/Overview';\nimport SummaryTab from 'components/Study/SummaryTab';\nimport RouteForHash from 'components/Nav/RouteForHash';\n\nconst tabs = [\n  { label: 'Overview', to: '#overview' },\n  { label: 'Analysis summary', to: '#analysis' },\n];\n\nconst StudyPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`studies/${accession}`, {\n    include: 'publications',\n  });\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: studyData, included } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Study {accession}</h2>\n      <h3>{studyData.attributes['study-name']}</h3>\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"#overview\" isDefault>\n            <Overview data={studyData} included={included || []} />\n          </RouteForHash>\n          <RouteForHash hash=\"#analysis\">\n            <SummaryTab accession={accession} />\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default StudyPage;\n"],"names":["Publication","title","journal","year","link","doi","authors","maxAuthorsLength","trimmedAuthors","length","text","authorList","slice","split","pop","push","join","trimAuthors","className","href","MainPublication","publication","pub","main","alt","src","showMore","setShowMore","useState","recent","map","key","type","onClick","study","limit","setLimit","samples","total","page","setPage","setSamples","setTotal","data","isStale","loading","error","useMGnifyData","study_accession","useEffect","meta","pagination","aggregatedSamples","totalInResponse","count","links","next","config","useContext","UserContext","samplesFiltered","filter","sample","Number","attributes","longitude","latitude","Wrapper","apiKey","googleMapsKey","render","SamplesMap","max","value","accession","useURLAccession","queryParameters","include","ordering","page_size","Loading","size","FetchError","included","forEach","id","description","biome","relationships","columns","Header","accessor","analysis","Cell","cell","style","float","to","unescape","EMGTable","cols","initialPage","initialPageSize","namespace","lineage","biomes","publications","Date","toDateString","Box","label","studies","ExtLink","enaURL","pipelines","download","pipeline","group","self","Object","entries","groups","tabs","studyData","Tabs","RouteForHash","hash","isDefault","Overview"],"sourceRoot":""}