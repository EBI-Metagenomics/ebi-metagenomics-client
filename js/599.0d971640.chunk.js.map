{"version":3,"file":"js/599.0d971640.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Study/Studies/index.tsx","webpack://mgportalv2/./src/components/UI/KeyValueList/index.tsx","webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/pages/Publication/index.tsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\n\ntype AssociatedStudiesProps = {\n  rootEndpoint: string;\n};\nconst AssociatedStudies: React.FC<AssociatedStudiesProps> = ({\n  rootEndpoint,\n}) => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'studies-page': 1,\n      'studies-page_size': initialPageSize,\n      'studies-order': '',\n    },\n    {\n      'studies-page': Number,\n      'studies-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `${rootEndpoint}/${accession}/studies`,\n    {\n      page: queryParameters['studies-page'] as number,\n      ordering: queryParameters['studies-order'] as string,\n      page_size: queryParameters['studies-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n  if (!(data.data as MGnifyDatum[]).length) return null;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n      Cell: ({ cell }) => <TruncatedText text={(cell.value as string) || ''} />,\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n  const showPagination = (data.meta?.pagination?.count || 1) > initialPageSize;\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['studies-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-studies-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"studies-\"\n      showPagination={showPagination}\n    />\n  );\n};\n\nexport default AssociatedStudies;\n","import React from 'react';\n\ntype KeyValueProps = {\n  list: { key: string; value: string | React.ElementType }[];\n};\n\nconst KeyValueList: React.FC<KeyValueProps> = ({ list }) => (\n  <div\n    className=\"vf-grid vf-grid__col-2\"\n    style={{\n      gridTemplateColumns: '1fr 2fr',\n      rowGap: '0.5rem',\n    }}\n  >\n    {list.map(({ key, value: Value }) => (\n      <React.Fragment key={key}>\n        <div style={{ textAlign: 'right' }}>{key}:</div>\n        <div>{typeof Value === 'string' ? Value : <Value />}</div>\n      </React.Fragment>\n    ))}\n  </div>\n);\n\nexport default KeyValueList;\n","import React from 'react';\n\nconst TruncatedText: React.FC<{ maxLength?: number; text: string }> = ({\n  text,\n  maxLength = 250,\n}) => (\n  <>\n    {text.substring(0, maxLength)}\n    {text.length >= maxLength && '...'}\n  </>\n);\n\nexport default TruncatedText;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Box from 'components/UI/Box';\nimport KeyValueList from 'components/UI/KeyValueList';\nimport ExtLink from 'components/UI/ExtLink';\nimport AssociatedStudies from 'components/Study/Studies';\n\nconst PublicationPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`publications/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: publicationData } = data as MGnifyResponseObj;\n\n  const details = [\n    {\n      key: 'Journal name',\n      value: publicationData.attributes['iso-journal'] as string,\n    },\n    {\n      key: 'DOI',\n      value: () => (\n        <ExtLink href={`https://www.doi.org/${publicationData.attributes.doi}`}>\n          {publicationData.attributes.doi}\n        </ExtLink>\n      ),\n    },\n    {\n      key: 'PMID',\n      value: () => (\n        <ExtLink\n          href={`https://europepmc.org/abstract/MED/${publicationData.id}`}\n        >\n          {publicationData.id}\n        </ExtLink>\n      ),\n    },\n    {\n      key: 'Published year',\n      value: String(publicationData.attributes['published-year']),\n    },\n  ];\n  if (publicationData.attributes['medline-journal']) {\n    details.push({\n      key: 'Medical journal',\n      value: () => (\n        <ExtLink href={publicationData.attributes['medline-journal'] as string}>\n          {publicationData.attributes['medline-journal']}\n        </ExtLink>\n      ),\n    });\n  }\n  return (\n    <section className=\"vf-content\">\n      <h2>Publication: {publicationData?.attributes?.['pub-title'] || ''}</h2>\n      <h4>{publicationData?.attributes?.authors || ''}</h4>\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          {publicationData?.attributes?.abstract && (\n            <div>{publicationData.attributes.abstract}</div>\n          )}\n          <Box label=\"Publication details\">\n            <KeyValueList list={details} />\n          </Box>\n          <Box label=\"Associated studies\">\n            <AssociatedStudies rootEndpoint=\"publications\" />\n          </Box>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default PublicationPage;\n"],"names":["rootEndpoint","accession","queryParameters","Number","data","loading","error","isStale","page","ordering","page_size","size","length","columns","id","Header","accessor","study","relationships","biomes","Cell","cell","className","value","style","float","to","text","Date","toLocaleDateString","showPagination","meta","pagination","count","cols","initialPage","initialPageSize","namespace","list","gridTemplateColumns","rowGap","map","key","Value","textAlign","maxLength","substring","publicationData","details","attributes","href","doi","String","push","authors","abstract","label"],"sourceRoot":""}