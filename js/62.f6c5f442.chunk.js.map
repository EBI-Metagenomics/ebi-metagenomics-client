{"version":3,"file":"js/62.f6c5f442.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Genomes/Cobs/Results.tsx","webpack://mgportalv2/./src/hooks/data/useMgnifyCobsSearch/index.tsx","webpack://mgportalv2/./src/components/Genomes/Cobs/index.tsx","webpack://mgportalv2/./src/components/Genomes/CrossCatalogueSearchCataloguePicker/index.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/History/index.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/Form/index.tsx","webpack://mgportalv2/./src/hooks/data/useMgnifySourmashSearch/index.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/Results/Table.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/Results/index.tsx","webpack://mgportalv2/./src/hooks/data/useMgnifySourmashStatus/index.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/index.tsx","webpack://mgportalv2/./src/hooks/useSearchStorage/index.tsx","webpack://mgportalv2/./src/components/UI/FileUploaderButton/index.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/components/UI/Tooltip/index.tsx","webpack://mgportalv2/./src/styles/react-select-styles.tsx","webpack://mgportalv2/./src/utils/taxon.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMgnifyCobsSearch from 'hooks/data/useMgnifyCobsSearch';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport { getSimpleTaxLineage, cleanTaxLineage } from 'utils/taxon';\nimport Tooltip from 'components/UI/Tooltip';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { last, split } from 'lodash-es';\n\ntype ResultsProps = {\n  sequence: string;\n  threshold: number;\n  cataloguesFilter: string[];\n};\nconst Results: React.FC<ResultsProps> = ({\n  sequence,\n  threshold,\n  cataloguesFilter,\n}) => {\n  const { data, loading, error } = useMgnifyCobsSearch(\n    sequence,\n    threshold,\n    cataloguesFilter\n  );\n  if (loading) return <Loading />;\n  if (error) return <FetchError error={error} />;\n  if (data?.data?.errors) {\n    return (\n      <div\n        className=\"vf-box vf-box-theme--primary vf-box--easy\"\n        style={{\n          backgroundColor: 'lemonchiffon',\n        }}\n      >\n        <h3 className=\"vf-box__heading\">\n          <span className=\"icon icon-common icon-exclamation-triangle\" />\n          Error with your search\n        </h3>\n        {Object.entries(data.data.errors).map(([field, err]) => (\n          <p className=\"vf-box__text\">\n            {field}: {err}\n          </p>\n        ))}\n      </div>\n    );\n  }\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (genome) => decodeURI(last(split(genome.mgnify.biome, '/'))),\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      disableSortBy: true,\n      className: 'mg-biome',\n    },\n    {\n      id: 'genome',\n      Header: 'Accession',\n      accessor: 'cobs.genome',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'catalogue',\n      Header: 'Catalogue',\n      accessor: (genome) => last(split(genome.mgnify.catalogue, '/')),\n      Cell: ({ cell }) => (\n        <Link to={`/genome-catalogues/${cell.value}`}>{cell.value}</Link>\n      ),\n      disableSortBy: true,\n    },\n    {\n      Header: 'Type',\n      accessor: 'mgnify.type',\n      disableSortBy: true,\n    },\n    {\n      Header: 'Taxonomy',\n      accessor: 'mgnify.taxon_lineage',\n      Cell: ({ cell }) => (\n        <>\n          {getSimpleTaxLineage(cell.value, true)}{' '}\n          <Tooltip content={cleanTaxLineage(cell.value, ' > ')}>\n            <sup>\n              <span className=\"icon icon-common icon-info\" />\n            </sup>\n          </Tooltip>\n        </>\n      ),\n      disableSortBy: true,\n    },\n    {\n      Header: 'K-mers in query',\n      accessor: 'cobs.num_kmers',\n    },\n    {\n      Header: 'K-mers found in genome',\n      accessor: 'cobs.num_kmers_found',\n    },\n    {\n      Header: '% K-mers found',\n      accessor: 'cobs.percent_kmers_found',\n    },\n  ];\n  if (!data) return null;\n\n  return (\n    <section>\n      <h5>COBS Results</h5>\n      <EMGTable\n        cols={columns}\n        data={data.data.results as Record<string, unknown>[]}\n        initialPageSize={100}\n        className=\"mg-anlyses-table\"\n        loading={loading}\n        showPagination={false}\n      />\n    </section>\n  );\n};\n\nexport default Results;\n","import { useContext } from 'react';\n\nimport useData, {\n  ErrorFromFetch,\n  KeyValue,\n  ResponseFormat,\n} from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\nexport interface CobsResponse {\n  data: {\n    data: {\n      errors?: {\n        [fieldName: string]: string;\n      };\n      results: [\n        {\n          cobs: KeyValue;\n          mgnify: KeyValue;\n        }\n      ];\n    };\n  };\n  error: ErrorFromFetch | null;\n  loading: boolean;\n}\n\nconst useMgnifyCobsSearch: (\n  sequence: string,\n  threshold: number,\n  cataloguesFilter: string[]\n) => CobsResponse = (sequence, threshold, cataloguesFilter) => {\n  const { config } = useContext(UserContext);\n  const formData = new FormData();\n  formData.append('seq', sequence);\n  formData.append('threshold', String(threshold));\n  cataloguesFilter.forEach((catalogue) =>\n    formData.append('catalogues_filter', catalogue)\n  );\n\n  const data = useData(\n    sequence.length && String(threshold).length && cataloguesFilter.length\n      ? `${config.api}genome-search`\n      : null,\n    ResponseFormat.JSON,\n    {\n      method: 'POST',\n      body: formData,\n    }\n  );\n  return data as unknown as CobsResponse;\n};\n\nexport default useMgnifyCobsSearch;\n","import React, { useState, useRef, useEffect } from 'react';\nimport 'textarea-sequence/dist/textarea-sequence';\n\nimport Tooltip from 'components/UI/Tooltip';\n\nimport InfoBanner from 'components/UI/InfoBanner';\nimport FileUploaderButton from 'components/UI/FileUploaderButton';\nimport CataloguePicker from 'components/Genomes/CrossCatalogueSearchCataloguePicker';\n\nimport { toast } from 'react-toastify';\nimport CobsResults from './Results';\nimport example1 from './examples/human-gut-v2-0.txt';\nimport example2 from './examples/marine-v1-0.txt';\nimport example3 from './examples/cow-rumen-v1-0.txt';\nimport example4 from './examples/human-oral-v1-0.txt';\nimport './style.css';\n\nconst KMERS_DEFAULT = 0.4;\nconst MIN_BASES = 50;\n\nconst examples = {\n  'human-gut-v2-0': example1,\n  'marine-v1-0': example2,\n  'rumen-v1-0': example3,\n  'human-oral-v1-0': example4,\n};\n\ntype CobsProps = {\n  catalogueName?: string;\n  catalogueID?: string;\n};\n\nconst CobsSearch: React.FC<CobsProps> = ({ catalogueName, catalogueID }) => {\n  const isSingleCatalogue = !!catalogueID;\n  const textareaSeq = useRef(null);\n  const [shouldSearch, setShouldSearch] = useState(false);\n  const [kmers, setKmers] = useState(KMERS_DEFAULT);\n  const [errors, setErrors] = useState<{\n    tooShort?: boolean;\n    multipleSequences?: boolean;\n    hasInvalidCharacters?: boolean;\n  }>({});\n  const [valid, setValid] = useState(false);\n  useEffect(() => {\n    textareaSeq.current.addEventListener('error-change', (e) => {\n      setErrors(e.detail.errors);\n      setValid(textareaSeq.current.quill.valid);\n    });\n  }, []);\n\n  const [selectedCatalogues, setSelectedCatalogues] = useState<string[]>([]);\n\n  const setSequence = (seq: string): void => {\n    textareaSeq.current.quill.setText(seq);\n  };\n\n  const handleExampleClick = (): void => {\n    if (catalogueID in examples) setSequence(examples[catalogueID]);\n    else setSequence(example1);\n  };\n\n  const handleKmersChange = (event): void => {\n    setKmers(Math.min(1, Math.max(0, Number(event.target.value))));\n  };\n  const handleClear = (): void => {\n    setSequence('');\n    setKmers(KMERS_DEFAULT);\n    setShouldSearch(false);\n  };\n\n  const handleFileLoad = (event): void => {\n    const { files } = event.target;\n    const reader = new FileReader();\n\n    reader.addEventListener(\n      'load',\n      () => setSequence(reader.result as string),\n      false\n    );\n\n    if (files && files.length) {\n      reader.readAsText(files[0]);\n    }\n  };\n\n  const handleCleanup = (): void => {\n    textareaSeq.current.cleanUp();\n  };\n\n  const sayPasted = () =>\n    toast.success('Pasted your clipboard into textarea', {\n      position: 'bottom-left',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n\n  return (\n    <section id=\"genome-search\" className=\"vf-stack vf-stack--400\">\n      <div />\n      <div className=\"vf-sidebar vf-sidebar--end\">\n        <div className=\"vf-sidebar__inner\">\n          <div>\n            {isSingleCatalogue && (\n              <h3>Search DNA fragments in the {catalogueName} catalogue</h3>\n            )}\n            {!isSingleCatalogue && (\n              <h3>Search DNA fragments across catalogues</h3>\n            )}\n          </div>\n          <div className=\"vf-flag vf-flag--middle vf-flag--200 vf-flag--reversed\">\n            <div className=\"vf-flag__body\">\n              <span className=\"vf-text-body vf-text-body--4\">\n                Powered by{' '}\n                <a href=\"https://github.com/iqbal-lab-org/cobs\">COBS</a>.\n              </span>\n            </div>\n            <div className=\"vf-flag__media\" />\n          </div>\n        </div>\n      </div>\n      <section>\n        <p className=\"vf-text-body vf-text-body--3\">\n          This search engine is designed to query short sequence fragments\n          (50-5,000 bp in length) against representative genomes from the\n          catalogue\n          {!isSingleCatalogue && 's'}.\n        </p>\n      </section>\n      <CataloguePicker\n        onChange={setSelectedCatalogues}\n        singleCatalogue={catalogueID}\n      />\n      <section>\n        <div>\n          <h5>Enter a sequence</h5>\n          <div className=\"vf-grid vf-grid__col-3\">\n            <button\n              type=\"button\"\n              className=\"vf-button vf-button--sm vf-button--secondary\"\n              onClick={(e) => {\n                e.preventDefault();\n                navigator.clipboard\n                  .readText()\n                  .then(setSequence)\n                  .then(sayPasted);\n              }}\n            >\n              Paste a sequence\n            </button>\n            <FileUploaderButton\n              onChange={handleFileLoad}\n              accept=\".fasta, .fna, .ffn, .frn, .fa, .txt\"\n              buttonClassName=\"vf-button--secondary vf-button--sm\"\n            >\n              Upload a FASTA\n            </FileUploaderButton>\n            <button\n              type=\"button\"\n              className=\"vf-button vf-button--sm vf-button--secondary\"\n              onClick={handleExampleClick}\n            >\n              Use the example\n            </button>\n          </div>\n        </div>\n\n        <section className=\"vf-stack vf-stack--200\">\n          <div />\n          <div>\n            <textarea-sequence\n              id=\"textareaID\"\n              alphabet=\"dna\"\n              height=\"10em\"\n              min-sequence-length={MIN_BASES}\n              single=\"true\"\n              ref={textareaSeq}\n              className=\"mg-sequence\"\n              disable-header-check=\"true\"\n            />\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"threshold\">\n              <Tooltip\n                content={`The minimum proportion of K-mers from the query that must be\n              matched (default: ${KMERS_DEFAULT})`}\n              />\n              Threshold: <span className=\"icon icon-common icon-info\" />\n            </label>{' '}\n            <input\n              id=\"threshold\"\n              name=\"threshold\"\n              type=\"number\"\n              min=\"0.1\"\n              max=\"1.0\"\n              value={kmers}\n              step=\"0.1\"\n              onChange={handleKmersChange}\n              className=\"vf-form__input mg-threshold\"\n            />\n          </div>\n          {!valid && (\n            <InfoBanner>\n              <div>\n                <p className=\"vf-text-body vf-text-body--3\">\n                  The query can’t be submitted because:\n                </p>\n                <ul>\n                  {errors.tooShort && (\n                    <li className=\"vf-text-body vf-text-body--3\">\n                      The sequence has to have at least {MIN_BASES} nucleotides\n                    </li>\n                  )}\n                  {errors.hasInvalidCharacters && (\n                    <li className=\"vf-text-body vf-text-body--3\">\n                      The sequence has invalid characters\n                    </li>\n                  )}\n                  {errors.multipleSequences && (\n                    <li className=\"vf-text-body vf-text-body--3\">\n                      There are multiple sequences and only 1 is supported\n                    </li>\n                  )}\n                </ul>\n              </div>\n            </InfoBanner>\n          )}\n          <div />\n          <div className=\"mg-right\">\n            {!valid && (\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--sm vf-button--tertiary mg-button\"\n                onClick={handleCleanup}\n              >\n                Clean sequence\n              </button>\n            )}\n            {valid && (\n              <button\n                id=\"search-button\"\n                type=\"button\"\n                className=\"vf-button vf-button--sm vf-button--primary\"\n                onClick={() => setShouldSearch(true)}\n              >\n                Search\n              </button>\n            )}\n            <button\n              id=\"clear-button\"\n              type=\"button\"\n              className=\"vf-button vf-button--sm vf-button--tertiary\"\n              onClick={handleClear}\n            >\n              Clear\n            </button>\n          </div>\n        </section>\n\n        {shouldSearch && (\n          <CobsResults\n            sequence={textareaSeq.current.sequence}\n            threshold={kmers}\n            cataloguesFilter={selectedCatalogues}\n          />\n        )}\n\n        <section>\n          <div id=\"results-section\" className=\"hidden\">\n            <div className=\"row\">\n              <div id=\"results-table\" className=\"columns\" />\n            </div>\n          </div>\n        </section>\n      </section>\n    </section>\n  );\n};\n\nexport default CobsSearch;\n","import Select, { MultiValue } from 'react-select';\nimport {\n  reactSelectStyles,\n  reactSelectTheme,\n} from 'styles/react-select-styles';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\n\ntype CataloguePickerProps = {\n  onChange: (options) => void;\n  singleCatalogue?: string;\n};\n\ntype SelectOptions = MultiValue<{ value: string; label: string }>;\n\nconst CataloguePicker: React.FC<CataloguePickerProps> = ({\n  onChange,\n  singleCatalogue,\n}) => {\n  const { data: cataloguesList, loading: loadingCataloguesList } =\n    useMGnifyData('genome-catalogues');\n\n  const catalogueOptions = useMemo(() => {\n    if (!cataloguesList) return [];\n    return (cataloguesList as MGnifyResponseList).data.map((catalogue) => ({\n      label: catalogue.attributes.name,\n      value: catalogue.id,\n    }));\n  }, [cataloguesList]);\n\n  const [selectedCatalogues, setSelectedCatalogues] = useState<SelectOptions>(\n    []\n  );\n\n  useEffect(() => {\n    onChange(selectedCatalogues.map((cat) => cat.value));\n  }, [selectedCatalogues, onChange]);\n\n  useEffect(() => {\n    if (selectedCatalogues.length) return;\n    if (singleCatalogue !== undefined) {\n      onChange([singleCatalogue]);\n    } else if (catalogueOptions)\n      setSelectedCatalogues(catalogueOptions as SelectOptions);\n  }, [catalogueOptions, selectedCatalogues, singleCatalogue, onChange]);\n\n  if (singleCatalogue) return null;\n\n  return (\n    <section>\n      <h5>Select catalogues to search against</h5>\n      <Select\n        theme={reactSelectTheme}\n        styles={reactSelectStyles}\n        placeholder=\"Select catalogues\"\n        value={selectedCatalogues}\n        onChange={setSelectedCatalogues}\n        isLoading={loadingCataloguesList}\n        isSearchable\n        name=\"biome\"\n        inputId=\"biome-select\"\n        isMulti\n        options={catalogueOptions as SelectOptions}\n      />\n    </section>\n  );\n};\n\nexport default CataloguePicker;\n","import React from 'react';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\n\ntype HistoryProps = {\n  jobs: Map<string, { time: number }>;\n  removeFromStorage: (jobID: string) => void;\n};\n\nconst SourmashHistory: React.FC<HistoryProps> = ({\n  jobs,\n  removeFromStorage,\n}) => {\n  const [, setJobId] = useQueryParamState('job_id', '');\n  return (\n    <section>\n      <details>\n        <summary>Search History</summary>\n        <div>\n          <div className=\"genome-search-history\">\n            {jobs.size === 0 ? (\n              <div\n                className=\"vf-box vf-box-theme--primary vf-box--easy\"\n                style={{\n                  backgroundColor: '#d1e3f6',\n                }}\n              >\n                <h3 className=\"vf-box__heading\">\n                  <span className=\"icon icon-common icon-exclamation-triangle\" />{' '}\n                  No search history found\n                </h3>\n                <p className=\"vf-box__text\">\n                  Search jobs are stored in your web browser, so if you open\n                  this website in a different browser or computer, or clear your\n                  browser history, you won’t see old searches.\n                </p>\n              </div>\n            ) : (\n              <ul>\n                {Array.from(jobs.keys()).map((j) => (\n                  <li key={j}>\n                    <button\n                      type=\"button\"\n                      className=\"vf-button vf-button--link mg-button-as-link\"\n                      onClick={() => setJobId(j)}\n                    >\n                      {j}\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"vf-button--outline vf-button--sm \"\n                      onClick={() => {\n                        removeFromStorage(j);\n                      }}\n                    >\n                      Remove\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n          <p className=\"vf-text-body vf-text-body--4\">\n            Results are only kept in our servers for 30 days.\n          </p>\n        </div>\n      </details>\n    </section>\n  );\n};\nexport default SourmashHistory;\n","import React, { useRef, useState, useEffect } from 'react';\nimport 'mgnify-sourmash-component';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport useMgnifySourmashSearch from 'hooks/data/useMgnifySourmashSearch';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\nimport CataloguePicker from 'components/Genomes/CrossCatalogueSearchCataloguePicker';\n\ntype SourmashFormProps = {\n  catalogueID?: string;\n};\nconst SourmashForm: React.FC<SourmashFormProps> = ({ catalogueID }) => {\n  const sourmash = useRef(null);\n  const [jobId, setJobId] = useQueryParamState('job_id', '');\n  const [shouldSearch, setShouldSearch] = useState(false);\n  const [selectedCatalogues, setSelectedCatalogues] = useState<string[]>([\n    catalogueID,\n  ]);\n  const [{ signatures, errors }, setSourmashState] = useState({\n    signatures: null,\n    errors: null,\n  });\n  const { data, error, loading } = useMgnifySourmashSearch(\n    shouldSearch ? 'gather' : '',\n    selectedCatalogues,\n    signatures\n  );\n\n  useEffect(() => {\n    let sourmashElement;\n    const sketchedAll = (event): void => {\n      setSourmashState({\n        signatures: event.detail.signatures,\n        errors: event.detail.errors,\n      });\n    };\n    const changedFiles = (): void => {\n      setSourmashState({\n        signatures: null,\n        errors: null,\n      });\n    };\n    if (sourmash.current) {\n      sourmashElement = sourmash.current;\n      sourmashElement.addEventListener('sketchedall', sketchedAll);\n      sourmashElement.addEventListener('change', changedFiles);\n    }\n    return () => {\n      if (sourmashElement) {\n        sourmashElement.removeEventListener('sketchedall', sketchedAll);\n        sourmashElement.removeEventListener('change', changedFiles);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sourmash.current]);\n\n  useEffect(() => {\n    if (!loading && !error && data) {\n      // The signatures were succesfully sent and now we have job_id\n      setJobId((data.data as Record<string, string>).job_id);\n      setShouldSearch(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, error, loading]);\n\n  const handleSearch = (): void => {\n    setShouldSearch(true);\n  };\n\n  const handleClear = (): void => {\n    sourmash.current?.clear();\n    setShouldSearch(false);\n    setSourmashState({\n      signatures: null,\n      errors: null,\n    });\n  };\n  if (jobId) {\n    return null;\n  }\n  return (\n    <section id=\"search-mag-section\" className=\"vf-stack vf-stack--600\">\n      <CataloguePicker\n        onChange={setSelectedCatalogues}\n        singleCatalogue={catalogueID}\n      />\n      <div>\n        <h5>Select your files</h5>\n        <mgnify-sourmash-component\n          id=\"sourmash\"\n          ref={sourmash}\n          show_directory_checkbox\n        />\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <button\n          id=\"search-button-mag\"\n          type=\"button\"\n          className=\"vf-button vf-button--sm vf-button--primary mg-button\"\n          disabled={\n            Object.keys(signatures || {})?.length === 0 ||\n            Object.keys(errors || {}).length > 0\n          }\n          onClick={handleSearch}\n        >\n          Search\n        </button>\n        <button\n          id=\"clear-button-mag\"\n          type=\"button\"\n          className=\"vf-button vf-button--sm vf-button--tertiary\"\n          onClick={handleClear}\n        >\n          Clear\n        </button>\n      </div>\n      {loading && <Loading />}\n      {!loading && error && <FetchError error={error} />}\n    </section>\n  );\n};\n\nexport default SourmashForm;\n","import { useContext } from 'react';\n\nimport useData, {\n  MGnifyResponseGenericObj,\n  ResponseFormat,\n} from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\nconst useMgnifySourmashSearch: (\n  endpoint: 'gather' | '',\n  catalogues: string[],\n  signatures: { [filename: string]: string }\n) => MGnifyResponseGenericObj = (endpoint, catalogues, signatures) => {\n  const { config } = useContext(UserContext);\n  const formdata = new FormData();\n  catalogues.forEach((cat) => formdata.append('mag_catalogues', cat));\n  Object.entries(signatures || {}).forEach(([filename, signature]) => {\n    formdata.append(\n      'file_uploaded',\n      new Blob([signature], {\n        type: 'text/plain',\n      }),\n      filename\n    );\n  });\n  const data = useData(\n    endpoint.length && catalogues.length && Object.keys(signatures || {}).length\n      ? `${config.api}genomes-search/${endpoint}`\n      : null,\n    ResponseFormat.JSON,\n    {\n      method: 'POST',\n      body: formdata,\n    }\n  );\n  return data as MGnifyResponseGenericObj;\n};\n\nexport default useMgnifySourmashSearch;\n","import React, { useMemo } from 'react';\nimport EMGTable from 'components/UI/EMGTable';\nimport { Link } from 'react-router-dom';\n\nconst emoji = {\n  SUCCESS: '✅',\n  FAILURE: '❌',\n  IN_QUEUE: '🕛',\n  NO_RESULTS: '🔸',\n  RUNNING: '🏃🏻‍♀️',\n};\n\ntype SourmashResultsTableProps = {\n  results: Array<Record<string, unknown>>;\n  loading: boolean;\n};\nconst SourmashResultsTable: React.FC<SourmashResultsTableProps> = ({\n  results,\n  loading,\n}) => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Filename',\n        accessor: 'filename',\n      },\n      {\n        Header: 'Catalogue',\n        accessor: 'catalogue',\n        Cell: ({ cell }) => {\n          return (\n            <span style={{ whiteSpace: 'nowrap' }}>\n              <Link to={`/genome-catalogues/${cell.value}`}>{cell.value}</Link>\n            </span>\n          );\n        },\n      },\n      {\n        Header: 'Status',\n        accessor: (r) => ({\n          status: r.status,\n          resultStatus: r.result?.status,\n        }),\n        Cell: ({ cell }) => (\n          <span style={{ whiteSpace: 'nowrap' }}>\n            {emoji[cell.value.resultStatus || cell.value.status]}{' '}\n            {cell.value.resultStatus || cell.value.status}\n          </span>\n        ),\n      },\n      {\n        id: 'match',\n        Header: (\n          <>\n            Best Match\n            <br />\n            (% query covered)\n          </>\n        ),\n        accessor: (x) => x,\n        Cell: ({ cell }) => {\n          if (\n            cell.value.status === 'SUCCESS' &&\n            cell.value.result?.status === 'NO_RESULTS'\n          )\n            return \"We couldn't find any matches with your query\";\n          if (cell.value.status === 'IN_QUEUE')\n            return `Position: ${cell.value.position_in_queue}`;\n          if (\n            cell.value.status === 'SUCCESS' &&\n            cell.value.result?.status !== 'NO_RESULTS'\n          )\n            return (\n              <span style={{ whiteSpace: 'nowrap' }}>\n                <Link to={`/genomes/${cell.value.result.match}`}>\n                  {cell.value.result.match}\n                </Link>{' '}\n                ({cell.value.result.p_query})\n              </span>\n            );\n\n          return cell.value.reason || null;\n        },\n        colspan: (cell) =>\n          cell.value.status === 'SUCCESS' &&\n          cell.value.result?.status !== 'NO_RESULTS'\n            ? 1\n            : 3,\n      },\n      {\n        Header: 'Total No. of matches',\n        accessor: 'result.matches',\n      },\n      {\n        Header: 'Download',\n        accessor: (x) => x,\n        Cell: ({ cell }) =>\n          cell.value.status === 'SUCCESS' &&\n          cell.value.result?.status !== 'NO_RESULTS' ? (\n            <a\n              download={`${cell.value.filename}.csv`}\n              href={cell.value.results_url}\n            >\n              <span className=\"icon icon-fileformats icon-CSV\" />\n            </a>\n          ) : null,\n      },\n    ],\n    []\n  );\n  return (\n    <EMGTable\n      cols={columns}\n      data={results.sort((s1, s2) => (s1.status < s2.status ? 1 : -1))}\n      initialPageSize={100}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      showPagination={false}\n    />\n  );\n};\n\nexport default SourmashResultsTable;\n","import React, { useEffect, useState } from 'react';\nimport 'mgnify-sourmash-component';\n\nimport useInterval from 'hooks/useInterval';\nimport useMgnifySourmashStatus from 'hooks/data/useMgnifySourmashStatus';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\nimport SourmashResultsTable from './Table';\n\nconst INTERVAL_TIME = 1000;\nconst COUNT_TO = 5;\ntype SourmashResultsProps = {\n  addToStorage: (jobID: string) => void;\n};\n\nconst SourmashResults: React.FC<SourmashResultsProps> = ({ addToStorage }) => {\n  const [jobId, setJobId] = useQueryParamState('job_id', '');\n  const [count, setCount] = useState(-1);\n  const [shouldCheck, setShouldCheck] = useState(false);\n  const [jobRetrieved, setJobRetrieved] = useState(false);\n  const [job, setJob] = useState(null);\n\n  useInterval(() => {\n    if (!jobId || jobRetrieved) return;\n    if (count % COUNT_TO === 0) {\n      setShouldCheck(true);\n    }\n    setCount((c) => c + 1);\n  }, INTERVAL_TIME);\n  const { data, error, loading } = useMgnifySourmashStatus(\n    shouldCheck && !jobRetrieved ? `status` : '',\n    jobId\n  );\n  useEffect(() => {\n    if (!loading && !error && data) {\n      const results = data?.data as Record<string, Array<{ status: string }>>;\n      // Got the status of the job\n      if (\n        !(results?.signatures || []).some((s) =>\n          ['PENDING', 'IN_QUEUE', 'RUNNING'].includes(s.status)\n        )\n      ) {\n        setJobRetrieved(true);\n        addToStorage(jobId);\n      }\n      setJob(data.data);\n      setCount(0);\n      setShouldCheck(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, error, loading]);\n\n  useEffect(() => {\n    setJob(null);\n    setShouldCheck(true);\n    setJobRetrieved(false);\n    setCount(-1);\n  }, [jobId]);\n\n  const handleNewSearch = (): void => {\n    setJobId('');\n  };\n  if (!jobId) return null;\n  return (\n    <section>\n      <div className=\"vf-stack\">\n        <div>\n          <h4>Search Results</h4>\n          <div>\n            {jobRetrieved && <p>✅ Here are the results of your Job.</p>}\n            {!loading && error && <FetchError error={error} />}\n            {!jobRetrieved && !error && (\n              <p>🔎 Getting the results of your Job</p>\n            )}\n          </div>\n          <h5>Job Information</h5>\n          <dl className=\"vf-list vf-list--definition\">\n            <dt>Job ID</dt>\n            <dd>{jobId}</dd>\n            <dt>Status</dt>\n            <dd>\n              <span>{jobRetrieved ? 'FINISH' : 'Retrieving'}</span>{' '}\n              {loading && <Loading size=\"small\" />}{' '}\n              {!jobRetrieved && !loading && (\n                <span>Checking status in {COUNT_TO - (count % COUNT_TO)}</span>\n              )}\n            </dd>\n            <dt>Link</dt>\n            <dd id=\"results-link\">\n              <a href={window.location.href}>{window.location.href}</a>\n              {jobRetrieved &&\n                job?.signatures.some(({ status }) => status === 'SUCCESS') && (\n                  <a\n                    className=\"vf-button vf-button--sm vf-button--link\"\n                    download={`${job.group_id}.tgz`}\n                    href={job.results_url}\n                  >\n                    <span className=\"icon icon-common icon-download\" /> Download\n                    all Results [.tgz]\n                  </a>\n                )}\n            </dd>\n            {job && (\n              <>\n                <dt>Processed Files</dt>\n                <dd>\n                  <SourmashResultsTable\n                    results={job.signatures}\n                    loading={loading}\n                  />\n                </dd>\n              </>\n            )}\n          </dl>\n        </div>\n        <div className=\"columns text-center\">\n          <button\n            type=\"button\"\n            className=\"vf-button vf-button--sm\"\n            onClick={handleNewSearch}\n          >\n            Start a new search\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default SourmashResults;\n","import { useContext } from 'react';\n\nimport useData, {\n  MGnifyResponseGenericObj,\n  ResponseFormat,\n} from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\nconst useMgnifySourmashStatus: (\n  endpoint: 'status' | '',\n  jobID: string\n) => MGnifyResponseGenericObj = (endpoint, jobID) => {\n  const { config } = useContext(UserContext);\n\n  const data = useData(\n    endpoint.length ? `${config.api}genomes-search/${endpoint}/${jobID}` : null,\n    ResponseFormat.JSON,\n    {\n      method: 'GET',\n      cache: 'no-store',\n    }\n  );\n  return data as MGnifyResponseGenericObj;\n};\n\nexport default useMgnifySourmashStatus;\n","import React from 'react';\nimport 'mgnify-sourmash-component';\nimport SourmashLogo from 'images/sourmash_logo.png';\nimport useSearchStorage from 'hooks/useSearchStorage';\nimport SourmashHistory from './History';\nimport SourmashForm from './Form';\nimport SourmashResults from './Results';\n\ntype SourmashProps = {\n  catalogueName?: string;\n  catalogueID?: string;\n};\n\nconst SourmashSearch: React.FC<SourmashProps> = ({\n  catalogueName,\n  catalogueID,\n}) => {\n  const { jobs, addToStorage, removeFromStorage } = useSearchStorage(\n    `sourmashJobs-${catalogueID || 'xcat'}`\n  );\n  const isSingleCatalogue = !!catalogueID;\n\n  return (\n    <section id=\"genome-search-mag\">\n      <section className=\"vf-stack\">\n        <div />\n        <div className=\"vf-sidebar vf-sidebar--end\">\n          <div className=\"vf-sidebar__inner\">\n            <div>\n              {isSingleCatalogue && (\n                <h3>Search MAG files against the {catalogueName} catalogue</h3>\n              )}\n              {!isSingleCatalogue && (\n                <h3>Search MAG files across catalogues</h3>\n              )}\n            </div>\n            <div className=\"vf-flag vf-flag--middle vf-flag--200 vf-flag--reversed\">\n              <div className=\"vf-flag__body\">\n                <span className=\"vf-text-body vf-text-body--4\">\n                  Powered by{' '}\n                  <a href=\"https://sourmash.readthedocs.io/\">Sourmash</a>.\n                </span>\n              </div>\n              <div className=\"vf-flag__media\">\n                <img\n                  src={SourmashLogo}\n                  style={{ height: '32px' }}\n                  alt=\"Sourmash logo\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <p className=\"vf-text-body vf-text-body--3\">\n          Compare your MAG file or your MAG collection against MGnify’s\n          catalogues to see if they are novel.\n        </p>\n        <details className=\"mg-sourmash-readmore\">\n          <summary>Instructions</summary>\n          <p className=\"vf-text-body vf-text-body--3\">\n            Use the browse button below to upload either a single FastA file, or\n            multiple files by holding [ctrl] or [shift] while clicking in the\n            file explorer. Alternatively you can select a whole directory of\n            files using the directory mode (select this option below the Browse\n            button). In this mode, the tool will process all FastA files in the\n            selected directory, however it will not descend into subdirectories.\n          </p>\n          <p className=\"vf-text-body vf-text-body--3\">\n            Your files are not uploaded into our servers. Rather, Sourmash\n            generates a signature of your file(s) in your browser, and compares\n            this against our MAG catalogue.\n          </p>\n          <p className=\"vf-text-body vf-text-body--3\">\n            Successful searches create a CSV result file for each signature\n            submitted. These are compiled into a TGZ allowing you to fetch all\n            your results in one click. These result files are only stored in our\n            servers for 30 days, so please be sure to download them before they\n            expire.\n          </p>\n        </details>\n        <SourmashForm catalogueID={catalogueID} />\n        <SourmashResults addToStorage={addToStorage} />\n        <SourmashHistory jobs={jobs} removeFromStorage={removeFromStorage} />\n      </section>\n    </section>\n  );\n};\n\nexport default SourmashSearch;\n","import { useState } from 'react';\n\nconst useSearchStorage = (\n  namespace: string\n): {\n  jobs: Map<string, { time: number }>;\n  saveStorage: () => void;\n  addToStorage: (jobID: string) => void;\n  removeFromStorage: (jobID: string) => void;\n} => {\n  const [jobs, setJobs] = useState(\n    new Map<string, { time: number }>(\n      JSON.parse(localStorage.getItem(namespace) || '[]')\n    )\n  );\n  const saveStorage = (): void => {\n    localStorage.setItem(namespace, JSON.stringify(Array.from(jobs.entries())));\n    setJobs(new Map(jobs));\n  };\n\n  const addToStorage = (jobID: string): void => {\n    if (!jobs.has(jobID)) {\n      jobs.set(jobID, { time: Date.now() });\n      saveStorage();\n    }\n  };\n  const removeFromStorage = (jobID: string): void => {\n    if (jobs.has(jobID)) {\n      jobs.delete(jobID);\n      saveStorage();\n    }\n  };\n\n  const pruneOldJobs = (): void => {\n    const now = Date.now();\n    const okTime = 1000 * 60 * 60 * 24 * 30; // 30 days\n    let hasDeleted = false;\n    Array.from(jobs.entries()).forEach(([jobID, { time }]) => {\n      if (time < now - okTime) {\n        jobs.delete(jobID);\n        hasDeleted = true;\n      }\n    });\n    if (hasDeleted) {\n      saveStorage();\n    }\n  };\n  pruneOldJobs();\n  return {\n    jobs,\n    saveStorage,\n    addToStorage,\n    removeFromStorage,\n  };\n};\n\nexport default useSearchStorage;\n","import React, { useRef, FormEvent } from 'react';\n\ntype FileUploaderButtonProps = {\n  onChange: (event: FormEvent) => void;\n  accept?: string;\n  buttonClassName?: string;\n};\nconst FileUploaderButton: React.FC<FileUploaderButtonProps> = ({\n  onChange,\n  accept,\n  buttonClassName = 'vf-button--primary vf-button--sm',\n}) => {\n  const fileInput = useRef(null);\n  return (\n    <>\n      <input\n        type=\"file\"\n        hidden\n        ref={fileInput}\n        onChange={onChange}\n        accept={accept}\n      />\n      <button\n        className={`vf-button ${buttonClassName}`}\n        onClick={() => fileInput.current?.click()}\n        type=\"button\"\n      >\n        Browse for file...\n      </button>\n    </>\n  );\n};\n\nexport default FileUploaderButton;\n","import React, { useMemo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n  preservedQueryParameters?: string[];\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs, preservedQueryParameters }) => {\n  const location = useLocation();\n  const queryParamString = useMemo(() => {\n    if (!preservedQueryParameters) return '';\n    const preserved = new URLSearchParams();\n    const existing = new URLSearchParams(location.search);\n    let anyPreserved = false;\n    preservedQueryParameters.forEach((queryParam) => {\n      if (existing.has(queryParam))\n        preserved.append(queryParam, existing.get(queryParam));\n      anyPreserved = true;\n    });\n    return anyPreserved ? `?${preserved.toString()}` : '';\n  }, [preservedQueryParameters, location.search]);\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to + queryParamString}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React from 'react';\nimport Tippy from '@tippyjs/react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport 'tippy.js/dist/tippy.css';\nimport './style.css';\n\ntype TooltipProps = {\n  content: React.ReactNode;\n  children?: React.ReactNode;\n  interactive?: boolean;\n};\n\nconst Tooltip: React.FC<TooltipProps> = ({\n  content,\n  children,\n  interactive = false,\n}) => (\n  <Tippy content={content} interactive={interactive}>\n    {children as React.ReactElement}\n  </Tippy>\n);\nexport default Tooltip;\n","export const reactSelectTheme = (theme) => ({\n  ...theme,\n  borderRadius: 0,\n  border: '2px solid grey',\n  colors: {\n    ...theme.colors,\n    primary: 'var(--vf-color--blue--dark)',\n    primary25: 'var(--vf-color--blue--light)',\n    primary50: 'var(--vf-color--blue--light)',\n    primary75: 'var(--vf-color--blue)',\n    neutral0: 'var(--vf-color--neutral--0)',\n    neutral5: 'var(--vf-color--neutral--100)',\n    neutral10: 'var(--vf-color--neutral--100)',\n    neutral20: 'var(--vf-color--neutral--200)',\n    neutral30: 'var(--vf-color--neutral--300)',\n    neutral40: 'var(--vf-color--neutral--400)',\n    neutral50: 'var(--vf-color--neutral--500)',\n    neutral60: 'var(--vf-color--neutral--600)',\n    neutral70: 'var(--vf-color--neutral--700)',\n    neutral80: 'var(--vf-color--neutral--800)',\n    neutral90: 'var(--vf-color--neutral--900)',\n    danger: 'var(--vf-color--red)',\n    dangerLight: 'var(--vf-color--red--light)',\n  },\n});\n\nexport const reactSelectStyles = {\n  control: (provided, state) => ({\n    ...provided,\n    border: state.isFocused\n      ? '2px solid var(--vf-color--grey--dark)'\n      : '2px solid var(--vf-color--grey)',\n    boxShadow: state.isFocused\n      ? '0 0 0 .0625rem var(--vf-color--grey--dark)'\n      : 'unset',\n    '&:hover': {\n      border: '2px solid var(--vf-color--grey--dark)',\n      boxShadow: '0 0 0 .0625rem var(--vf-color--grey--dark)',\n    },\n    color: state.isFocused\n      ? 'var(--vf-color--grey--dark)'\n      : 'var(--vf-color--grey)',\n  }),\n};\n","/**\n * Remove the s__ prefixes from a lineage.\n * @param {string} lineage string with the lineage `d__Bacteria;p__Proteobacteria;c__Gammapr...`\n * @param {string} replace replace string\n * @return {string}\n */\nexport function cleanTaxLineage(lineage: string, replace = ''): string {\n  let cleaned = lineage\n    .replace(/;/g, '')\n    .replace(/[d|p|c|o|f|g|s]__/g, replace);\n  if (cleaned.startsWith(replace)) {\n    cleaned = cleaned.substring(replace.length).trimStart();\n  }\n  return cleaned;\n}\n\n/**\n * Retrieve a non-blank taxonomic identity from the species level or upwards\n * @param {string} fullLineage\n * @param {bool} removePrefix true if this should remove the 'd|p|c|o|f|g|s__' prefix\n * @return {string}\n */\nexport function getSimpleTaxLineage(\n  fullLineage: string,\n  removePrefix: boolean\n): string {\n  const l = fullLineage.split(';');\n  let head = l.pop();\n  // Remove all until species\n  while (head.indexOf('s__') === -1) {\n    head = l.pop();\n  }\n  // Find first non-null\n  while (head.length <= 3) {\n    head = l.pop();\n  }\n  if (removePrefix && head) {\n    return cleanTaxLineage(head);\n  }\n  return head;\n}\n\nexport const TAXONOMY_COLOURS = [\n  '#ABD3DB',\n  '#F2D9D0',\n  '#F2A477',\n  '#5F9595',\n  '#D9C4B8',\n  '#EEEEAB',\n  '#8990B3',\n  '#DEFFE3',\n  '#A0B392',\n  '#DEE3FF',\n  '#F2F2F2',\n];\n"],"names":["sequence","threshold","cataloguesFilter","data","loading","error","config","useContext","UserContext","formData","FormData","append","String","forEach","catalogue","useData","length","api","method","body","Loading","FetchError","errors","className","style","backgroundColor","Object","entries","map","field","err","columns","id","Header","accessor","genome","decodeURI","last","split","mgnify","biome","Cell","cell","value","float","disableSortBy","to","Tooltip","content","EMGTable","cols","results","initialPageSize","showPagination","examples","catalogueName","catalogueID","isSingleCatalogue","textareaSeq","useRef","shouldSearch","setShouldSearch","useState","kmers","setKmers","setErrors","valid","setValid","useEffect","current","addEventListener","e","detail","quill","selectedCatalogues","setSelectedCatalogues","setSequence","seq","setText","sayPasted","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","href","onChange","singleCatalogue","type","onClick","preventDefault","navigator","clipboard","readText","then","FileUploaderButton","event","files","target","reader","FileReader","result","readAsText","accept","buttonClassName","alphabet","height","single","ref","htmlFor","name","min","max","step","Math","Number","InfoBanner","tooShort","hasInvalidCharacters","multipleSequences","cleanUp","cataloguesList","loadingCataloguesList","catalogueOptions","useMemo","label","attributes","cat","theme","styles","placeholder","isLoading","isSearchable","inputId","isMulti","options","jobs","removeFromStorage","setJobId","useQueryParamState","size","Array","from","keys","j","key","sourmash","jobId","signatures","setSourmashState","endpoint","catalogues","formdata","filename","signature","Blob","sourmashElement","sketchedAll","changedFiles","removeEventListener","job_id","show_directory_checkbox","display","justifyContent","disabled","clear","emoji","SUCCESS","FAILURE","IN_QUEUE","NO_RESULTS","RUNNING","whiteSpace","r","status","resultStatus","x","position_in_queue","match","p_query","reason","colspan","download","results_url","sort","s1","s2","addToStorage","count","setCount","shouldCheck","setShouldCheck","jobRetrieved","setJobRetrieved","job","setJob","useInterval","c","jobID","cache","some","s","includes","window","location","group_id","namespace","setJobs","Map","JSON","parse","localStorage","getItem","saveStorage","setItem","stringify","now","Date","hasDeleted","time","delete","pruneOldJobs","has","set","src","alt","fileInput","hidden","click","tabs","preservedQueryParameters","queryParamString","preserved","URLSearchParams","existing","search","anyPreserved","queryParam","get","toString","Label","pathname","startsWith","hash","children","interactive","reactSelectTheme","borderRadius","border","colors","primary","primary25","primary50","primary75","neutral0","neutral5","neutral10","neutral20","neutral30","neutral40","neutral50","neutral60","neutral70","neutral80","neutral90","danger","dangerLight","reactSelectStyles","control","provided","state","isFocused","boxShadow","color","cleanTaxLineage","lineage","replace","cleaned","substring","trimStart","getSimpleTaxLineage","fullLineage","removePrefix","l","head","pop","indexOf","TAXONOMY_COLOURS"],"sourceRoot":""}