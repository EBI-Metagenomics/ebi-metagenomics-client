{"version":3,"file":"js/633.ea15bff5.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Genomes/Browser/Popup/index.tsx","webpack://mgportalv2/./src/components/Genomes/Browser/index.tsx"],"sourcesContent":["import React from 'react';\nimport ExtLink from 'components/UI/ExtLink';\n\ntype PropertyDataType = { name: string; value: string | number };\ntype GenomeBrowserPopupProps = {\n  data: PropertyDataType[];\n};\ntype FormattedData = {\n  name?: string;\n  gene?: string;\n  product?: string;\n  properties: {\n    title: string;\n    data: {\n      name?: string;\n      Value?: string | React.ElementType;\n    }[];\n  }[];\n};\n\nconst antiSMASHLabels = {\n  biosynthetic: 'Core biosynthetic gene',\n  'biosynthetic-additional': 'Additional biosynthetic gene',\n  regulatory: 'Regulatory genes',\n  transport: 'Transport-related gene',\n  resistance: 'Resistance genes',\n};\n\nconst MultipleField: React.FC<{ value: string; url?: string }> = ({\n  value,\n  url,\n}) => {\n  if (!value) return null;\n  const parts = value.split(',');\n  return (\n    <ul className=\"vf-list\">\n      {parts.map((part) => (\n        <li key={part}>\n          {url ? <ExtLink href={`${url}${part}`}>{part}</ExtLink> : part}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n/**\n * Calculate the property length.\n * @return {int} the length or undefined\n */\nconst getProtLength = (attributes: {\n  start?: string | number | null;\n  end?: string | number | null;\n}): number => {\n  const start =\n    typeof attributes.start === 'string'\n      ? parseInt(attributes.start, 10)\n      : attributes.start;\n  const end =\n    typeof attributes.end === 'string'\n      ? parseInt(attributes.end, 10)\n      : attributes.end;\n  if (\n    Number.isNaN(start) ||\n    Number.isNaN(end) ||\n    start === null ||\n    end === null\n  ) {\n    return undefined;\n  }\n  return Math.ceil((end - start) / 3);\n};\nconst formatData = (rawData: PropertyDataType[]): FormattedData => {\n  const attributes: {\n    [name: string]: string | null;\n  } = rawData.reduce((memo, el) => {\n    // eslint-disable-next-line no-param-reassign\n    if (el.name) memo[el.name.toLowerCase()] = el.value;\n    return memo;\n  }, {});\n\n  const functionalData = {\n    title: 'Functional annotation',\n    data: [\n      {\n        name: 'E.C Number',\n        Value:\n          attributes.ecnumber &&\n          (() => (\n            <MultipleField\n              value={attributes.ecnumber}\n              url=\"https://enzyme.expasy.org/EC/\"\n            />\n          )),\n      },\n      {\n        name: 'Pfam',\n        Value:\n          attributes.pfam &&\n          (() => (\n            <MultipleField\n              value={attributes.pfam}\n              url=\"https://pfam.xfam.org/family/\"\n            />\n          )),\n      },\n      {\n        name: 'KEGG',\n        Value:\n          attributes.kegg &&\n          (() => (\n            <MultipleField\n              value={attributes.kegg}\n              url=\"https://www.genome.jp/dbget-bin/www_bget?\"\n            />\n          )),\n      },\n      {\n        name: 'eggNOG',\n        Value: attributes.eggnog && decodeURIComponent(attributes.eggnog),\n      },\n      {\n        name: 'COG',\n        Value:\n          attributes.cog && (() => <MultipleField value={attributes.cog} />),\n      },\n      {\n        name: 'GO',\n        Value:\n          attributes.go &&\n          (() => (\n            <MultipleField\n              value={attributes.go}\n              url=\"https://www.ebi.ac.uk/ols/search?q=\"\n            />\n          )),\n      },\n      {\n        name: 'InterPro',\n        Value:\n          attributes.interpro &&\n          (() => (\n            <MultipleField\n              value={attributes.interpro}\n              url=\"https://www.ebi.ac.uk/interpro/entry/InterPro/'\"\n            />\n          )),\n      },\n      {\n        // antiSMASH\n        name: 'Gene type',\n        Value:\n          attributes.as_type &&\n          (antiSMASHLabels[attributes.as_type] || attributes.as_type),\n      },\n      {\n        // Notes are URL encoded during the GFF generation\n        name: 'Notes',\n        Value:\n          attributes.as_notes &&\n          (() => (\n            <MultipleField value={decodeURIComponent(attributes.as_notes)} />\n          )),\n      },\n      {\n        name: 'Cluster',\n        Value:\n          attributes.as_gene_clusters &&\n          (() => <MultipleField value={attributes.as_gene_clusters} />),\n      },\n    ],\n  };\n  const otherData = {\n    title: 'Feature details',\n    data: [\n      {\n        name: 'Type',\n        Value: attributes.type,\n      },\n      {\n        name: 'Inference',\n        Value: attributes.inference,\n      },\n      {\n        name: 'Start / End',\n        Value: `${attributes.start}/${attributes.end}`,\n      },\n      {\n        name: 'Protein length',\n        Value: String(getProtLength(attributes)),\n      },\n    ],\n  };\n\n  const metaproteomicData = {\n    title: 'Metaproteomics',\n    data: [\n      {\n        name: 'Peptide sequence',\n        Value:\n          attributes.pep_seq &&\n          (() => <MultipleField value={attributes.pep_seq} />),\n      },\n      {\n        name: 'Protein specral matches (PSM)',\n        Value:\n          attributes.pep_psm &&\n          (() => <MultipleField value={attributes.pep_psm} />),\n      },\n      {\n        name: 'Validated PSM',\n        Value:\n          attributes.pep_vpsm &&\n          (() => <MultipleField value={attributes.pep_vpsm} />),\n      },\n      {\n        name: 'Confidence',\n        Value:\n          attributes.pep_conf &&\n          (() => <MultipleField value={attributes.pep_conf} />),\n      },\n      {\n        name: 'Pride ID',\n        Value:\n          attributes.pep_pxd &&\n          (() => (\n            <ExtLink\n              href={`https://www.ebi.ac.uk/pride/archive/projects/${attributes.pep_pxd}`}\n            >\n              {attributes.pep_pxd}\n            </ExtLink>\n          )),\n      },\n    ],\n  };\n\n  return {\n    name: attributes.id,\n    gene: attributes.gene,\n    product: attributes.product,\n    properties: [functionalData, otherData, metaproteomicData],\n  };\n};\n\nconst GenomeBrowserPopup: React.FC<GenomeBrowserPopupProps> = ({ data }) => {\n  const { name, gene, product, properties } = formatData(data);\n  return (\n    <>\n      <table className=\"stack hover igv-popover-table\">\n        <caption className=\"igv-popover-section-header\">Feature</caption>\n        <tbody>\n          {name && (\n            <tr>\n              <td className=\"igv-popover-table-td-name\">ID</td>\n              <td>{name}</td>\n            </tr>\n          )}\n          {gene && (\n            <tr>\n              <td className=\"igv-popover-table-td-name\">Gene</td>\n              <td>\n                <em>{gene}</em>\n              </td>\n            </tr>\n          )}\n          {product && (\n            <tr>\n              <td className=\"igv-popover-table-td-name\">Product</td>\n              <td>{product}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      {properties.map((property) => (\n        <table className=\"stack hover igv-popover-table\" key={property.title}>\n          {property.data.filter((d) => !!d.Value).length > 0 && (\n            <caption className=\"igv-popover-section-header\">\n              {property.title}\n            </caption>\n          )}\n          <tbody>\n            {property.data\n              .map(\n                ({ name: pName, Value }) =>\n                  Value && (\n                    <tr key={pName}>\n                      <td className=\"igv-popover-table-td-name\">{pName}</td>\n                      <td>{typeof Value === 'string' ? Value : <Value />}</td>\n                    </tr>\n                  )\n              )\n              .filter(Boolean)}\n          </tbody>\n        </table>\n      ))}\n    </>\n  );\n};\n\nexport default GenomeBrowserPopup;\n","import React, { useEffect, useRef, useState, useContext } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport igv from 'igv';\n\nimport UserContext from 'pages/Login/UserContext';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport GenomeBrowserPopup from './Popup';\n\nconst GenomeBrowser: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const accession = useURLAccession();\n  const { config } = useContext(UserContext);\n\n  const tracks = [\n    {\n      type: 'mgnify-annotation',\n      // name: downloadsModel.get('name'),\n      url: `${config.api}genomes/${accession}/downloads/${accession}.gff`,\n      format: 'gff3',\n      label: 'Functional annotation',\n      displayMode: 'EXPANDED',\n      colorAttributes: [\n        ['Default', ''],\n        ['COG', 'COG'],\n        ['Product', 'product'],\n        ['Pfam', 'Pfam'],\n        ['KEGG', 'KEGG'],\n        ['InterPro', 'InterPro'],\n        ['eggNOG', 'eggNOG'],\n      ],\n    },\n  ];\n  const options = {\n    showChromosomeWidget: false,\n    showTrackLabelButton: true,\n    showTrackLabels: true,\n    showCenterGuide: false,\n    showAllChromosomes: true,\n    reference: {\n      fastaURL: `${config.api}genomes/${accession}/downloads/${accession}.fna`,\n      indexURL: `${config.api}genomes/${accession}/downloads/${accession}.fna.fai`,\n    },\n    tracks,\n    showLegend: true,\n    legendParent: '#genome-browser',\n  };\n  const divRef = useRef(null);\n  useEffect(() => {\n    igv.createBrowser(divRef.current, options).then((browser) => {\n      setLoading(false);\n      browser.on('trackclick', (ignored, data) =>\n        ReactDOMServer.renderToString(<GenomeBrowserPopup data={data} />)\n      );\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <div id=\"genome-browser\">\n      {loading && <Loading size=\"large\" />}\n      <div className=\"genome-browser-container\" ref={divRef} />\n    </div>\n  );\n};\n\nexport default GenomeBrowser;\n"],"names":["antiSMASHLabels","biosynthetic","regulatory","transport","resistance","MultipleField","value","url","parts","split","className","map","part","key","href","getProtLength","attributes","start","parseInt","end","Number","isNaN","Math","ceil","data","name","gene","product","properties","rawData","reduce","memo","el","toLowerCase","functionalData","title","Value","ecnumber","pfam","kegg","eggnog","decodeURIComponent","cog","go","interpro","as_type","as_notes","as_gene_clusters","otherData","type","inference","String","metaproteomicData","pep_seq","pep_psm","pep_vpsm","pep_conf","pep_pxd","id","formatData","property","filter","d","length","pName","Boolean","loading","setLoading","useState","accession","config","useContext","tracks","api","format","label","displayMode","colorAttributes","options","showChromosomeWidget","showTrackLabelButton","showTrackLabels","showCenterGuide","showAllChromosomes","reference","fastaURL","indexURL","showLegend","legendParent","divRef","useRef","useEffect","current","then","browser","on","ignored","size","ref"],"sourceRoot":""}