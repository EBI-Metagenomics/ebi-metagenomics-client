{"version":3,"file":"js/644.6edd8c5c.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Assembly/Assemblies/index.tsx","webpack://mgportalv2/./src/components/Nav/RouteForHash/index.tsx","webpack://mgportalv2/./src/components/Study/Studies/index.tsx","webpack://mgportalv2/./src/components/UI/KeyValueList/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/render.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/BySamplesArray/index.tsx","webpack://mgportalv2/./src/components/Sample/Overview/index.tsx","webpack://mgportalv2/./src/components/Sample/Runs/index.tsx","webpack://mgportalv2/./src/pages/Sample/index.tsx","webpack://mgportalv2/./src/utils/urls.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst initialPageSize = 10;\n\nconst getURLByEndpoint = (endpoint: string, accession: string): string => {\n  if (endpoint === 'runs') return `runs/${accession}/assemblies`;\n  return 'assemblies';\n};\ntype AssociatedAssembliesProps = {\n  rootEndpoint: string;\n};\n\nconst AssociatedAssemblies: React.FC<AssociatedAssembliesProps> = ({\n  rootEndpoint,\n}) => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'assembly-page': 1,\n      'assembly-page_size': initialPageSize,\n      'assembly-order': '',\n    },\n    {\n      'assembly-page': Number,\n      'assembly-page_size': Number,\n    }\n  );\n  const url = getURLByEndpoint(rootEndpoint, accession);\n  const { data, loading, error, isStale } = useMGnifyData(url, {\n    sample_accession: rootEndpoint === 'samples' ? accession : undefined,\n    page: queryParameters['assembly-page'] as number,\n    ordering: queryParameters['assembly-order'] as string,\n    page_size: queryParameters['assembly-page_size'] as number,\n  });\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n  if (!(data.data as MGnifyDatum[]).length) return null;\n\n  const columns = [\n    {\n      Header: 'Assembly ID',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/assemblies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Experiment type',\n      accessor: 'attributes.experiment-type',\n    },\n    {\n      Header: 'WGS ID',\n      accessor: 'attributes.wgs-accession',\n    },\n    {\n      Header: 'Legacy ID',\n      accessor: 'attributes.legacy-accession',\n    },\n    {\n      Header: 'Pipeline versions',\n      accessor: 'relationships.pipelines.data',\n      Cell: ({ cell }) =>\n        (cell.value as { id: string }[]).map(({ id }) => id).join(', '),\n    },\n  ];\n  const showPagination = (data.meta?.pagination?.count || 1) > initialPageSize;\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['assembly-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-assembly-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"assembly-\"\n      showPagination={showPagination}\n    />\n  );\n};\n\nexport default AssociatedAssemblies;\n","import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\ntype PropsType = {\n  hash: string;\n  isDefault?: boolean;\n};\nconst RouteForHash: React.FC<PropsType> = ({\n  hash,\n  isDefault = false,\n  children,\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (location.hash === '' && hash !== '' && isDefault) {\n      navigate(hash, { replace: true });\n    }\n  });\n\n  if (location.hash === hash) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport default RouteForHash;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\n\ntype AssociatedStudiesProps = {\n  rootEndpoint: string;\n};\nconst AssociatedStudies: React.FC<AssociatedStudiesProps> = ({\n  rootEndpoint,\n}) => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'studies-page': 1,\n      'studies-page_size': initialPageSize,\n      'studies-order': '',\n    },\n    {\n      'studies-page': Number,\n      'studies-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `${rootEndpoint}/${accession}/studies`,\n    {\n      page: queryParameters['studies-page'] as number,\n      ordering: queryParameters['studies-order'] as string,\n      page_size: queryParameters['studies-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n  if (!(data.data as MGnifyDatum[]).length) return null;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n      Cell: ({ cell }) => <TruncatedText text={(cell.value as string) || ''} />,\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n  const showPagination = (data.meta?.pagination?.count || 1) > initialPageSize;\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['studies-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-studies-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"studies-\"\n      showPagination={showPagination}\n    />\n  );\n};\n\nexport default AssociatedStudies;\n","import React from 'react';\n\ntype KeyValueProps = {\n  list: { key: string; value: string | React.ElementType }[];\n};\n\nconst KeyValueList: React.FC<KeyValueProps> = ({ list }) => (\n  <div\n    className=\"vf-grid vf-grid__col-2\"\n    style={{\n      gridTemplateColumns: '1fr 2fr',\n      rowGap: '0.5rem',\n    }}\n  >\n    {list.map(({ key, value: Value }) => (\n      <React.Fragment key={key}>\n        <div style={{ textAlign: 'right' }}>{key}:</div>\n        <div>{typeof Value === 'string' ? Value : <Value />}</div>\n      </React.Fragment>\n    ))}\n  </div>\n);\n\nexport default KeyValueList;\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\n\nimport './style.css';\n\n// TODO: make the link play nicer with react-router\nconst MarkerPopup: React.FC<{ sample: MGnifyDatum }> = ({ sample }) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">\n      <a href={`../samples/${sample.id}`}>{sample.id}</a>\n      {/* <Link to=\"/search/studies\">{sample.id}</Link> */}\n    </h3>\n    <p className=\"vf-box__text\">{sample.attributes['sample-desc']}</p>\n  </div>\n);\nconst ClusterMarkerPopup: React.FC<{ accessions: string[] }> = ({\n  accessions,\n}) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">Samples on this geographical location</h3>\n    <ul className=\"vf-list\">\n      {accessions.map((accession) => (\n        <li ref={accession}>\n          <a href={`../samples/${accession}`}>{accession}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ntype MapProps = {\n  samples: Array<MGnifyDatum>;\n};\n\nconst SamplesMap: React.FC<MapProps> = ({ samples }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const markerCluster = useRef<MarkerClusterer>(null);\n  const sampleInfoWindow = useRef(new google.maps.InfoWindow());\n  const clusterInfoWindow = useRef(new google.maps.InfoWindow());\n  const newBoundary = useRef(new google.maps.LatLngBounds());\n\n  const markers = useRef({});\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n        minZoom: 2,\n      });\n      setTheMap(tmpMap);\n    }\n  }, [theMap]);\n  useEffect(() => {\n    if (theMap && samples) {\n      if (markerCluster.current) {\n        markerCluster.current.clearMarkers();\n      }\n\n      samples\n        .filter(({ id }) => !(id in markers.current))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n            title: sample.id,\n          });\n          newBoundary.current.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.current.setContent(\n              ReactDOMServer.renderToString(<MarkerPopup sample={sample} />)\n            );\n            sampleInfoWindow.current.open(theMap, marker);\n          });\n          markers.current[sample.id] = marker;\n        });\n      markerCluster.current = new MarkerClusterer(\n        theMap,\n        Object.values(markers.current),\n        {\n          imagePath:\n            'https://raw.githubusercontent.com/googlemaps/js-markerclustererplus/master/images/m',\n          maxZoom: 10,\n        }\n      );\n\n      // for clusters in MAX Zoom and with less than 10 elements show a list\n      google.maps.event.addListener(\n        markerCluster.current,\n        'click',\n        // eslint-disable-next-line func-names\n        function (cluster) {\n          if (\n            // eslint-disable-next-line no-underscore-dangle, react/no-this-in-sfc\n            this.prevZoom_ + 1 <= this.getMaxZoom() ||\n            cluster.getSize() >= 10\n          ) {\n            return;\n          }\n          clusterInfoWindow.current.setPosition(cluster.getCenter());\n\n          clusterInfoWindow.current.setContent(\n            ReactDOMServer.renderToString(\n              <ClusterMarkerPopup\n                accessions={cluster.getMarkers().map((m) => m.getTitle())}\n              />\n            )\n          );\n\n          clusterInfoWindow.current.open(theMap);\n        }\n      );\n\n      theMap.fitBounds(newBoundary.current);\n    }\n  }, [theMap, samples]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\nexport default SamplesMap;\n","import React, { ReactElement } from 'react';\nimport { Status } from '@googlemaps/react-wrapper';\nimport { ErrorTypes } from 'hooks/data/useData';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\nexport default render;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React from 'react';\n\nconst TruncatedText: React.FC<{ maxLength?: number; text: string }> = ({\n  text,\n  maxLength = 250,\n}) => (\n  <>\n    {text.substring(0, maxLength)}\n    {text.length >= maxLength && '...'}\n  </>\n);\n\nexport default TruncatedText;\n","import React, { useContext } from 'react';\n\nimport { Wrapper } from '@googlemaps/react-wrapper';\n\nimport UserContext from 'pages/Login/UserContext';\nimport SamplesMap from 'components/UI/SamplesMap';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport render from '../render';\n\nimport '../style.css';\n\ntype SamplesMapProps = {\n  samples: Array<MGnifyDatum>;\n};\nconst SamplesMapBySamplesArray: React.FC<SamplesMapProps> = ({ samples }) => {\n  const { config } = useContext(UserContext);\n\n  const samplesFiltered = samples.filter((sample) => {\n    try {\n      return (\n        Number(sample.attributes.longitude) !== 0.0 &&\n        Number(sample.attributes.latitude) !== 0.0\n      );\n    } catch {\n      return false;\n    }\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <SamplesMap samples={samplesFiltered} />\n        </Wrapper>\n      </div>\n      <div className=\"mg-map-progress\">\n        {samplesFiltered.length === 0 && (\n          <div>⚠️ None of the samples have geolocation co-ordinates.</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SamplesMapBySamplesArray;\n","import React from 'react';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMap from 'components/UI/SamplesMap/BySamplesArray';\nimport Box from 'components/UI/Box';\nimport ExtLink from 'components/UI/ExtLink';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { ENA_VIEW_URL } from 'utils/urls';\n\ntype SampleOverviewProps = {\n  data: MGnifyDatum;\n};\n\nconst SampleOverview: React.FC<SampleOverviewProps> = ({ data }) => {\n  const lineage = data.relationships.biome.data.id;\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <Box label=\"Description\">{data.attributes['sample-desc']}</Box>\n          <Box label=\"External links\">\n            <ul>\n              <li>\n                <ExtLink href={ENA_VIEW_URL + data.attributes.accession}>\n                  ENA website ({data.attributes.accession})\n                </ExtLink>\n              </li>\n              <li>\n                <ExtLink\n                  href={`https://www.ebi.ac.uk/biosamples/samples/${data.attributes.biosample}`}\n                >\n                  EBI biosample ({data.attributes.biosample})\n                </ExtLink>\n              </li>\n            </ul>\n          </Box>\n          <Box label=\"Classification\">\n            <span\n              className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n              style={{ float: 'initial' }}\n            />\n            {lineage}\n          </Box>\n        </div>\n        <SamplesMap samples={[data]} />\n      </div>\n    </section>\n  );\n};\n\nexport default SampleOverview;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst initialPageSize = 10;\n\nconst AssociatedRuns: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'runs-page': 1,\n      'runs-page_size': initialPageSize,\n      'runs-order': '',\n    },\n    {\n      'runs-page': Number,\n      'runs-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `samples/${accession}/runs`,\n    {\n      page: queryParameters['runs-page'] as number,\n      ordering: queryParameters['runs-order'] as string,\n      page_size: queryParameters['runs-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'run',\n      Header: 'Run ID',\n      accessor: 'id',\n      Cell: ({ cell }) => <Link to={`/runs/${cell.value}`}>{cell.value}</Link>,\n    },\n    {\n      Header: 'Experiment type',\n      accessor: 'attributes.experiment-type',\n    },\n    {\n      Header: 'Instrument model',\n      accessor: 'attributes.instrument-model',\n    },\n    {\n      Header: 'Instrument platform',\n      accessor: 'attributes.instrument-platform',\n    },\n    {\n      Header: 'pipeline versions',\n      accessor: 'relationships.pipelines.data',\n      Cell: ({ cell }) =>\n        (cell.value as { id: string }[]).map(({ id }) => id).join(', '),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['runs-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-runs-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"runs-\"\n    />\n  );\n};\n\nexport default AssociatedRuns;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Sample/Overview';\nimport AssociatedStudies from 'src/components/Study/Studies';\nimport AssociatedRuns from 'components/Sample/Runs';\nimport AssociatedAssemblies from 'src/components/Assembly/Assemblies';\nimport RouteForHash from 'components/Nav/RouteForHash';\nimport KeyValueList from 'components/UI/KeyValueList';\n\nconst tabs = [\n  { label: 'Sample metadata', to: '#' },\n  { label: 'Associated studies', to: '#studies' },\n  { label: 'Analysed associated runs', to: '#runs' },\n  { label: 'Analysed associated assemblies', to: '#assemblies' },\n];\n\nconst SamplePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`samples/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: sampleData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Sample overview ({accession})</h2>\n      <h3>Sample {sampleData.attributes['sample-name']}</h3>\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <Overview data={sampleData} />\n          <Tabs tabs={tabs} />\n          <section className=\"vf-grid\">\n            <div className=\"vf-stack vf-stack--200\">\n              <RouteForHash hash=\"\" isDefault>\n                <KeyValueList\n                  list={\n                    (sampleData?.attributes?.['sample-metadata'] as {\n                      key: string;\n                      value: string;\n                    }[]) || []\n                  }\n                />\n              </RouteForHash>\n              <RouteForHash hash=\"#studies\">\n                <AssociatedStudies rootEndpoint=\"samples\" />\n              </RouteForHash>\n              <RouteForHash hash=\"#runs\">\n                <AssociatedRuns />\n              </RouteForHash>\n              <RouteForHash hash=\"#assemblies\">\n                <AssociatedAssemblies rootEndpoint=\"samples\" />\n              </RouteForHash>\n            </div>\n          </section>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default SamplePage;\n","export const ENA_VIEW_URL = 'https://www.ebi.ac.uk/ena/browser/view/';\nexport const IMG_URL =\n  ' https://img.jgi.doe.gov/cgi-bin/m/main.cgi?section=TaxonDetail&page=taxonDetail&taxon_oid=';\nexport const NCBI_ASSEMBLY_URL = 'https://www.ncbi.nlm.nih.gov/assembly/';\nexport const NCBI_SAMPLE_URL = 'https://www.ncbi.nlm.nih.gov/biosample/?term=';\nexport const NCBI_PROJECT_URL = 'https://www.ncbi.nlm.nih.gov/bioproject/';\nexport const PATRIC_URL = 'https://www.patricbrc.org/view/Genome/';\n"],"names":["rootEndpoint","accession","queryParameters","Number","url","endpoint","getURLByEndpoint","data","loading","error","isStale","sample_accession","undefined","page","ordering","page_size","size","length","columns","Header","accessor","Cell","cell","to","value","map","id","join","showPagination","meta","pagination","count","cols","initialPage","initialPageSize","className","namespace","hash","isDefault","children","location","navigate","useEffect","replace","study","relationships","biomes","style","float","text","Date","toLocaleDateString","list","gridTemplateColumns","rowGap","key","Value","textAlign","MarkerPopup","sample","href","attributes","ClusterMarkerPopup","accessions","ref","samples","useRef","theMap","setTheMap","useState","markerCluster","sampleInfoWindow","google","maps","InfoWindow","clusterInfoWindow","newBoundary","LatLngBounds","markers","tmpMap","Map","current","maxZoom","minZoom","clearMarkers","filter","forEach","position","lat","latitude","lng","longitude","marker","Marker","title","extend","addListener","setContent","open","Object","values","imagePath","event","cluster","this","prevZoom_","getMaxZoom","getSize","setPosition","getCenter","getMarkers","m","getTitle","fitBounds","height","status","Status","type","tabs","label","Label","pathname","startsWith","maxLength","substring","config","useContext","UserContext","samplesFiltered","Wrapper","apiKey","googleMapsKey","render","SamplesMap","lineage","biome","toDateString","Box","ExtLink","biosample","useURLAccession","useMGnifyData","Loading","FetchError","EMGTable","sampleData","Overview","Tabs","RouteForHash","KeyValueList","ENA_VIEW_URL","IMG_URL","NCBI_ASSEMBLY_URL","NCBI_SAMPLE_URL","NCBI_PROJECT_URL","PATRIC_URL"],"sourceRoot":""}