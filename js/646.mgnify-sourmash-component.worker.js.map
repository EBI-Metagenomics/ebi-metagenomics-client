{"version":3,"file":"646.mgnify-sourmash-component.worker.js","mappings":"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","sources":["webpack://mgnify-sourmash-component/./node_modules/sourmash/sourmash_bg.js"],"sourcesContent":["import * as wasm from './sourmash_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n*/\nexport class ComputeParameters {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ComputeParameters.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_computeparameters_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        var ret = wasm.computeparameters_new_with_params();\n        return ComputeParameters.__wrap(ret);\n    }\n    /**\n    * @param {Uint32Array} ksizes\n    */\n    set_ksizes(ksizes) {\n        var ptr0 = passArray32ToWasm0(ksizes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.computeparameters_set_ksizes(this.ptr, ptr0, len0);\n    }\n}\n/**\n*/\nexport class KmerMinHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KmerMinHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kmerminhash_free(ptr);\n    }\n    /**\n    * @param {number} num\n    * @param {number} ksize\n    * @param {boolean} is_protein\n    * @param {boolean} dayhoff\n    * @param {boolean} hp\n    * @param {number} seed\n    * @param {number} scaled\n    * @param {boolean} track_abundance\n    */\n    constructor(num, ksize, is_protein, dayhoff, hp, seed, scaled, track_abundance) {\n        var ret = wasm.kmerminhash_new_with_scaled(num, ksize, is_protein, dayhoff, hp, seed, scaled, track_abundance);\n        return KmerMinHash.__wrap(ret);\n    }\n    /**\n    * @param {string} buf\n    */\n    add_sequence_js(buf) {\n        var ptr0 = passStringToWasm0(buf, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.kmerminhash_add_sequence_js(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.kmerminhash_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Signature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * @param {ComputeParameters} params\n    */\n    constructor(params) {\n        _assertClass(params, ComputeParameters);\n        var ret = wasm.signature_new_from_params(params.ptr);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @param {string} buf\n    */\n    add_sequence_js(buf) {\n        var ptr0 = passStringToWasm0(buf, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.signature_add_sequence_js(this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {File} fp\n    */\n    add_from_file(fp) {\n        wasm.signature_add_from_file(this.ptr, addHeapObject(fp));\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    size() {\n        var ret = wasm.signature_size(this.ptr);\n        return ret >>> 0;\n    }\n}\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","subarray","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","mem","offset","code","charCodeAt","slice","heap","Array","fill","push","heap_next","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachegetUint32Memory0","ComputeParameters","obj","Object","create","prototype","__destroy_into_raw","this","free","constructor","ret","__wrap","set_ksizes","ksizes","ptr0","Uint32Array","passArray32ToWasm0","len0","KmerMinHash","num","ksize","is_protein","dayhoff","hp","seed","scaled","track_abundance","add_sequence_js","to_json","retptr","r0","r1","Signature","params","instance","klass","Error","name","_assertClass","add_from_file","fp","idx","addHeapObject","size","__wbindgen_throw","arg0","arg1"],"sourceRoot":""}