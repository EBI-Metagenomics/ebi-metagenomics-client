{"version":3,"file":"js/652.97be3ab9.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Analysis/Analyses/index.tsx","webpack://mgportalv2/./src/components/UI/KeyValueList/index.tsx","webpack://mgportalv2/./src/pages/Assembly/index.tsx","webpack://mgportalv2/./src/utils/urls.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { unescape } from 'lodash';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList, MGnifyDatum } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\ntype AssociatedAnaysesProps = {\n  rootEndpoint: string;\n};\n\nconst AnalysesTable: React.FC<AssociatedAnaysesProps> = ({ rootEndpoint }) => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'analyses-page': 1,\n      'analyses-page_size': initialPageSize,\n      'analyses-order': '',\n    },\n    {\n      'analyses-page': Number,\n      'analyses-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `${rootEndpoint}/${accession}/analyses`,\n    {\n      include: 'sample',\n      page: queryParameters['analyses-page'] as number,\n      ordering: queryParameters['analyses-order'] as string,\n      page_size: queryParameters['analyses-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  if (!(data.data as MGnifyDatum[]).length) return null;\n\n  const samples = {};\n  data.included\n    ?.filter(({ type }) => type === 'samples')\n    .forEach((sample) => {\n      samples[sample.id as string] = {\n        description: sample.attributes['sample-desc'],\n        biome: (\n          sample.relationships as Record<string, { data: { id: string } }>\n        ).biome.data.id,\n      };\n    });\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (analysis) =>\n        samples?.[analysis?.relationships?.sample?.data?.id]?.biome || '',\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n    },\n    {\n      id: 'sample',\n      Header: 'Sample accession',\n      accessor: (analysis) => analysis?.relationships?.sample?.data?.id,\n      Cell: ({ cell }) => (\n        <Link to={`/samples/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'description_id',\n      Header: 'Sample description',\n      accessor: (analysis) =>\n        samples?.[analysis?.relationships?.sample?.data?.id]?.description || '',\n      Cell: ({ cell }) => unescape(cell.value),\n    },\n    {\n      id: 'assembly_id',\n      Header: ' Run / Assembly accession',\n      accessor: (analysis) => analysis?.relationships?.assembly?.data?.id || '',\n      Cell: ({ cell }) => (\n        <Link to={`/assemblies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'pipeline_id',\n      Header: 'Pipeline version',\n      accessor: (analysis) => analysis.attributes['pipeline-version'],\n      Cell: ({ cell }) => (\n        <Link to={`/pipelines/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      id: 'analysis_id',\n      Header: 'Analysis accession',\n      accessor: (analysis) => analysis.id,\n      Cell: ({ cell }) => (\n        <Link to={`/analyses/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n  ];\n  const showPagination = (data.meta?.pagination?.count || 1) > initialPageSize;\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      title=\"Analyses\"\n      initialPage={(queryParameters['analyses-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"analyses-\"\n      showPagination={showPagination}\n    />\n  );\n};\n\nexport default AnalysesTable;\n","import React from 'react';\n\ntype KeyValueProps = {\n  list: { key: string; value: string | React.ElementType }[];\n};\n\nconst KeyValueList: React.FC<KeyValueProps> = ({ list }) => (\n  <div\n    className=\"vf-grid vf-grid__col-2\"\n    style={{\n      gridTemplateColumns: '1fr 2fr',\n      rowGap: '0.5rem',\n    }}\n  >\n    {list.map(({ key, value: Value }) => (\n      <React.Fragment key={key}>\n        <div style={{ textAlign: 'right' }}>{key}:</div>\n        <div>{typeof Value === 'string' ? Value : <Value />}</div>\n      </React.Fragment>\n    ))}\n  </div>\n);\n\nexport default KeyValueList;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Box from 'components/UI/Box';\nimport KeyValueList from 'components/UI/KeyValueList';\nimport ExtLink from 'components/UI/ExtLink';\nimport { Link } from 'react-router-dom';\nimport AssociatedAnalyses from 'src/components/Analysis/Analyses';\nimport { ENA_VIEW_URL } from 'utils/urls';\n\nconst AssemblyPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`assemblies/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: assemblyData } = data as MGnifyResponseObj;\n\n  const details = [\n    {\n      key: 'Sample',\n      value: assemblyData?.relationships?.samples?.data?.length\n        ? () => (\n            <>\n              {assemblyData.relationships.samples.data.map((sample) => (\n                <Link to={`/samples/${sample.id}`} key={sample.id as string}>\n                  {sample.id}{' '}\n                </Link>\n              ))}\n            </>\n          )\n        : null,\n    },\n    {\n      key: 'Runs',\n      value: assemblyData?.relationships?.runs?.data?.length\n        ? () => (\n            <>\n              {assemblyData.relationships.runs.data.map((run) => (\n                <Link to={`/runs/${run.id}`} key={run.id as string}>\n                  {run.id}{' '}\n                </Link>\n              ))}\n            </>\n          )\n        : null,\n    },\n    {\n      key: 'ENA accession',\n      value: () => (\n        <ExtLink href={`${ENA_VIEW_URL}${assemblyData?.id}`}>\n          {assemblyData?.id}\n        </ExtLink>\n      ),\n    },\n    {\n      key: 'Legacy accession',\n      value: assemblyData.attributes['legacy-accession'] as string,\n    },\n  ].filter(({ value }) => Boolean(value));\n  return (\n    <section className=\"vf-content\">\n      <h2>Assembly: {assemblyData?.id || ''}</h2>\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <Box label=\"Description\">\n            <KeyValueList list={details} />\n          </Box>\n          <Box label=\"Associated analyses\">\n            <AssociatedAnalyses rootEndpoint=\"assemblies\" />\n          </Box>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default AssemblyPage;\n","export const ENA_VIEW_URL = 'https://www.ebi.ac.uk/ena/browser/view/';\nexport const IMG_URL =\n  ' https://img.jgi.doe.gov/cgi-bin/m/main.cgi?section=TaxonDetail&page=taxonDetail&taxon_oid=';\nexport const NCBI_ASSEMBLY_URL = 'https://www.ncbi.nlm.nih.gov/assembly/';\nexport const NCBI_SAMPLE_URL = 'https://www.ncbi.nlm.nih.gov/biosample/?term=';\nexport const NCBI_PROJECT_URL = 'https://www.ncbi.nlm.nih.gov/bioproject/';\nexport const PATRIC_URL = 'https://www.patricbrc.org/view/Genome/';\n"],"names":["rootEndpoint","accession","queryParameters","Number","data","loading","error","isStale","include","page","ordering","page_size","size","length","samples","included","filter","type","forEach","sample","id","description","attributes","biome","relationships","columns","Header","accessor","analysis","Cell","cell","className","value","style","float","to","unescape","assembly","showPagination","meta","pagination","count","cols","title","initialPage","initialPageSize","namespace","list","gridTemplateColumns","rowGap","map","key","Value","textAlign","assemblyData","details","runs","run","href","Boolean","label","ENA_VIEW_URL","IMG_URL","NCBI_ASSEMBLY_URL","NCBI_SAMPLE_URL","NCBI_PROJECT_URL","PATRIC_URL"],"sourceRoot":""}