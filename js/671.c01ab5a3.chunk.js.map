{"version":3,"sources":["webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/hooks/data/useSamplesProvider/index.tsx","webpack://mgportalv2/./src/components/Study/Overview/index.tsx","webpack://mgportalv2/./src/pages/Study/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"names":["refreshPage","window","location","reload","error","type","className","style","backgroundColor","status","onClick","tabs","map","label","to","key","pathname","render","Status","Loading","FetchError","MyMapComponent","data","ref","useRef","theMap","setTheMap","useState","sampleInfoWindow","google","maps","InfoWindow","markers","markerCluster","useEffect","tmpMap","Map","current","maxZoom","clearMarkers","newBoundary","LatLngBounds","filter","id","forEach","sample","position","lat","attributes","latitude","lng","longitude","marker","Marker","extend","addListener","setContent","open","Object","values","imagePath","fitBounds","height","study","limit","setLimit","samples","total","page","setPage","setSamples","setTotal","isStale","loading","useMGnifyData","study_accession","meta","pagination","aggregatedSamples","totalInResponse","count","links","next","length","samplesFiltered","Wrapper","apiKey","config","max","value","lineage","relationships","biomes","Date","toDateString","float","accession","parts","split","include","size","studyData","path","Overview","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineageList","x","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6"],"mappings":"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","file":"js/671.c01ab5a3.chunk.js","sourcesContent":["import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label, to }) => (\n          <li className=\"vf-tabs__item\" key={label}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ? 'is-active' : ''\n              }`}\n              to={to}\n            >\n              {label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React, { useEffect, useRef, useState, ReactElement } from 'react';\nimport { Wrapper, Status } from '@googlemaps/react-wrapper';\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport useSamplesProvider from 'hooks/data/useSamplesProvider';\nimport { ErrorTypes, MGnifyDatum } from 'hooks/data/useData';\n\nimport './style.css';\nimport config from 'config.json';\n\nconst LIMIT = 200;\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\ntype MapProps = {\n  data: Array<MGnifyDatum>;\n};\nconst MyMapComponent: React.FC<MapProps> = ({ data }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const sampleInfoWindow = new google.maps.InfoWindow();\n\n  const markers = {};\n  let markerCluster: MarkerClusterer = null;\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n      });\n      setTheMap(tmpMap);\n    }\n  }, []);\n  useEffect(() => {\n    if (theMap && data) {\n      if (markerCluster) {\n        markerCluster.clearMarkers();\n      }\n      const newBoundary = new google.maps.LatLngBounds();\n\n      data\n        .filter(({ id }) => !(id in markers))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n          });\n          newBoundary.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.setContent(\n              // TODO: ⚠️ get the content of the Info window\n              'new SamplePopUpView(sample).render().el'\n            );\n            sampleInfoWindow.open(theMap, marker);\n          });\n          markers[sample.id] = marker;\n        });\n      markerCluster = new MarkerClusterer(theMap, Object.values(markers), {\n        imagePath:\n          'https://googlemaps.github.io/js-markerclustererplus/images/m',\n        maxZoom: 18,\n      });\n      // TODO: ⚠️ for clusters in MAX Zoom and with less than 10 elements show a list\n      theMap.fitBounds(newBoundary);\n    }\n  }, [theMap, data]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\ntype SamplesMapProps = {\n  study: string;\n};\nconst SamplesMap: React.FC<SamplesMapProps> = ({ study }) => {\n  const [limit, setLimit] = useState(LIMIT);\n  const { samples, total } = useSamplesProvider(study, limit);\n  const samplesFiltered = samples.filter((sample) => {\n    if (\n      sample.attributes &&\n      'longitude' in sample.attributes &&\n      'latitude' in sample.attributes\n    ) {\n      return (\n        sample.attributes.longitude !== 0.0 &&\n        sample.attributes.latitude !== 0.0\n      );\n    }\n    return false;\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <MyMapComponent data={samplesFiltered} />\n        </Wrapper>\n      </div>\n      {total && (\n        <div className=\"mg-map-progress\">\n          <progress max={total} value={samplesFiltered.length} />\n          {total > limit && (\n            <div>\n              We are only loading the first {LIMIT} samples. Click{' '}\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--link mg-button-as-link\"\n                onClick={() => setLimit(total)}\n              >\n                HERE\n              </button>{' '}\n              to load them all.\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SamplesMap;\n","import { useState, useEffect } from 'react';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, ErrorFromFetch } from 'hooks/data/useData';\n\ntype SampleProviderResponse = {\n  samples: MGnifyDatum[];\n  total: number | null;\n  loading: boolean;\n  error: ErrorFromFetch;\n};\nconst useSamplesProvider = (\n  study: string,\n  limit?: number\n): SampleProviderResponse => {\n  const [page, setPage] = useState(1);\n  const [samples, setSamples] = useState<MGnifyDatum[]>([]);\n  const [total, setTotal] = useState(null);\n  const { data, isStale, loading, error } = useMGnifyData('samples', {\n    study_accession: study,\n    page,\n  });\n  useEffect(() => {\n    if (data?.data && !isStale && page === data?.meta?.pagination?.page) {\n      const aggregatedSamples = [...samples, ...(data.data as MGnifyDatum[])];\n      setSamples(aggregatedSamples);\n      const totalInResponse = data?.meta?.pagination?.count;\n      if (total !== totalInResponse && typeof totalInResponse === 'number') {\n        setTotal(totalInResponse);\n      }\n      if (data?.links?.next && aggregatedSamples.length < limit) {\n        setPage(page + 1);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, page, limit]);\n  useEffect(() => {\n    if (data?.links?.next && samples.length < limit) {\n      setPage(page + 1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [limit]);\n\n  return { samples, total, loading, error };\n};\n\nexport default useSamplesProvider;\n","import React from 'react';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMap from 'src/components/UI/SamplesMap';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype StudyOverviewProps = {\n  data: MGnifyDatum;\n};\nconst StudyOverview: React.FC<StudyOverviewProps> = ({ data }) => {\n  const lineage = data.relationships.biomes.data[0].id;\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <div className=\"vf-box vf-box--easy vf-box-theme--primary\">\n            <h5 className=\"vf-box__heading\">Classification</h5>\n            <p className=\"vf-box__text\">\n              <span\n                className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n                style={{ float: 'initial' }}\n              />\n              {lineage}\n            </p>\n          </div>\n          <div className=\"vf-box vf-box--easy vf-box-theme--primary\">\n            <h5 className=\"vf-box__heading\">Description</h5>\n            <p className=\"vf-box__text\">{data.attributes['study-abstract']}</p>\n          </div>\n        </div>\n        <SamplesMap study={data.id} />\n      </div>\n      <div className=\"vf-box vf-box--easy vf-box-theme--primary\">\n        <h5 className=\"vf-box__heading\">Related studies</h5>\n        <p className=\"vf-box__text\" />\n      </div>\n    </section>\n  );\n};\n\nexport default StudyOverview;\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Study/Overview';\n\nconst tabs = [\n  { label: 'Overview', to: '/overview' },\n  { label: 'Analysis summary', to: '/analysis' },\n];\n\nconst StudyPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`studies/${accession}`, {\n    include: 'publications',\n  });\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const studyData = (data as MGnifyResponseObj).data;\n  return (\n    <section className=\"vf-content\">\n      <h2>Study {accession}</h2>\n      <h3>{studyData.attributes['study-name']}</h3>\n      <HashRouter>\n        <Tabs tabs={tabs} />\n        <section className=\"vf-grid\">\n          <div className=\"vf-stack vf-stack--200\">\n            <Switch>\n              <Route path=\"/overview\">\n                <Overview data={studyData} />\n              </Route>\n              <Route path=\"/analysis\">\n                <div>analysis</div>\n              </Route>\n            </Switch>\n          </div>\n        </section>\n      </HashRouter>\n    </section>\n  );\n};\n\nexport default StudyPage;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  const parts = location.pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"sourceRoot":""}