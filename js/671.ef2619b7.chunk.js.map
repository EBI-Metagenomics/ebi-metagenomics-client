{"version":3,"sources":["webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/hooks/data/useSamplesProvider/index.tsx","webpack://mgportalv2/./src/components/Study/Overview/index.tsx","webpack://mgportalv2/./src/pages/Study/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"names":["refreshPage","window","location","reload","error","type","className","style","backgroundColor","status","onClick","tabs","map","label","to","key","pathname","render","Status","Loading","FetchError","MarkerPopup","sample","href","id","attributes","ClusterMarkerPopup","accessions","accession","ref","MyMapComponent","data","useRef","theMap","setTheMap","useState","markerCluster","sampleInfoWindow","google","maps","InfoWindow","clusterInfoWindow","newBoundary","LatLngBounds","markers","useEffect","tmpMap","Map","current","maxZoom","minZoom","clearMarkers","filter","forEach","position","lat","latitude","lng","longitude","marker","Marker","title","extend","addListener","setContent","open","Object","values","imagePath","event","cluster","this","prevZoom_","getMaxZoom","getSize","setPosition","getCenter","getMarkers","m","getTitle","fitBounds","height","study","limit","setLimit","samples","total","page","setPage","setSamples","setTotal","isStale","loading","useMGnifyData","study_accession","meta","pagination","aggregatedSamples","totalInResponse","count","links","next","length","samplesFiltered","Wrapper","apiKey","config","max","value","lineage","relationships","biomes","Date","toDateString","float","parts","split","include","size","studyData","path","Overview","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineageList","x","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6"],"mappings":"gJAGA,MAAMA,EAAc,KAClBC,OAAOC,SAASC,UAqClB,EAlCwD,EAAGC,WACpDA,GAASA,EAAMC,OAAS,aAE3B,uBACEC,UAAU,4CACVC,MAAO,CACLC,gBAAiB,iBAGnB,sBAAIF,UAAU,mBACZ,wBAAMA,UAAU,+C,wBAGlB,qBAAGA,UAAU,iBACVF,aAAK,EAALA,EAAOC,QAAS,iBACf,0CAA0CD,EAAMA,UACjDA,aAAK,EAALA,EAAOC,QAAS,YACf,oDAAoDD,EAAMK,YAC3DL,aAAK,EAALA,EAAOC,QAAS,gBACf,6DAA6DD,EAAMA,WAEvE,uBAAKE,UAAU,YACb,0BACED,KAAK,SACLC,UAAU,+CACVI,QAASV,GAAW,aAxB4B,M,6HCLnD,MA+BP,EAvBkC,EAAGW,WACnC,MAAMT,GAAW,UAEjB,OACE,uBAAKI,UAAU,0BACb,sBAAIA,UAAU,iBACXK,EAAKC,KAAI,EAAGC,QAAOC,QAClB,sBAAIR,UAAU,gBAAgBS,IAAKF,GACjC,gBAAC,KAAI,CACHP,UAAW,kBACTQ,IAAOZ,EAASc,SAAW,YAAc,IAE3CF,GAAIA,GAEHD,S,yDCVf,MAEMI,EAAUR,GACVA,IAAW,EAAAS,OAAA,QAAuB,gBAACC,EAAA,EAAO,MAC1CV,IAAW,EAAAS,OAAA,QAEX,gBAACE,EAAA,EAAU,CACThB,MAAO,CACLK,OAAQ,IACRJ,KAAM,gBACND,MAAOK,KAIR,KAIHY,EAAiD,EAAGC,YACxD,uBAAKhB,UAAU,uBACb,sBAAIA,UAAU,mBACZ,qBAAGiB,KAAM,cAAcD,EAAOE,MAAOF,EAAOE,KAG9C,qBAAGlB,UAAU,gBAAgBgB,EAAOG,WAAW,iBAG7CC,EAAyD,EAC7DC,gBAEA,uBAAKrB,UAAU,uBACb,sBAAIA,UAAU,mBAAiB,yCAC/B,sBAAIA,UAAU,WACXqB,EAAWf,KAAKgB,GACf,sBAAIC,IAAKD,GACP,qBAAGL,KAAM,cAAcK,KAAcA,QAUzCE,EAAqC,EAAGC,WAC5C,MAAMF,GAAM,IAAAG,WACLC,EAAQC,IAAa,IAAAC,UAAS,MAC/BC,GAAgB,IAAAJ,QAAwB,MACxCK,GAAmB,IAAAL,QAAO,IAAIM,OAAOC,KAAKC,YAC1CC,GAAoB,IAAAT,QAAO,IAAIM,OAAOC,KAAKC,YAC3CE,GAAc,IAAAV,QAAO,IAAIM,OAAOC,KAAKI,cAErCC,GAAU,IAAAZ,QAAO,IA8EvB,OA5EA,IAAAa,YAAU,KACR,GAAe,OAAXZ,EAAiB,CACnB,MAAMa,EAAS,IAAIR,OAAOC,KAAKQ,IAAIlB,EAAImB,QAAS,CAC9CC,QAAS,GACTC,QAAS,IAEXhB,EAAUY,MAEX,CAACb,KACJ,IAAAY,YAAU,KACJZ,GAAUF,IACRK,EAAcY,SAChBZ,EAAcY,QAAQG,eAGxBpB,EACGqB,QAAO,EAAG5B,UAAWA,KAAMoB,EAAQI,WACnCK,SAAS/B,IACR,MAAMgC,EAAW,CACfC,IAAKjC,EAAOG,WAAW+B,SACvBC,IAAKnC,EAAOG,WAAWiC,WAEnBC,EAAS,IAAIrB,OAAOC,KAAKqB,OAAO,CACpCN,WACAO,MAAOvC,EAAOE,KAEhBkB,EAAYM,QAAQc,OAAOR,GAC3BK,EAAOI,YAAY,SAAS,KAC1B1B,EAAiBW,QAAQgB,WACvB,iBAA8B,gBAAC3C,EAAW,CAACC,OAAQA,MAErDe,EAAiBW,QAAQiB,KAAKhC,EAAQ0B,MAExCf,EAAQI,QAAQ1B,EAAOE,IAAMmC,KAEjCvB,EAAcY,QAAU,IAAI,IAC1Bf,EACAiC,OAAOC,OAAOvB,EAAQI,SACtB,CACEoB,UACE,+DACFnB,QAAS,KAKbX,OAAOC,KAAK8B,MAAMN,YAChB3B,EAAcY,QACd,SAEA,SAAUsB,GAGNC,KAAKC,UAAY,GAAKD,KAAKE,cAC3BH,EAAQI,WAAa,KAIvBjC,EAAkBO,QAAQ2B,YAAYL,EAAQM,aAE9CnC,EAAkBO,QAAQgB,WACxB,iBACE,gBAACtC,EAAkB,CACjBC,WAAY2C,EAAQO,aAAajE,KAAKkE,GAAMA,EAAEC,iBAKpDtC,EAAkBO,QAAQiB,KAAKhC,OAInCA,EAAO+C,UAAUtC,EAAYM,YAE9B,CAACf,EAAQF,IAEL,uBAAKF,IAAKA,EAAKL,GAAG,MAAMjB,MAAO,CAAE0E,OAAQ,WA0DlD,EApD8C,EAAGC,YAC/C,MAAOC,EAAOC,IAAY,IAAAjD,UA1Id,MA2IN,QAAEkD,EAAO,MAAEC,GChJQ,EACzBJ,EACAC,KAEA,MAAOI,EAAMC,IAAW,IAAArD,UAAS,IAC1BkD,EAASI,IAAc,IAAAtD,UAAwB,KAC/CmD,EAAOI,IAAY,IAAAvD,UAAS,OAC7B,KAAEJ,EAAI,QAAE4D,EAAO,QAAEC,EAAO,MAAExF,IAAU,EAAAyF,EAAA,GAAc,UAAW,CACjEC,gBAAiBZ,EACjBK,SAuBF,OArBA,IAAA1C,YAAU,K,cACR,IAAId,aAAI,EAAJA,EAAMA,QAAS4D,GAAWJ,KAA+B,QAAtB,EAAU,QAAV,EAAAxD,aAAI,EAAJA,EAAMgE,YAAI,eAAEC,kBAAU,eAAET,MAAM,CACnE,MAAMU,EAAoB,IAAIZ,KAAatD,EAAKA,MAChD0D,EAAWQ,GACX,MAAMC,EAAwC,QAAtB,EAAU,QAAV,EAAAnE,aAAI,EAAJA,EAAMgE,YAAI,eAAEC,kBAAU,eAAEG,MAC5Cb,IAAUY,GAA8C,iBAApBA,GACtCR,EAASQ,IAEI,QAAX,EAAAnE,aAAI,EAAJA,EAAMqE,aAAK,eAAEC,OAAQJ,EAAkBK,OAASnB,GAClDK,EAAQD,EAAO,MAIlB,CAACxD,EAAMwD,EAAMJ,KAChB,IAAAtC,YAAU,K,OACO,QAAX,EAAAd,aAAI,EAAJA,EAAMqE,aAAK,eAAEC,OAAQhB,EAAQiB,OAASnB,GACxCK,EAAQD,EAAO,KAGhB,CAACJ,IAEG,CAAEE,UAASC,QAAOM,UAASxF,UDgHP,CAAmB8E,EAAOC,GAC/CoB,EAAkBlB,EAAQjC,QAAQ9B,MAEpCA,EAAOG,YACP,cAAeH,EAAOG,YACtB,aAAcH,EAAOG,aAGa,IAAhCH,EAAOG,WAAWiC,WACa,IAA/BpC,EAAOG,WAAW+B,WAMxB,OACE,uBAAKlD,UAAU,oBACb,uBAAKA,UAAU,kBACb,gBAAC,EAAAkG,QAAO,CAACC,OAAQC,EAAA,GAAsBzF,OAAQA,GAC7C,gBAACa,EAAc,CAACC,KAAMwE,MAGzBjB,GACC,uBAAKhF,UAAU,mBACb,4BAAUqG,IAAKrB,EAAOsB,MAAOvB,EAAQiB,SACpChB,EAAQH,GACP,2B,oCArKE,I,kBAsKwD,IACxD,0BACE9E,KAAK,SACLC,UAAU,8CACVI,QAAS,IAAM0E,EAASE,IAAM,QAGtB,I,qBAIc,IAA3BiB,EAAgBD,QACf,2B,kBACkBhB,EAAQH,EAAQ,SAAW,G,4DE1LzD,MAqCA,EArCoD,EAAGpD,W,MACrD,MAAM8E,EAAU9E,EAAK+E,cAAcC,OAAOhF,KAAK,GAAGP,GAClD,OACE,+BACE,uBAAKlB,UAAU,WACb,2BACE,0B,gBACgB,IACb,IAAI0G,KACa,QAAhB,EAAAjF,aAAI,EAAJA,EAAMN,kBAAU,eAAG,gBACnBwF,gBAEJ,uBAAK3G,UAAU,6CACb,sBAAIA,UAAU,mBAAiB,kBAC/B,qBAAGA,UAAU,gBACX,wBACEA,UAAW,uBAAsB,OAAauG,KAC9CtG,MAAO,CAAE2G,MAAO,aAEjBL,IAGL,uBAAKvG,UAAU,6CACb,sBAAIA,UAAU,mBAAiB,eAC/B,qBAAGA,UAAU,gBAAgByB,EAAKN,WAAW,qBAGjD,gBAAC,EAAU,CAACyD,MAAOnD,EAAKP,MAE1B,uBAAKlB,UAAU,6CACb,sBAAIA,UAAU,mBAAiB,mBAC/B,qBAAGA,UAAU,oBC5BfK,EAAO,CACX,CAAEE,MAAO,WAAYC,GAAI,aACzB,CAAED,MAAO,mBAAoBC,GAAI,cAmCnC,EAhC4B,KAC1B,MAAMc,ECfgB,MACtB,MACMuF,GADW,UACMnG,SAASoG,MAAM,KACtC,OAAOD,aAAK,EAALA,EAAQA,EAAMb,OAAS,IDYZ,IACZ,KAAEvE,EAAI,QAAE6D,EAAO,MAAExF,IAAU,EAAAyF,EAAA,GAAc,WAAWjE,IAAa,CACrEyF,QAAS,iBAEX,GAAIzB,EAAS,OAAO,gBAACzE,EAAA,EAAO,CAACmG,KAAK,UAClC,GAAIlH,EAAO,OAAO,gBAACgB,EAAA,EAAU,CAAChB,MAAOA,IACrC,IAAK2B,EAAM,OAAO,gBAACZ,EAAA,EAAO,MAC1B,MAAMoG,EAAaxF,EAA2BA,KAC9C,OACE,2BAASzB,UAAU,cACjB,0B,SAAWsB,GACX,0BAAK2F,EAAU9F,WAAW,eAC1B,gBAAC,KAAU,KACT,gBAAC,EAAI,CAACd,KAAMA,IACZ,2BAASL,UAAU,WACjB,uBAAKA,UAAU,0BACb,gBAAC,KAAM,KACL,gBAAC,KAAK,CAACkH,KAAK,aACV,gBAACC,EAAQ,CAAC1F,KAAMwF,KAElB,gBAAC,KAAK,CAACC,KAAK,aACV,+C,6CEtChB,MAAME,EAAiB,CACrB,kBAAmB,gBAEfC,EAAiB,CACrB,6BAA8B,eAC9B,yBAA0B,QAC1B,gCAAiC,cACjC,kCAAmC,eACnC,4BAA6B,SAC7B,6BAA8B,eAC9B,+BAAgC,WAChC,+BAAgC,YAChC,gCAAiC,aACjC,8BAA+B,eAC/B,gCAAiC,cAE7BC,EAAiB,CACrB,wCAAyC,eACzC,oCAAqC,WACrC,6CAA8C,cAC9C,sCAAuC,SACvC,0CAA2C,YAC3C,8CAA+C,cAC/C,kCAAmC,UAG/BC,EAAiB,CACrB,uDAAwD,mBACxD,oDAAqD,gBACrD,4CAA6C,QAC7C,6CAA8C,SAC9C,8CAA+C,UAC/C,uDACE,uBACF,+CAAgD,aAChD,mDAAoD,UACpD,iEAAkE,SAClE,oDAAqD,WAGjDC,EAAiB,CACrB,+DAAgE,SAChE,oDAAqD,YACrD,iDAAkD,cAClD,uDAAwD,WACxD,kDAAmD,YAM9C,SAASC,EAAalB,GAC3B,MAAMmB,GAAenB,GAAW,IAAIO,MAAM,KAAKxG,KAAKqH,GAAMA,EAAEC,gBAEtDC,EAAYH,EAAYI,MAAM,EAAG,GAAGC,KAAK,KACzCC,EAAYN,EAAYI,MAAM,EAAG,GAAGC,KAAK,KACzCE,EAAYP,EAAYI,MAAM,EAAG,GAAGC,KAAK,KACzCG,EAAYR,EAAYI,MAAM,EAAG,GAAGC,KAAK,KACzCI,EAAYT,EAAYI,MAAM,EAAG,GAAGC,KAAK,KAS/C,OANEP,EAAeW,IACfZ,EAAeW,IACfZ,EAAeW,IACfZ,EAAeW,IACfZ,EAAeS,IACf","file":"js/671.ef2619b7.chunk.js","sourcesContent":["import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label, to }) => (\n          <li className=\"vf-tabs__item\" key={label}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ? 'is-active' : ''\n              }`}\n              to={to}\n            >\n              {label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React, { useEffect, useRef, useState, ReactElement } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n// import { Link } from 'react-router-dom';\n\nimport { Wrapper, Status } from '@googlemaps/react-wrapper';\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport useSamplesProvider from 'hooks/data/useSamplesProvider';\nimport { ErrorTypes, MGnifyDatum } from 'hooks/data/useData';\n\nimport './style.css';\nimport config from 'config.json';\n\nconst LIMIT = 200;\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\n// TODO: make the link play nicer with react-router\nconst MarkerPopup: React.FC<{ sample: MGnifyDatum }> = ({ sample }) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">\n      <a href={`../samples/${sample.id}`}>{sample.id}</a>\n      {/* <Link to=\"/search/studies\">{sample.id}</Link> */}\n    </h3>\n    <p className=\"vf-box__text\">{sample.attributes['sample-desc']}</p>\n  </div>\n);\nconst ClusterMarkerPopup: React.FC<{ accessions: string[] }> = ({\n  accessions,\n}) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">Samples on this geographical location</h3>\n    <ul className=\"vf-list\">\n      {accessions.map((accession) => (\n        <li ref={accession}>\n          <a href={`../samples/${accession}`}>{accession}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ntype MapProps = {\n  data: Array<MGnifyDatum>;\n};\nconst MyMapComponent: React.FC<MapProps> = ({ data }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const markerCluster = useRef<MarkerClusterer>(null);\n  const sampleInfoWindow = useRef(new google.maps.InfoWindow());\n  const clusterInfoWindow = useRef(new google.maps.InfoWindow());\n  const newBoundary = useRef(new google.maps.LatLngBounds());\n\n  const markers = useRef({});\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n        minZoom: 2,\n      });\n      setTheMap(tmpMap);\n    }\n  }, [theMap]);\n  useEffect(() => {\n    if (theMap && data) {\n      if (markerCluster.current) {\n        markerCluster.current.clearMarkers();\n      }\n\n      data\n        .filter(({ id }) => !(id in markers.current))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n            title: sample.id,\n          });\n          newBoundary.current.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.current.setContent(\n              ReactDOMServer.renderToString(<MarkerPopup sample={sample} />)\n            );\n            sampleInfoWindow.current.open(theMap, marker);\n          });\n          markers.current[sample.id] = marker;\n        });\n      markerCluster.current = new MarkerClusterer(\n        theMap,\n        Object.values(markers.current),\n        {\n          imagePath:\n            'https://googlemaps.github.io/js-markerclustererplus/images/m',\n          maxZoom: 10,\n        }\n      );\n\n      // for clusters in MAX Zoom and with less than 10 elements show a list\n      google.maps.event.addListener(\n        markerCluster.current,\n        'click',\n        // eslint-disable-next-line func-names\n        function (cluster) {\n          if (\n            // eslint-disable-next-line no-underscore-dangle, react/no-this-in-sfc\n            this.prevZoom_ + 1 <= this.getMaxZoom() ||\n            cluster.getSize() >= 10\n          ) {\n            return;\n          }\n          clusterInfoWindow.current.setPosition(cluster.getCenter());\n\n          clusterInfoWindow.current.setContent(\n            ReactDOMServer.renderToString(\n              <ClusterMarkerPopup\n                accessions={cluster.getMarkers().map((m) => m.getTitle())}\n              />\n            )\n          );\n\n          clusterInfoWindow.current.open(theMap);\n        }\n      );\n\n      theMap.fitBounds(newBoundary.current);\n    }\n  }, [theMap, data]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\ntype SamplesMapProps = {\n  study: string;\n};\nconst SamplesMap: React.FC<SamplesMapProps> = ({ study }) => {\n  const [limit, setLimit] = useState(LIMIT);\n  const { samples, total } = useSamplesProvider(study, limit);\n  const samplesFiltered = samples.filter((sample) => {\n    if (\n      sample.attributes &&\n      'longitude' in sample.attributes &&\n      'latitude' in sample.attributes\n    ) {\n      return (\n        sample.attributes.longitude !== 0.0 &&\n        sample.attributes.latitude !== 0.0\n      );\n    }\n    return false;\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <MyMapComponent data={samplesFiltered} />\n        </Wrapper>\n      </div>\n      {total && (\n        <div className=\"mg-map-progress\">\n          <progress max={total} value={samples.length} />\n          {total > limit && (\n            <div>\n              ⚠️ We are only loading the first {LIMIT} samples. Click{' '}\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--link mg-button-as-link\"\n                onClick={() => setLimit(total)}\n              >\n                HERE\n              </button>{' '}\n              to load them all.\n            </div>\n          )}\n          {samplesFiltered.length === 0 && (\n            <div>\n              ⚠️ None of the {total > limit ? 'loaded' : ''} samples have\n              geolocation co-ordinates.\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SamplesMap;\n","import { useState, useEffect } from 'react';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, ErrorFromFetch } from 'hooks/data/useData';\n\ntype SampleProviderResponse = {\n  samples: MGnifyDatum[];\n  total: number | null;\n  loading: boolean;\n  error: ErrorFromFetch;\n};\nconst useSamplesProvider = (\n  study: string,\n  limit?: number\n): SampleProviderResponse => {\n  const [page, setPage] = useState(1);\n  const [samples, setSamples] = useState<MGnifyDatum[]>([]);\n  const [total, setTotal] = useState(null);\n  const { data, isStale, loading, error } = useMGnifyData('samples', {\n    study_accession: study,\n    page,\n  });\n  useEffect(() => {\n    if (data?.data && !isStale && page === data?.meta?.pagination?.page) {\n      const aggregatedSamples = [...samples, ...(data.data as MGnifyDatum[])];\n      setSamples(aggregatedSamples);\n      const totalInResponse = data?.meta?.pagination?.count;\n      if (total !== totalInResponse && typeof totalInResponse === 'number') {\n        setTotal(totalInResponse);\n      }\n      if (data?.links?.next && aggregatedSamples.length < limit) {\n        setPage(page + 1);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, page, limit]);\n  useEffect(() => {\n    if (data?.links?.next && samples.length < limit) {\n      setPage(page + 1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [limit]);\n\n  return { samples, total, loading, error };\n};\n\nexport default useSamplesProvider;\n","import React from 'react';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMap from 'src/components/UI/SamplesMap';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype StudyOverviewProps = {\n  data: MGnifyDatum;\n};\nconst StudyOverview: React.FC<StudyOverviewProps> = ({ data }) => {\n  const lineage = data.relationships.biomes.data[0].id;\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <div className=\"vf-box vf-box--easy vf-box-theme--primary\">\n            <h5 className=\"vf-box__heading\">Classification</h5>\n            <p className=\"vf-box__text\">\n              <span\n                className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n                style={{ float: 'initial' }}\n              />\n              {lineage}\n            </p>\n          </div>\n          <div className=\"vf-box vf-box--easy vf-box-theme--primary\">\n            <h5 className=\"vf-box__heading\">Description</h5>\n            <p className=\"vf-box__text\">{data.attributes['study-abstract']}</p>\n          </div>\n        </div>\n        <SamplesMap study={data.id} />\n      </div>\n      <div className=\"vf-box vf-box--easy vf-box-theme--primary\">\n        <h5 className=\"vf-box__heading\">Related studies</h5>\n        <p className=\"vf-box__text\" />\n      </div>\n    </section>\n  );\n};\n\nexport default StudyOverview;\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Study/Overview';\n\nconst tabs = [\n  { label: 'Overview', to: '/overview' },\n  { label: 'Analysis summary', to: '/analysis' },\n];\n\nconst StudyPage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`studies/${accession}`, {\n    include: 'publications',\n  });\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const studyData = (data as MGnifyResponseObj).data;\n  return (\n    <section className=\"vf-content\">\n      <h2>Study {accession}</h2>\n      <h3>{studyData.attributes['study-name']}</h3>\n      <HashRouter>\n        <Tabs tabs={tabs} />\n        <section className=\"vf-grid\">\n          <div className=\"vf-stack vf-stack--200\">\n            <Switch>\n              <Route path=\"/overview\">\n                <Overview data={studyData} />\n              </Route>\n              <Route path=\"/analysis\">\n                <div>analysis</div>\n              </Route>\n            </Switch>\n          </div>\n        </section>\n      </HashRouter>\n    </section>\n  );\n};\n\nexport default StudyPage;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  const parts = location.pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"sourceRoot":""}