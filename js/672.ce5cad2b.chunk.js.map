{"version":3,"file":"js/672.ce5cad2b.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Publications/index.tsx","webpack://mgportalv2/./src/components/UI/ArrowForLink/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/OutterCard/index.tsx","webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/hooks/data/useEBISearchData/index.tsx","webpack://mgportalv2/./src/components/UI/InnerCard/index.tsx","webpack://mgportalv2/./src/components/Home/SearchBy/DataType/index.tsx","webpack://mgportalv2/./src/components/Home/SearchBy/Biomes/index.tsx","webpack://mgportalv2/./src/components/Home/SearchBy/index.tsx","webpack://mgportalv2/./src/components/Home/Request/LatestStudies/index.tsx","webpack://mgportalv2/./src/components/Home/Request/index.tsx","webpack://mgportalv2/./src/hooks/data/useBlogData/index.tsx","webpack://mgportalv2/./src/components/Home/BlogExcerpts/index.tsx","webpack://mgportalv2/./src/pages/Home/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React, { ReactChild, ReactChildren, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport CoverImage from 'images/cover_main_publication.gif';\nimport publications from './publications.json';\n\nimport './style.css';\n\nconst trimAuthors = (text: string, maxAuthorsLength: number): string => {\n  const authorList = text.slice(0, maxAuthorsLength).split(',');\n  authorList.pop();\n  authorList.push(' et al.');\n  return authorList.join(',');\n};\n\nexport const Publication: React.FC<{\n  id?: string;\n  title: string;\n  journal: string;\n  year: number;\n  link: string;\n  doi: string;\n  authors: string;\n  maxAuthorsLength?: number;\n  children?: ReactChild | ReactChildren;\n}> = ({\n  id,\n  title,\n  journal,\n  year,\n  link,\n  doi,\n  authors,\n  maxAuthorsLength,\n  children,\n}) => {\n  const trimmedAuthors =\n    maxAuthorsLength && authors.length > maxAuthorsLength\n      ? trimAuthors(authors, maxAuthorsLength)\n      : authors;\n  const titleLink = id ? (\n    <Link to={`/publications/${id}`}>{title}</Link>\n  ) : (\n    <a href={link}>{title}</a>\n  );\n  return (\n    <section className=\"mg-pub\">\n      <span className=\"mg-pub-title\">{titleLink}</span>{' '}\n      <span className=\"mg-pub-journal\">{journal}</span> (\n      <span className=\"mg-pub-year\">{year}</span>){' '}\n      <span className=\"mg-pub-doi\">\n        doi:\n        <a title={title} href={link} className=\"mg-ext\">\n          {doi}\n        </a>\n      </span>\n      <div className=\"mg-pub-authors\">{trimmedAuthors}.</div>\n      {children}\n    </section>\n  );\n};\nexport const MainPublication: React.FC = () => {\n  const publication = publications.filter((pub) => pub.main)?.[0];\n  return (\n    <div className=\"embl-grid | vf-content\">\n      <div className=\"vf-section-header mg-pub-section-header\">\n        <img\n          alt=\"Cover of the journal\"\n          src={CoverImage}\n          className=\"mg-pub-cover\"\n        />\n      </div>\n      <div>\n        <p>To cite MGnify, please refer to the following publication:</p>\n        {publication && (\n          <Publication\n            id={publication.id}\n            title={publication.title}\n            journal={publication.journal}\n            year={publication.year}\n            link={publication.link}\n            doi={publication.doi}\n            authors={publication.authors}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\nconst Publications: React.FC = () => {\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <section className=\"mg-pub-section\">\n      {publications\n        .filter((pub) => showMore || pub.recent)\n        .map((pub) => (\n          <article key={pub.doi}>\n            <Publication\n              id={pub.id}\n              title={pub.title}\n              journal={pub.journal}\n              year={pub.year}\n              link={pub.link}\n              doi={pub.doi}\n              authors={pub.authors}\n            />\n          </article>\n        ))}\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--sm\"\n          onClick={() => setShowMore(!showMore)}\n        >\n          {showMore ? 'Less' : 'More'} publications\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Publications;\n","/* eslint-disable max-len */\nimport React from 'react';\n\nconst ArrowForLink: React.FC = () => (\n  <svg\n    aria-hidden=\"true\"\n    className=\"vf-card__heading__icon | vf-icon vf-icon-arrow--inline-end\"\n    width=\"1em\"\n    height=\"1em\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    preserveAspectRatio=\"none\"\n  >\n    <path\n      d=\"M0 12c0 6.627 5.373 12 12 12s12-5.373 12-12S18.627 0 12 0C5.376.008.008 5.376 0 12zm13.707-5.209l4.5 4.5a1 1 0 010 1.414l-4.5 4.5a1 1 0 01-1.414-1.414l2.366-2.367a.25.25 0 00-.177-.424H6a1 1 0 010-2h8.482a.25.25 0 00.177-.427l-2.366-2.368a1 1 0 011.414-1.414z\"\n      fill=\"currentColor\"\n      fillRule=\"nonzero\"\n    />\n  </svg>\n);\n\nexport default ArrowForLink;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React from 'react';\n\nconst OutterCard: React.FC<{\n  className?: string;\n  image?: string;\n  imageAltText?: string;\n}> = ({ children, className = '', image = null, imageAltText = '' }) => {\n  return (\n    <article\n      className={`vf-card vf-card--brand vf-card--bordered ${className}`}\n    >\n      {image && (\n        <img\n          src={image}\n          alt={imageAltText}\n          className=\"vf-card__image\"\n          loading=\"lazy\"\n        />\n      )}\n      <div className=\"vf-card__content | vf-stack vf-stack--400\">\n        {children}\n      </div>\n    </article>\n  );\n};\n\nexport default OutterCard;\n","import React from 'react';\n\nconst TruncatedText: React.FC<{ maxLength?: number; text: string }> = ({\n  text,\n  maxLength = 250,\n}) => (\n  <>\n    {text.substring(0, maxLength)}\n    {text.length >= maxLength && '...'}\n  </>\n);\n\nexport default TruncatedText;\n","import { useContext } from 'react';\nimport useData, { DataResponse, KeyValue } from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\ninterface EBIDataResponse extends DataResponse {\n  data: KeyValue;\n}\n\nconst useEBISearchData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => EBIDataResponse = (endpoint, parameters = {}) => {\n  const { config } = useContext(UserContext);\n  const defaultParameters = {\n    format: 'json',\n    start: 0,\n  };\n  const allParemeters = { ...defaultParameters, ...parameters };\n  const url = `${config.ebisearch}${endpoint}?${Object.entries(allParemeters)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')}`;\n  const data = useData([null, undefined].includes(endpoint) ? null : url);\n  return data as EBIDataResponse;\n};\n\nexport default useEBISearchData;\n","import React from 'react';\nimport ArrowForLink from 'components/UI/ArrowForLink';\nimport { Link } from 'react-router-dom';\n\ntype InnerCardProps = {\n  title: string;\n  label: string;\n  to: string;\n  image?: string;\n  imageAltText?: string;\n  externalLink?: boolean;\n};\n\nconst InnerCard: React.FC<InnerCardProps> = ({\n  title,\n  label,\n  to,\n  image,\n  imageAltText,\n  externalLink = false,\n}) => {\n  return (\n    <article className=\"vf-card vf-card--striped vf-card--bordered\">\n      {image && (\n        <img\n          src={image}\n          alt={imageAltText}\n          className=\"vf-card__image\"\n          loading=\"lazy\"\n        />\n      )}\n      <div className=\"vf-card__content | vf-stack vf-stack--400\">\n        <h3 className=\"vf-card__heading\">\n          {externalLink ? (\n            <a className=\"vf-card__link\" href={to}>\n              {title} <ArrowForLink />\n            </a>\n          ) : (\n            <Link className=\"vf-card__link\" to={to}>\n              {title} <ArrowForLink />\n            </Link>\n          )}\n        </h3>\n        <p className=\"vf-card__text\">{label}</p>\n      </div>\n    </article>\n  );\n};\n\nexport default InnerCard;\n","import React, { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport Loading from 'components/UI/Loading';\nimport useEBISearchData from 'hooks/data/useEBISearchData';\nimport FetchError from 'components/UI/FetchError';\nimport './style.css';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\n\nconst DataAnalysesTypeRow: React.FC<{\n  type: string;\n  label: string;\n  link: string;\n}> = ({ type, label, link }) => {\n  const { data, loading, error } = useEBISearchData('metagenomics_analyses', {\n    query: 'domain_source:metagenomics_analyses',\n    size: 0,\n    fields: 'id,name,description,biome_name,metagenomics_samples',\n    facetcount: 0,\n    facetsdepth: 5,\n    facets: `experiment_type:${type}`,\n  });\n  if (loading)\n    return (\n      <tr>\n        <td>\n          <Loading size=\"small\" />\n        </td>\n      </tr>\n    );\n  if (error) return <FetchError error={error} />;\n  return (\n    <tr className=\"vf-table__row\">\n      <td className=\"vf-table__cell\" style={{ textAlign: 'right' }}>\n        <Link to={link} className=\"mg-link\">\n          {data?.hitCount || '...'}\n        </Link>\n      </td>\n      <td className=\"vf-table__cell\">\n        <Link to={link} className=\"mg-link\">\n          {label}\n        </Link>\n      </td>\n    </tr>\n  );\n};\nconst DataTypeRow: React.FC<{\n  label: string;\n  endpoint: string;\n  link: string;\n}> = ({ label, endpoint, link }) => {\n  const { data, loading, error } = useEBISearchData(endpoint, {\n    query: `domain_source:${endpoint}`,\n    size: 0,\n    fields: 'id,name,description,biome_name,metagenomics_samples',\n    facetcount: 0,\n    facetsdepth: 5,\n  });\n  if (error) return <FetchError error={error} />;\n  return (\n    <tr className=\"vf-table__row\">\n      <td className=\"vf-table__cell\" style={{ textAlign: 'right' }}>\n        {loading ? (\n          <Loading size=\"small\" />\n        ) : (\n          <Link to={link} className=\"mg-link\">\n            {data?.hitCount || '??'}\n          </Link>\n        )}\n      </td>\n      <td className=\"vf-table__cell\">\n        <Link to={link} className=\"mg-link\">\n          {label}\n        </Link>\n      </td>\n    </tr>\n  );\n};\n\nconst EMGAPIDataTypeRow: React.FC<{\n  aggregator: (data: unknown) => number;\n  labelRenderer: string | ((data: unknown) => string);\n  endpoint: string;\n  link: string;\n}> = ({ endpoint, link, aggregator, labelRenderer }) => {\n  const { data, loading, error } = useMGnifyData(endpoint);\n\n  const num = useMemo(() => {\n    return aggregator(data);\n  }, [data, aggregator]);\n\n  const label = useMemo(() => {\n    if (typeof labelRenderer === 'string') {\n      return labelRenderer;\n    }\n    return labelRenderer(data);\n  }, [data, labelRenderer]);\n\n  if (error) return <FetchError error={error} />;\n  return (\n    <tr className=\"vf-table__row\">\n      <td className=\"vf-table__cell\" style={{ textAlign: 'right' }}>\n        {loading ? (\n          <Loading size=\"small\" />\n        ) : (\n          <Link to={link} className=\"mg-link\">\n            {num}\n          </Link>\n        )}\n      </td>\n      <td className=\"vf-table__cell\">\n        <Link to={link} className=\"mg-link\">\n          {label}\n        </Link>\n      </td>\n    </tr>\n  );\n};\n\nconst DataType: React.FC = () => {\n  const analysesTypes = [\n    {\n      type: 'amplicon',\n      label: 'amplicon',\n      link: '/search/analyses?experiment_type=amplicon',\n    },\n    {\n      type: 'assembly',\n      label: 'assemblies',\n      link: '/search/analyses?experiment_type=assembly',\n    },\n    {\n      type: 'metabarcoding',\n      label: 'metabarcoding',\n      link: '/search/analyses?experiment_type=metabarcoding',\n    },\n    {\n      type: 'metagenomic',\n      label: 'metagenomes',\n      link: '/search/analyses?experiment_type=metagenomic',\n    },\n    {\n      type: 'metatranscriptomic',\n      label: 'metatranscriptomics',\n      link: '/search/analyses?experiment_type=metatranscriptomic',\n    },\n    {\n      type: 'long_reads_assembly',\n      label: 'Long Reads Assemblies',\n      link: '/search/analyses?experiment_type=long_reads_assembly',\n    },\n  ];\n  const types = [\n    {\n      label: 'studies',\n      endpoint: 'metagenomics_projects',\n      link: '/search/studies',\n    },\n    {\n      label: 'samples',\n      endpoint: 'metagenomics_samples',\n      link: '/search/samples',\n    },\n    {\n      label: 'analyses',\n      endpoint: 'metagenomics_analyses',\n      link: '/search/analyses',\n    },\n  ];\n  const emgApiTypes = [\n    {\n      endpoint: 'genome-catalogues',\n      link: '/browse/genomes',\n      aggregator: (cataloguesData) =>\n        cataloguesData?.data\n          ?.map((cat) => cat.attributes['genome-count'])\n          ?.reduce((x, y) => x + y),\n      labelRenderer: (cataloguesData) =>\n        cataloguesData?.data\n          ? `genomes in ${cataloguesData?.data?.length} MAG catalogues`\n          : 'genomes',\n    },\n  ];\n\n  return (\n    <div className=\"vf-grid vf-grid__col-2\" style={{ fontSize: '0.7rem' }}>\n      <div>\n        <h5>\n          <span className=\"icon icon-conceptual icon-c3\" data-icon=\"d\" />\n          &nbsp; Analysis types\n        </h5>\n        <table className=\"vf-table mg-small-table\">\n          <tbody className=\"vf-table__body\">\n            {analysesTypes.map(({ type, label, link }) => (\n              <DataAnalysesTypeRow\n                type={type}\n                label={label}\n                link={link}\n                key={type}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <div>\n        <h5>\n          <span className=\"icon icon-functional icon-c9\" data-icon=\"U\" />\n          &nbsp; Public data\n        </h5>\n        <table className=\"vf-table mg-small-table\">\n          <tbody className=\"vf-table__body\">\n            {types.map(({ endpoint, label, link }) => (\n              <DataTypeRow\n                endpoint={endpoint}\n                label={label}\n                link={link}\n                key={endpoint}\n              />\n            ))}\n            {emgApiTypes.map(\n              ({ endpoint, labelRenderer, link, aggregator }) => (\n                <EMGAPIDataTypeRow\n                  endpoint={endpoint}\n                  labelRenderer={labelRenderer}\n                  link={link}\n                  aggregator={aggregator}\n                  key={endpoint}\n                />\n              )\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default DataType;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst Biome: React.FC<{ lineage: string; name: string; count: number }> = ({\n  lineage,\n  name,\n  count,\n}) => {\n  return (\n    <div>\n      <Link\n        to={`/browse/studies?biome=${lineage}`}\n        className=\"vf-grid vf-grid__col-1 mg-link\"\n        style={{ textAlign: 'center', gridRowGap: '0.2em' }}\n      >\n        <div>\n          <span\n            className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n            style={{ float: 'initial' }}\n          />\n        </div>\n        <div className=\"biome-text\">\n          {' '}\n          {name} ({count})\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nconst Biomes: React.FC = () => {\n  const { data, loading, error } = useMGnifyData('biomes/top10', {\n    ordering: '-samples_count',\n  });\n  if (loading) return <Loading />;\n  if (error) return <FetchError error={error} />;\n\n  return (\n    <section className=\"vf-stack vf-stack--200 search-by-biomes-section\">\n      <div className=\"vf-grid vf-grid__col-5\">\n        {(data as MGnifyResponseList).data.map(({ id, attributes }) => (\n          <Biome\n            key={id}\n            lineage={id}\n            name={attributes['biome-name'] as string}\n            count={attributes['samples-count'] as number}\n          />\n        ))}\n      </div>\n      <div className=\"mg-right\">\n        <Link to=\"/browse/biomes/\" className=\"vf-button vf-button--primary\">\n          View all biomes\n        </Link>\n      </div>\n    </section>\n  );\n};\n\nexport default Biomes;\n","import React from 'react';\nimport InnerCard from 'components/UI/InnerCard';\nimport OutterCard from 'components/UI/OutterCard';\nimport DataType from './DataType';\nimport Biomes from './Biomes';\n\nconst SearchBy: React.FC = () => {\n  return (\n    <OutterCard className=\"search-by-section\">\n      <h3 className=\"vf-card__heading\">Search by</h3>\n      <div className=\"vf-grid\">\n        <InnerCard\n          title=\"Text search\"\n          label=\"Name, biome, or keyword\"\n          to=\"/search\"\n        />\n        <InnerCard\n          title=\"Sequence search\"\n          label=\"Sequence search\"\n          to=\"/sequence-search\"\n        />\n      </div>\n      <h3 className=\"vf-card__heading\">Or by data type</h3>\n      <DataType />\n      <h3 className=\"vf-card__heading\">Or by selected biomes</h3>\n      <Biomes />\n    </OutterCard>\n  );\n};\n\nexport default SearchBy;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport { getBiomeIcon } from 'utils/biomes';\n\nimport './style.css';\n\ntype LatestStudyProps = {\n  id: string;\n  name: string;\n  abstract: string;\n  lineage?: string;\n};\nconst LatestStudy: React.FC<LatestStudyProps> = ({\n  id,\n  name,\n  abstract,\n  lineage,\n}) => {\n  const icon = getBiomeIcon(lineage);\n  return (\n    <article className=\"vf-summary vf-summary--has-image study\">\n      <span className={`biome_icon icon_xs ${icon}`} />\n      <h3 className=\"vf-summary__title\">\n        <Link to={`/studies/${id}`} className=\"vf-summary__link\">\n          {name}\n        </Link>\n      </h3>\n      <p className=\"vf-summary__text\">\n        <TruncatedText text={abstract} />\n      </p>\n      {/* <div className=\"vf-summary__text vf-grid\">\n        <Link to={`/studies/${id}`} className=\"vf-button vf-button--sm\">\n          View more\n        </Link>\n        <Link\n          to={`/studies/${id}#samples-section`}\n          className=\"vf-button vf-button--sm\"\n        >\n          Samples\n        </Link>\n      </div> */}\n    </article>\n  );\n};\n\nconst LatestStudies: React.FC = () => {\n  const { data, loading, error } = useMGnifyData('studies/recent');\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  return (\n    <section className=\"vf-stack vf-stack--200\">\n      <div className=\"vf-grid vf-grid__col-1 latest-studies-section\">\n        {(data.data as Array<MGnifyDatum>).map(\n          ({ id, attributes, relationships }) => (\n            <LatestStudy\n              key={id}\n              id={id}\n              name={attributes['study-name'] as string}\n              abstract={attributes['study-abstract'] as string}\n              lineage={relationships?.biomes?.data?.[0]?.id}\n            />\n          )\n        )}\n      </div>\n      <div className=\"mg-right\">\n        <Link to=\"/browse/studies/\" className=\"vf-button vf-button--primary\">\n          View all studies\n        </Link>\n      </div>\n    </section>\n  );\n};\n\nexport default LatestStudies;\n","import React from 'react';\nimport InnerCard from 'components/UI/InnerCard';\nimport OutterCard from 'components/UI/OutterCard';\nimport LatestStudies from './LatestStudies';\n\nconst SearchBy: React.FC = () => {\n  return (\n    <OutterCard className=\"request-by-section\">\n      <h3 className=\"vf-card__heading\">Request analysis of</h3>\n      <div className=\"vf-grid\">\n        <InnerCard title=\"Submit and/or Request\" label=\"Your data\" to=\"/\" />\n        <InnerCard title=\"Request\" label=\"A public dataset\" to=\"/\" />\n      </div>\n      <h3 className=\"vf-card__heading\">Latest studies</h3>\n      <LatestStudies />\n    </OutterCard>\n  );\n};\n\nexport default SearchBy;\n","import { useContext } from 'react';\nimport useData, { DataResponse, BlogResponse } from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\ninterface BlogDataResponse extends DataResponse {\n  data: BlogResponse;\n}\n\nconst useBlogData: (resource: string) => BlogDataResponse = (resource) => {\n  const { config } = useContext(UserContext);\n  const data = useData(\n    [null, undefined].includes(resource) ? null : `${config.blog}${resource}`\n  );\n  return data as BlogDataResponse;\n};\n\nexport default useBlogData;\n","import React, { useContext } from 'react';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport InnerCard from 'components/UI/InnerCard';\nimport OutterCard from 'components/UI/OutterCard';\nimport useBlogData from 'hooks/data/useBlogData';\n\nimport UserContext from 'pages/Login/UserContext';\n\nconst removeHTMLTags = (text: string): string => {\n  return text.replace(/&lt;.+?&gt;/g, '').trim();\n};\nconst BlogExcerpt: React.FC<{\n  title: string;\n  header: string;\n  image?: string;\n  excerpt: string;\n  url: string;\n}> = ({ title, header, image, excerpt, url }) => {\n  return (\n    <OutterCard className=\"blog\">\n      <h3 className=\"vf-card__heading\">{title}</h3>\n      <InnerCard\n        image={image}\n        title={header}\n        label={removeHTMLTags(excerpt)}\n        to={url}\n        externalLink\n      />\n    </OutterCard>\n  );\n};\n\nconst BlogExcerpts: React.FC = () => {\n  const { data, loading, error } = useBlogData('feed-first-of-each.json');\n  const { config } = useContext(UserContext);\n\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  return (\n    <div>\n      <div className=\"vf-grid vf-grid__col-2\">\n        {data.spotlight && (\n          <BlogExcerpt\n            title=\"Spotlight\"\n            header={data.spotlight.title}\n            image={data.spotlight.image}\n            excerpt={data.spotlight.excerpt}\n            url={data.spotlight.url}\n          />\n        )}\n        {data.tools && (\n          <BlogExcerpt\n            title=\"Tools\"\n            header={data.tools.title}\n            image={data.tools.image}\n            excerpt={data.tools.excerpt}\n            url={data.tools.url}\n          />\n        )}\n      </div>\n      <div className=\"mg-right\" style={{ marginTop: '0.2em' }}>\n        <a href={config.blog} className=\"vf-button vf-button--primary\">\n          View all articles\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default BlogExcerpts;\n","import React from 'react';\nimport SearchBy from 'components/Home/SearchBy';\nimport Request from 'components/Home/Request';\nimport BlogExcerpts from 'components/Home/BlogExcerpts';\nimport Publications, { MainPublication } from 'components/Publications';\n\nconst HomePage: React.FC = () => {\n  return (\n    <section className=\"vf-content vf-stack--600\">\n      <h2>Getting started</h2>\n      <div className=\"vf-grid vf-grid__col-2\">\n        <SearchBy />\n        <Request />\n      </div>\n      <hr />\n      <BlogExcerpts />\n      <h2>Latest publications</h2>\n      <Publications />\n      <h2>How to cite</h2>\n      <MainPublication />\n    </section>\n  );\n};\n\nexport default HomePage;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["Publication","id","title","journal","year","link","doi","authors","maxAuthorsLength","children","trimmedAuthors","length","text","authorList","slice","split","pop","push","join","trimAuthors","titleLink","to","href","className","MainPublication","publication","pub","main","alt","src","showMore","setShowMore","useState","recent","map","key","type","onClick","width","height","xmlns","viewBox","preserveAspectRatio","d","fill","fillRule","refreshPage","window","location","reload","error","style","backgroundColor","status","image","imageAltText","loading","maxLength","substring","endpoint","parameters","config","useContext","allParemeters","format","start","url","ebisearch","Object","entries","value","undefined","includes","label","externalLink","ArrowForLink","DataAnalysesTypeRow","data","useEBISearchData","query","size","fields","facetcount","facetsdepth","facets","Loading","FetchError","textAlign","hitCount","DataTypeRow","EMGAPIDataTypeRow","aggregator","labelRenderer","useMGnifyData","num","useMemo","fontSize","cataloguesData","cat","attributes","reduce","x","y","Biome","lineage","name","count","gridRowGap","float","ordering","OutterCard","LatestStudy","abstract","icon","relationships","biomes","BlogExcerpt","header","excerpt","replace","trim","resource","UserContext","useData","blog","spotlight","tools","marginTop","Request","Publications","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineageList","toLowerCase","lineageD2","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}