{"version":3,"sources":["webpack://mgportalv2/./src/components/UI/ArrowForLink/index.tsx","webpack://mgportalv2/./src/components/UI/InnerCard/index.tsx","webpack://mgportalv2/./src/components/UI/OutterCard/index.tsx","webpack://mgportalv2/./src/hooks/useMGnifyData/index.tsx","webpack://mgportalv2/./src/components/Home/SearchBy/DataType/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts","webpack://mgportalv2/./src/components/Home/SearchBy/Biomes/index.tsx","webpack://mgportalv2/./src/components/Home/SearchBy/index.tsx","webpack://mgportalv2/./src/components/Home/Request/LatestStudies/index.tsx","webpack://mgportalv2/./src/components/Home/Request/index.tsx","webpack://mgportalv2/./src/components/Home/BlogExcerpts/index.tsx","webpack://mgportalv2/./src/pages/Home/index.tsx"],"names":["className","width","height","xmlns","d","fill","fillRule","title","label","to","image","imageAltText","externalLink","src","alt","loading","href","children","useData","url","data","setData","useState","useEffect","callback","response","fetch","json","fetchData","useEBISearchData","endpoint","parameters","allParemeters","format","start","config","Object","entries","map","key","value","join","useMGnifyData","keys","length","DataAnalysesTypeRow","type","link","query","size","fields","facetcount","facetsdepth","facets","style","textAlign","hitCount","Loading","DataTypeRow","fontSize","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","split","x","toLowerCase","lineageD2","slice","lineageD3","lineageD4","lineageD5","lineageD6","Biome","name","count","gridRowGap","float","ordering","id","attributes","LatestStudy","abstract","icon","substring","relationships","biomes","BlogExcerpt","header","excerpt","text","replace","trim","spotlight","tools","marginTop","Request"],"mappings":"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","file":"js/685.7832d38d.chunk.js","sourcesContent":["/* eslint-disable max-len */\nimport React from 'react';\n\nconst ArrowForLink: React.FC = () => (\n  <svg\n    aria-hidden=\"true\"\n    className=\"vf-card__heading__icon | vf-icon vf-icon-arrow--inline-end\"\n    width=\"1em\"\n    height=\"1em\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M0 12c0 6.627 5.373 12 12 12s12-5.373 12-12S18.627 0 12 0C5.376.008.008 5.376 0 12zm13.707-5.209l4.5 4.5a1 1 0 010 1.414l-4.5 4.5a1 1 0 01-1.414-1.414l2.366-2.367a.25.25 0 00-.177-.424H6a1 1 0 010-2h8.482a.25.25 0 00.177-.427l-2.366-2.368a1 1 0 011.414-1.414z\"\n      fill=\"currentColor\"\n      fillRule=\"nonzero\"\n    />\n  </svg>\n);\n\nexport default ArrowForLink;\n","import React from 'react';\nimport ArrowForLink from 'components/UI/ArrowForLink';\nimport { Link } from 'react-router-dom';\n\ntype InnerCardProps = {\n  title: string;\n  label: string;\n  to: string;\n  image?: string;\n  imageAltText?: string;\n  externalLink?: boolean;\n};\n\nconst InnerCard: React.FC<InnerCardProps> = ({\n  title,\n  label,\n  to,\n  image,\n  imageAltText,\n  externalLink = false,\n}) => {\n  return (\n    <article className=\"vf-card vf-card--striped vf-card--bordered\">\n      {image && (\n        <img\n          src={image}\n          alt={imageAltText}\n          className=\"vf-card__image\"\n          loading=\"lazy\"\n        />\n      )}\n      <div className=\"vf-card__content | vf-stack vf-stack--400\">\n        <h3 className=\"vf-card__heading\">\n          {externalLink ? (\n            <a className=\"vf-card__link\" href={to}>\n              {title} <ArrowForLink />\n            </a>\n          ) : (\n            <Link className=\"vf-card__link\" to={to}>\n              {title} <ArrowForLink />\n            </Link>\n          )}\n        </h3>\n        <p className=\"vf-card__text\">{label}</p>\n      </div>\n    </article>\n  );\n};\n\nexport default InnerCard;\n","import React from 'react';\n\nconst OutterCard: React.FC<{\n  className?: string;\n  image?: string;\n  imageAltText?: string;\n}> = ({ children, className = '', image = null, imageAltText = '' }) => {\n  return (\n    <article\n      className={`vf-card vf-card--brand vf-card--bordered ${className}`}\n    >\n      {image && (\n        <img\n          src={image}\n          alt={imageAltText}\n          className=\"vf-card__image\"\n          loading=\"lazy\"\n        />\n      )}\n      <div className=\"vf-card__content | vf-stack vf-stack--400\">\n        {children}\n      </div>\n    </article>\n  );\n};\n\nexport default OutterCard;\n","import { useState, useEffect } from 'react';\nimport config from 'config.json';\n\ntype KeyValue = {\n  [key: string]: string | number | Record<string, unknown> | [];\n};\ntype MGnifyResponse = {\n  data: Array<{\n    attributes: KeyValue;\n    id: string;\n    links: KeyValue;\n    type: string;\n    relationships: {\n      biomes?: {\n        data?: Array<{\n          id: string;\n        }>;\n      };\n      [key: string]: unknown;\n    };\n  }>;\n  links: {\n    first?: string;\n    last?: string;\n    next?: string;\n    prev?: string;\n  };\n  meta: {\n    pagination: {\n      count: number;\n      page: number;\n      pages: number;\n    };\n  };\n};\n\ntype BlogResponse = {\n  [category: string]: {\n    title: string;\n    url: string;\n    image: string;\n    excerpt: string;\n    category: string;\n    published: string;\n    emg: {\n      text: string;\n      url: string;\n    };\n  };\n};\n\nasync function fetchData(\n  url: string,\n  callback: (unknown) => void\n): Promise<void> {\n  const response = await fetch(url);\n  const json = await response.json();\n  callback(json);\n}\n\nconst useData: (url: string) => null | KeyValue | MGnifyResponse = (url) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetchData(url, setData);\n  }, [url]);\n  return data;\n};\n\nexport const useEBISearchData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => null | KeyValue = (endpoint, parameters = {}) => {\n  const defaultParameters = {\n    format: 'json',\n    start: 0,\n  };\n  const allParemeters = { ...defaultParameters, ...parameters };\n  const url = `${config.ebisearch}${endpoint}?${Object.entries(allParemeters)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')}`;\n  const data = useData(url);\n  return data as null | KeyValue;\n};\n\nexport const useMGnifyData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => null | MGnifyResponse = (endpoint, parameters = {}) => {\n  const defaultParameters = {};\n  const allParemeters = { ...defaultParameters, ...parameters };\n  let url = `${config.api}${endpoint}`;\n  if (Object.keys(allParemeters).length > 0)\n    url += `?${Object.entries(allParemeters)\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&')}`;\n  const data = useData(url);\n  return data as MGnifyResponse | null;\n};\nexport const useBlogData: (resource: string) => null | BlogResponse = (\n  resource\n) => {\n  const data = useData(`${config.blog}${resource}`);\n  return data as BlogResponse | null;\n};\n\nexport default useData;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Loading from 'components/UI/Loading';\nimport { useEBISearchData } from 'hooks/useMGnifyData';\nimport './style.css';\n\nconst DataAnalysesTypeRow: React.FC<{\n  type: string;\n  label: string;\n  link: string;\n}> = ({ type, label, link }) => {\n  const data = useEBISearchData('metagenomics_analyses', {\n    query: 'domain_source:metagenomics_analyses',\n    size: 0,\n    fields: 'id,name,description,biome_name,metagenomics_samples',\n    facetcount: 0,\n    facetsdepth: 5,\n    facets: `experiment_type:${type}`,\n  });\n\n  if (!data)\n    return (\n      <tr>\n        <td>\n          <Loading size=\"small\" />\n        </td>\n      </tr>\n    );\n  return (\n    <tr className=\"vf-table__row\">\n      <td className=\"vf-table__cell\" style={{ textAlign: 'right' }}>\n        <Link to={link} className=\"mg-link\">\n          {data?.hitCount || '...'}\n        </Link>\n      </td>\n      <td className=\"vf-table__cell\">{label}</td>\n    </tr>\n  );\n};\nconst DataTypeRow: React.FC<{ label: string; endpoint: string; link: string }> =\n  ({ label, endpoint, link }) => {\n    const data = useEBISearchData(endpoint, {\n      query: `domain_source:${endpoint}`,\n      size: 0,\n      fields: 'id,name,description,biome_name,metagenomics_samples',\n      facetcount: 0,\n      facetsdepth: 5,\n    });\n\n    if (!data) return null;\n    return (\n      <tr className=\"vf-table__row\">\n        <td className=\"vf-table__cell\" style={{ textAlign: 'right' }}>\n          <Link to={link} className=\"mg-link\">\n            {data?.hitCount || '??'}\n          </Link>\n        </td>\n        <td className=\"vf-table__cell\">{label}</td>\n      </tr>\n    );\n  };\n\nconst DataType: React.FC = () => {\n  const analysesTypes = [\n    { type: 'amplicon', label: 'amplicon', link: '' },\n    { type: 'assembly', label: 'assemblies', link: '' },\n    { type: 'metabarcoding', label: 'metabarcoding', link: '' },\n    { type: 'metagenomic', label: 'metagenomes', link: '' },\n    { type: 'metatranscriptomic', label: 'metatranscriptomics', link: '' },\n  ];\n  const types = [\n    {\n      label: 'studies',\n      endpoint: 'metagenomics_projects',\n      link: '/search#projects',\n    },\n    {\n      label: 'samples',\n      endpoint: 'metagenomics_samples',\n      link: '/search#samples',\n    },\n    {\n      label: 'analyses',\n      endpoint: 'metagenomics_analyses',\n      link: '/search#analyses',\n    },\n  ];\n\n  return (\n    <div className=\"vf-grid vf-grid__col-4\" style={{ fontSize: '0.7rem' }}>\n      <div style={{ textAlign: 'right' }}>\n        <span\n          className=\"icon icon-conceptual icon-c3\"\n          style={{ fontSize: '2rem' }}\n          data-icon=\"d\"\n        />\n      </div>\n      <table className=\"vf-table mg-small-table\">\n        <tbody className=\"vf-table__body\">\n          {analysesTypes.map(({ type, label, link }) => (\n            <DataAnalysesTypeRow\n              type={type}\n              label={label}\n              link={link}\n              key={type}\n            />\n          ))}\n        </tbody>\n      </table>\n      <div style={{ textAlign: 'right' }}>\n        <span\n          className=\"icon icon-functional icon-c9\"\n          style={{ fontSize: '2rem' }}\n          data-icon=\"U\"\n        />\n      </div>\n      <table className=\"vf-table mg-small-table\">\n        <tbody className=\"vf-table__body\">\n          {types.map(({ endpoint, label, link }) => (\n            <DataTypeRow\n              endpoint={endpoint}\n              label={label}\n              link={link}\n              key={endpoint}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default DataType;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useMGnifyData } from 'hooks/useMGnifyData';\nimport Loading from 'components/UI/Loading';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst Biome: React.FC<{ lineage: string; name: string; count: number }> = ({\n  lineage,\n  name,\n  count,\n}) => {\n  return (\n    <div>\n      <Link\n        to={`/metagenomics/browse?lineage=${lineage}#studies`}\n        className=\"vf-grid vf-grid__col-1 mg-link\"\n        style={{ textAlign: 'center', gridRowGap: '0.2em' }}\n      >\n        <div>\n          <span\n            className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n            style={{ float: 'initial' }}\n          />\n        </div>\n        <div className=\"biome-text\">\n          {' '}\n          {name} ({count})\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nconst Biomes: React.FC = () => {\n  const data = useMGnifyData('biomes/top10', { ordering: '-samples_count' });\n  if (!data) return <Loading />;\n  return (\n    <section className=\"vf-stack vf-stack--200 search-by-biomes-section\">\n      <div className=\"vf-grid vf-grid__col-5\">\n        {data.data.map(({ id, attributes }) => (\n          <Biome\n            key={id}\n            lineage={id}\n            name={attributes['biome-name'] as string}\n            count={attributes['samples-count'] as number}\n          />\n        ))}\n      </div>\n      <div className=\"mg-right\">\n        <Link to=\"/biomes/\" className=\"vf-button vf-button--primary\">\n          View all biomes\n        </Link>\n      </div>\n    </section>\n  );\n};\n\nexport default Biomes;\n","import React from 'react';\nimport InnerCard from 'components/UI/InnerCard';\nimport OutterCard from 'components/UI/OutterCard';\nimport DataType from './DataType';\nimport Biomes from './Biomes';\n\nconst SearchBy: React.FC = () => {\n  return (\n    <OutterCard className=\"search-by-section\">\n      <h3 className=\"vf-card__heading\">Search by</h3>\n      <div className=\"vf-grid\">\n        <InnerCard\n          title=\"Text search\"\n          label=\"Name, biome, or keyword\"\n          to=\"/search\"\n        />\n        <InnerCard\n          title=\"Sequence search\"\n          label=\"Sequence search\"\n          to=\"/sequence-search\"\n        />\n      </div>\n      <h3 className=\"vf-card__heading\">Or by data type</h3>\n      <DataType />\n      <h3 className=\"vf-card__heading\">Or by selected biomes</h3>\n      <Biomes />\n    </OutterCard>\n  );\n};\n\nexport default SearchBy;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useMGnifyData } from 'hooks/useMGnifyData';\nimport Loading from 'components/UI/Loading';\nimport { getBiomeIcon } from 'utils/biomes';\n\nimport './style.css';\n\ntype LatestStudyProps = {\n  id: string;\n  name: string;\n  abstract: string;\n  lineage?: string;\n};\nconst LatestStudy: React.FC<LatestStudyProps> = ({\n  id,\n  name,\n  abstract,\n  lineage,\n}) => {\n  const icon = getBiomeIcon(lineage);\n  return (\n    <article className=\"vf-summary vf-summary--has-image study\">\n      <span className={`biome_icon icon_xs ${icon}`} />\n      <h3 className=\"vf-summary__title\">\n        <Link to={`/studies/${id}`} className=\"vf-summary__link\">\n          {name}\n        </Link>\n      </h3>\n      <p className=\"vf-summary__text\">\n        {abstract.substring(0, 250)}\n        {abstract.length >= 250 && '...'}\n      </p>\n      <div className=\"vf-summary__text vf-grid\">\n        <Link to={`/studies/${id}`} className=\"vf-button vf-button--sm\">\n          View more\n        </Link>\n        <Link\n          to={`/studies/${id}#samples-section`}\n          className=\"vf-button vf-button--sm\"\n        >\n          Samples\n        </Link>\n      </div>\n    </article>\n  );\n};\n\nconst LatestStudies: React.FC = () => {\n  const data = useMGnifyData('studies/recent');\n  if (!data) return <Loading />;\n  return (\n    <section className=\"vf-stack vf-stack--200\">\n      <div className=\"vf-grid vf-grid__col-1 latest-studies-section\">\n        {data.data.map(({ id, attributes, relationships }) => (\n          <LatestStudy\n            key={id}\n            id={id}\n            name={attributes['study-name'] as string}\n            abstract={attributes['study-abstract'] as string}\n            lineage={relationships?.biomes?.data?.[0]?.id}\n          />\n        ))}\n      </div>\n      <div className=\"mg-right\">\n        <Link to=\"/browse/studies/\" className=\"vf-button vf-button--primary\">\n          View all studies\n        </Link>\n      </div>\n    </section>\n  );\n};\n\nexport default LatestStudies;\n","import React from 'react';\nimport InnerCard from 'components/UI/InnerCard';\nimport OutterCard from 'components/UI/OutterCard';\nimport LatestStudies from './LatestStudies';\n\nconst SearchBy: React.FC = () => {\n  return (\n    <OutterCard className=\"request-by-section\">\n      <h3 className=\"vf-card__heading\">Request analysis of</h3>\n      <div className=\"vf-grid\">\n        <InnerCard title=\"Submit and/or Request\" label=\"Your data\" to=\"/\" />\n        <InnerCard title=\"Request\" label=\"A public dataset\" to=\"/\" />\n      </div>\n      <h3 className=\"vf-card__heading\">Latest studies</h3>\n      <LatestStudies />\n    </OutterCard>\n  );\n};\n\nexport default SearchBy;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport InnerCard from 'components/UI/InnerCard';\nimport OutterCard from 'components/UI/OutterCard';\nimport { useBlogData } from 'hooks/useMGnifyData';\n\nimport config from 'config.json';\n\nconst removeHTMLTags = (text: string): string => {\n  return text.replace(/&lt;.+?&gt;/g, '').trim();\n};\nconst BlogExcerpt: React.FC<{\n  title: string;\n  header: string;\n  image?: string;\n  excerpt: string;\n  url: string;\n}> = ({ title, header, image, excerpt, url }) => {\n  return (\n    <OutterCard className=\"blog\">\n      <h3 className=\"vf-card__heading\">{title}</h3>\n      <InnerCard\n        image={image}\n        title={header}\n        label={removeHTMLTags(excerpt)}\n        to={url}\n        externalLink\n      />\n    </OutterCard>\n  );\n};\n\nconst BlogExcerpts: React.FC = () => {\n  const data = useBlogData('feed-first-of-each.json');\n  if (!data) return <Loading size=\"large\" />;\n  return (\n    <div>\n      <div className=\"vf-grid\">\n        {data.spotlight && (\n          <BlogExcerpt\n            title=\"Spotlight\"\n            header={data.spotlight.title}\n            image={data.spotlight.image}\n            excerpt={data.spotlight.excerpt}\n            url={data.spotlight.url}\n          />\n        )}\n        {data.tools && (\n          <BlogExcerpt\n            title=\"Tools\"\n            header={data.tools.title}\n            image={data.tools.image}\n            excerpt={data.tools.excerpt}\n            url={data.tools.url}\n          />\n        )}\n      </div>\n      <div className=\"mg-right\" style={{ marginTop: '0.2em' }}>\n        <a href={config.blog} className=\"vf-button vf-button--primary\">\n          View all articles\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default BlogExcerpts;\n","import React from 'react';\nimport SearchBy from 'components/Home/SearchBy';\nimport Request from 'components/Home/Request';\nimport BlogExcerpts from 'components/Home/BlogExcerpts';\n\nconst HomePage: React.FC = () => {\n  return (\n    <section className=\"vf-content vf-stack--600\">\n      <h2>Getting started</h2>\n      <div className=\"vf-grid\">\n        <SearchBy />\n        <Request />\n      </div>\n      <hr />\n      <BlogExcerpts />\n    </section>\n  );\n};\n\nexport default HomePage;\n"],"sourceRoot":""}