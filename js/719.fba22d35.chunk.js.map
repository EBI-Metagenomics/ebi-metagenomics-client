{"version":3,"file":"js/719.fba22d35.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Nav/RouteForHash/index.tsx","webpack://mgportalv2/./src/components/UI/Box/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/render.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\ntype PropsType = {\n  hash: string;\n  isDefault?: boolean;\n};\nconst RouteForHash: React.FC<PropsType> = ({\n  hash,\n  isDefault = false,\n  children,\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (location.hash === '' && hash !== '' && isDefault) {\n      navigate(hash, { replace: true });\n    }\n  });\n\n  if (location.hash === hash) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport default RouteForHash;\n","import React from 'react';\n\nconst Box: React.FC<{ label: string; theme?: string }> = ({\n  label,\n  theme = 'primary',\n  children,\n}) => (\n  <div className=\"vf-grid\">\n    <div className={`vf-box vf-box--easy vf-box-theme--${theme}`}>\n      <h5 className=\"vf-box__heading\">{label}</h5>\n      <div className=\"vf-box__text\">{children}</div>\n    </div>\n  </div>\n);\n\nexport default Box;\n","import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse;\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title,\n  initialPage = 0,\n  initialPageSize = 25,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  sortable = false,\n  loading = false,\n  isStale = false,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: data.data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount: data.meta.pagination.pages,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped ${className}`}\n          ref={tableRef}\n        >\n          <caption className=\"vf-table__caption\">{title}</caption>\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"vf-table__row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\n\nimport './style.css';\n\n// TODO: make the link play nicer with react-router\nconst MarkerPopup: React.FC<{ sample: MGnifyDatum }> = ({ sample }) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">\n      <a href={`../samples/${sample.id}`}>{sample.id}</a>\n      {/* <Link to=\"/search/studies\">{sample.id}</Link> */}\n    </h3>\n    <p className=\"vf-box__text\">{sample.attributes['sample-desc']}</p>\n  </div>\n);\nconst ClusterMarkerPopup: React.FC<{ accessions: string[] }> = ({\n  accessions,\n}) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">Samples on this geographical location</h3>\n    <ul className=\"vf-list\">\n      {accessions.map((accession) => (\n        <li ref={accession}>\n          <a href={`../samples/${accession}`}>{accession}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ntype MapProps = {\n  samples: Array<MGnifyDatum>;\n};\n\nconst SamplesMap: React.FC<MapProps> = ({ samples }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const markerCluster = useRef<MarkerClusterer>(null);\n  const sampleInfoWindow = useRef(new google.maps.InfoWindow());\n  const clusterInfoWindow = useRef(new google.maps.InfoWindow());\n  const newBoundary = useRef(new google.maps.LatLngBounds());\n\n  const markers = useRef({});\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n        minZoom: 2,\n      });\n      setTheMap(tmpMap);\n    }\n  }, [theMap]);\n  useEffect(() => {\n    if (theMap && samples) {\n      if (markerCluster.current) {\n        markerCluster.current.clearMarkers();\n      }\n\n      samples\n        .filter(({ id }) => !(id in markers.current))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n            title: sample.id,\n          });\n          newBoundary.current.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.current.setContent(\n              ReactDOMServer.renderToString(<MarkerPopup sample={sample} />)\n            );\n            sampleInfoWindow.current.open(theMap, marker);\n          });\n          markers.current[sample.id] = marker;\n        });\n      markerCluster.current = new MarkerClusterer(\n        theMap,\n        Object.values(markers.current),\n        {\n          imagePath:\n            'https://raw.githubusercontent.com/googlemaps/js-markerclustererplus/master/images/m',\n          maxZoom: 10,\n        }\n      );\n\n      // for clusters in MAX Zoom and with less than 10 elements show a list\n      google.maps.event.addListener(\n        markerCluster.current,\n        'click',\n        // eslint-disable-next-line func-names\n        function (cluster) {\n          if (\n            // eslint-disable-next-line no-underscore-dangle, react/no-this-in-sfc\n            this.prevZoom_ + 1 <= this.getMaxZoom() ||\n            cluster.getSize() >= 10\n          ) {\n            return;\n          }\n          clusterInfoWindow.current.setPosition(cluster.getCenter());\n\n          clusterInfoWindow.current.setContent(\n            ReactDOMServer.renderToString(\n              <ClusterMarkerPopup\n                accessions={cluster.getMarkers().map((m) => m.getTitle())}\n              />\n            )\n          );\n\n          clusterInfoWindow.current.open(theMap);\n        }\n      );\n\n      theMap.fitBounds(newBoundary.current);\n    }\n  }, [theMap, samples]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\nexport default SamplesMap;\n","import React, { ReactElement } from 'react';\nimport { Status } from '@googlemaps/react-wrapper';\nimport { ErrorTypes } from 'hooks/data/useData';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\nexport default render;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    navigate(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      navigate(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  const parts = location.pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["hash","isDefault","children","location","navigate","useEffect","replace","label","theme","className","currentPageIndex","pageIndex","gotoPage","type","onClick","cols","data","title","initialPage","initialPageSize","namespace","showPagination","sortable","loading","isStale","queryParameters","setQueryParameters","Number","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","useRef","isChangingPage","setChangingPage","useState","current","scrollIntoView","order","tableSortBy","length","col","desc","id","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","page","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","target","value","Loading","size","undefined","ref","map","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","key","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onBlur","onChange","pg","disabled","paginationIndex","refreshPage","window","reload","error","style","backgroundColor","status","MarkerPopup","sample","href","attributes","ClusterMarkerPopup","accessions","accession","samples","theMap","setTheMap","markerCluster","sampleInfoWindow","google","maps","InfoWindow","clusterInfoWindow","newBoundary","LatLngBounds","markers","tmpMap","Map","maxZoom","minZoom","clearMarkers","filter","forEach","position","lat","latitude","lng","longitude","marker","Marker","extend","addListener","setContent","open","Object","values","imagePath","event","cluster","this","prevZoom_","getMaxZoom","getSize","setPosition","getCenter","getMarkers","m","getTitle","fitBounds","height","Status","tabs","Label","to","pathname","startsWith","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","entries","parameter","serializer","String","get","useQueryParametersState","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","parts","split","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","x","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}