{"version":3,"file":"js/735.a03598b1.chunk.js","mappings":"gRAeA,IAAc,GAEd,MAqHA,EAnHqE,EACnEA,kBAAAA,GAAoB,MAEpB,MAAMC,GAAoB,IAAAC,QAAkC,MACtDC,GAAY,UAEXC,IAAY,OAAmB,YAAa,EAAGC,SAC/CC,IAAgB,OACrB,iBAVoB,GAYpBD,SAEKE,IAAa,OAAmB,aAAc,KAE/C,QAAEC,EAAO,QAAEC,IAAY,UACvB,KAAEC,EAAI,QAAEC,EAAO,QAAEC,EAAO,MAAEC,IAAU,OACxC,WAAWV,eACX,CACEW,KAAMV,EACNW,SAAUR,EACVS,UAAWV,IAIf,GAAIK,EAAS,OAAO,gBAAC,IAAO,CAACM,KAAK,UAClC,GAAIJ,EAAO,OAAO,gBAAC,IAAU,CAACA,MAAOA,IACrC,IAAKH,EAAM,OAAO,gBAAC,IAAO,MAC1B,IAAIQ,EAAQ,EACZ,MAAMC,EAAcT,EAAKA,KAAuBU,KAAKC,GACnDC,OAAOD,EAAEE,WAAWC,QAEhBC,EAA0Bf,EAAKA,KAAuBgB,QAC1D,CAACC,EAAMN,KAELM,EAAKN,EAAEE,WAAWC,MAAkBH,EAAEE,WAAWK,YAC1CD,IAET,IAEIE,EAAgBnB,EAAKA,KAAuBU,KAAKC,IACrD,MAAMS,EAAIzB,OAAOgB,EAAEE,WAAW,iBAE9B,OADAL,GAASY,EACFA,KAEHC,EAAmBrB,EAAKA,KAAuBU,KAAKC,GACjDA,EAAEE,WAAW,qBAiDtB,OA9CAf,EAAQ,GAAK,CACXwB,OAAQ,WACRC,SAAU,uBAEZzB,EAAQ,GAAGyB,SAAW,kBACtBxB,EAAQyB,MAAQ,CACdC,KAAM,gCAER1B,EAAQ2B,SAAW,CACjBD,KAAM,UAAUjB,wCAElBT,EAAQ4B,MAAQ,CACdlB,WAAAA,GAEFV,EAAQ6B,QAAU,CAEhBC,YACE,MAAMX,EAAcH,EAAuBe,KAAKC,KAChD,IAAIH,EAAU,GAAGE,KAAKE,OAAOlB,mBAAmBgB,KAAKG,IAIrD,OAHIf,IACFU,GAAW,qBAAqBV,KAE3BU,IAIX7B,EAAQiC,OAAS,CACf,CACElB,KAAM,SACNoB,KAAM,SACNlC,KAAMmB,EAAagB,MAAM,EAAG,IAC5BC,OAAQ,KACRC,MAAO,WAIP/C,GACFS,EAAQiC,OAAOM,KAAK,CAClBxB,KAAM,aACNoB,KAAM,SACNlC,KAAMqB,EAAgBc,MAAM,EAAG,IAC/BC,OAAQ,KACRC,MAAO,cAKT,uBAAKE,UAAU,yBAAwB,UAAS,wBAC9C,gBAAC,IAAe,CACdC,WAAY,EACZzC,QAASA,EACT0C,IAAKlD,IAEP,gBAAC,IAAQ,CACPmD,KAAM5C,EACNE,KAAMA,EACN2C,MAAO,OAAO3C,EAAK4C,KAAKC,WAAWC,qBACnC7C,QAASA,EACT8C,YAAcrD,EAAsB,EACpCsD,gBA7GgB,GA8GhBC,UAAU,QACV/C,QAASA,O,wDCnHjB,MAiFA,EAjF+B,KA8EtB,CAAEJ,SA7EO,IAAAoD,UACd,IAAM,CACJ,CACE5B,OAAQ,SACRC,SAAU,mBAEZ,CACED,OAAQ,cACRC,SAAU,0BAEZ,CACED,OAAQ,eACRC,SAAU,2BAEZ,CACED,OAAQ,mBACRC,SAAU,gCAGd,IA0DgBxB,QAvDkB,CAClCoD,MAAO,CACLjB,KAAM,SACNkB,OAAQ,IACRC,SAAU,KACVC,SAAU,aAKZC,MAAO,CACLC,IAAK,EACLhC,MAAO,CACLC,KAAM,sBAMVgC,YAAa,CACXzB,OAAQ,CACN0B,SAAU,UAEZC,OAAQ,CACNC,kBAAkB,EAClBC,OAAQ,UACRzB,OAAQ,OAGZ0B,QAAS,CACPC,SAAS,GAEXC,OAAQ,CACND,SAAS","sources":["webpack://mgportalv2/./src/components/Genomes/KEGGClassAnalysis/index.tsx","webpack://mgportalv2/./src/hooks/genomes/useDefaultConfig/index.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport * as Highcharts from 'highcharts';\nimport addExportMenu from 'highcharts/modules/exporting';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport useDefaultGenomeConfig from 'hooks/genomes/useDefaultConfig';\nimport { TAXONOMY_COLOURS } from 'utils/taxon';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\n\naddExportMenu(Highcharts);\n\nconst initialPageSize = 10;\n\nconst KEGGClassAnalises: React.FC<{ includePangenomes?: boolean }> = ({\n  includePangenomes = true,\n}) => {\n  const chartComponentRef = useRef<HighchartsReact.RefObject>(null);\n  const accession = useURLAccession();\n\n  const [keggPage] = useQueryParamState('kegg-page', 1, Number);\n  const [keggPageSize] = useQueryParamState(\n    'kegg-page_size',\n    initialPageSize,\n    Number\n  );\n  const [keggOrder] = useQueryParamState('kegg-order', '');\n\n  const { columns, options } = useDefaultGenomeConfig();\n  const { data, loading, isStale, error } = useMGnifyData(\n    `genomes/${accession}/kegg-class`,\n    {\n      page: keggPage,\n      ordering: keggOrder,\n      page_size: keggPageSize,\n    }\n  );\n\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  let total = 0;\n  const categories = (data.data as MGnifyDatum[]).map((d) =>\n    String(d.attributes.name)\n  );\n  const categoriesDescriptions = (data.data as MGnifyDatum[]).reduce(\n    (memo, d) => {\n      // eslint-disable-next-line no-param-reassign\n      memo[d.attributes.name as string] = d.attributes.description;\n      return memo;\n    },\n    {}\n  );\n  const genomeSeries = (data.data as MGnifyDatum[]).map((d) => {\n    const c = Number(d.attributes['genome-count']);\n    total += c;\n    return c;\n  });\n  const pangenomeSeries = (data.data as MGnifyDatum[]).map((d) => {\n    return d.attributes['pangenome-count'];\n  });\n\n  columns[0] = {\n    Header: 'Class ID',\n    accessor: 'attributes.class-id',\n  };\n  columns[1].accessor = 'attributes.name';\n  options.title = {\n    text: 'Top 10 KEGG brite categories',\n  };\n  options.subtitle = {\n    text: `Total: ${total} KEGG matches - Drag to zoom in/out`,\n  };\n  options.xAxis = {\n    categories,\n  };\n  options.tooltip = {\n    /* eslint-disable react/no-this-in-sfc */\n    formatter() {\n      const description = categoriesDescriptions[this.key];\n      let tooltip = `${this.series.name}<br/>Count: ${this.y}`;\n      if (description) {\n        tooltip += `<br />KEGG Class: ${description}`;\n      }\n      return tooltip;\n    },\n    /* eslint-enable react/no-this-in-sfc */\n  };\n  options.series = [\n    {\n      name: 'Genome',\n      type: 'column',\n      data: genomeSeries.slice(0, 10),\n      colors: TAXONOMY_COLOURS,\n      stack: 'genome',\n    },\n  ];\n\n  if (includePangenomes) {\n    options.series.push({\n      name: 'Pan-genome',\n      type: 'column',\n      data: pangenomeSeries.slice(0, 10),\n      colors: TAXONOMY_COLOURS,\n      stack: 'pangenome',\n    });\n  }\n\n  return (\n    <div className=\"vf-stack vf-stack--200\" data-cy=\"genome-kegg-analysis\">\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n        ref={chartComponentRef}\n      />\n      <EMGTable\n        cols={columns}\n        data={data as MGnifyResponseList}\n        Title={`All ${data.meta.pagination.count} KEGG classes`}\n        loading={loading}\n        initialPage={(keggPage as number) - 1}\n        initialPageSize={initialPageSize}\n        namespace=\"kegg-\"\n        isStale={isStale}\n      />\n    </div>\n  );\n};\n\nexport default KEGGClassAnalises;\n","import { useMemo } from 'react';\nimport * as Highcharts from 'highcharts';\n\nimport { TAXONOMY_COLOURS } from 'utils/taxon';\n\ntype DefaultConfigType = {\n  columns: {\n    Header: string;\n    accessor: string;\n  }[];\n  options: Highcharts.Options;\n};\n\nconst useGenomeDefaultConfig = (): DefaultConfigType => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'COG ID',\n        accessor: 'attributes.name',\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.description',\n      },\n      {\n        Header: 'Genome Count',\n        accessor: 'attributes.genome-count',\n      },\n      {\n        Header: 'Pan-genome count',\n        accessor: 'attributes.pangenome-count',\n      },\n    ],\n    []\n  );\n\n  const options: Highcharts.Options = {\n    chart: {\n      type: 'column',\n      height: 400,\n      zoomType: 'xy',\n      renderTo: 'container',\n    },\n    // subtitle: {\n    //   text: `Total: ${total} Genome COG matches - Drag to zoom in/out`,\n    // },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Number of matches',\n      },\n    },\n    // xAxis: {\n    //   categories,\n    // },\n    plotOptions: {\n      series: {\n        stacking: 'normal',\n      },\n      column: {\n        allowPointSelect: true,\n        cursor: 'pointer',\n        colors: TAXONOMY_COLOURS,\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n    legend: {\n      enabled: true,\n    },\n    // tooltip: {\n    //   formatter() {\n    //     const description = categoriesDescriptions[this.key];\n    //     let tooltip = this.series.name + '<br/>Count: ' + this.y;\n    //     if (description) {\n    //       tooltip += '<br />COG: ' + description;\n    //     }\n    //     return tooltip;\n    //   },\n    // },\n    // series: [\n    //   {\n    //     name: 'Genome',\n    //     type: 'column',\n    //     data: genomeSeries.slice(0, 10),\n    //     colors: TAXONOMY_COLOURS,\n    //     stack: 'genome',\n    //   },\n    // ],\n  };\n  return { columns, options };\n};\n\nexport default useGenomeDefaultConfig;\n"],"names":["includePangenomes","chartComponentRef","useRef","accession","keggPage","Number","keggPageSize","keggOrder","columns","options","data","loading","isStale","error","page","ordering","page_size","size","total","categories","map","d","String","attributes","name","categoriesDescriptions","reduce","memo","description","genomeSeries","c","pangenomeSeries","Header","accessor","title","text","subtitle","xAxis","tooltip","formatter","this","key","series","y","type","slice","colors","stack","push","className","highcharts","ref","cols","Title","meta","pagination","count","initialPage","initialPageSize","namespace","useMemo","chart","height","zoomType","renderTo","yAxis","min","plotOptions","stacking","column","allowPointSelect","cursor","credits","enabled","legend"],"sourceRoot":""}