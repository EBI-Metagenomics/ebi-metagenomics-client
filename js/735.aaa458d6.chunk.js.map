{"version":3,"file":"js/735.aaa458d6.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Genomes/KEGGClassAnalysis/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/hooks/genomes/useDefaultConfig/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport useDefaultGenomeConfig from 'hooks/genomes/useDefaultConfig';\nimport { TAXONOMY_COLOURS } from 'utils/taxon';\n\nconst initialPageSize = 10;\n\nconst KEGGClassAnalises: React.FC<{ includePangenomes?: boolean }> = ({\n  includePangenomes = true,\n}) => {\n  const chartComponentRef = useRef<HighchartsReact.RefObject>(null);\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'kegg-page': 1,\n      'kegg-page_size': initialPageSize,\n      'kegg-order': '',\n    },\n    {\n      'kegg-page': Number,\n      'kegg-page_size': Number,\n    }\n  );\n\n  const { columns, options } = useDefaultGenomeConfig();\n  const { data, loading, isStale, error } = useMGnifyData(\n    `genomes/${accession}/kegg-class`,\n    {\n      page: queryParameters['kegg-page'] as number,\n      ordering: queryParameters['kegg-order'] as string,\n      page_size: queryParameters['kegg-page_size'] as number,\n    }\n  );\n\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  let total = 0;\n  const categories = (data.data as MGnifyDatum[]).map((d) =>\n    String(d.attributes.name)\n  );\n  const categoriesDescriptions = (data.data as MGnifyDatum[]).reduce(\n    (memo, d) => {\n      // eslint-disable-next-line no-param-reassign\n      memo[d.attributes.name as string] = d.attributes.description;\n      return memo;\n    },\n    {}\n  );\n  const genomeSeries = (data.data as MGnifyDatum[]).map((d) => {\n    const c = Number(d.attributes['genome-count']);\n    total += c;\n    return c;\n  });\n  const pangenomeSeries = (data.data as MGnifyDatum[]).map((d) => {\n    return d.attributes['pangenome-count'];\n  });\n\n  columns[0] = {\n    Header: 'Class ID',\n    accessor: 'attributes.class-id',\n  };\n  columns[1].accessor = 'attributes.name';\n  options.title = {\n    text: 'Top 10 KEGG brite categories',\n  };\n  options.subtitle = {\n    text: `Total: ${total} KEGG matches - Drag to zoom in/out`,\n  };\n  options.xAxis = {\n    categories,\n  };\n  options.tooltip = {\n    /* eslint-disable react/no-this-in-sfc */\n    formatter() {\n      const description = categoriesDescriptions[this.key];\n      let tooltip = `${this.series.name}<br/>Count: ${this.y}`;\n      if (description) {\n        tooltip += `<br />KEGG Class: ${description}`;\n      }\n      return tooltip;\n    },\n    /* eslint-enable react/no-this-in-sfc */\n  };\n  options.series = [\n    {\n      name: 'Genome',\n      type: 'column',\n      data: genomeSeries.slice(0, 10),\n      colors: TAXONOMY_COLOURS,\n      stack: 'genome',\n    },\n  ];\n\n  if (includePangenomes) {\n    options.series.push({\n      name: 'Pan-genome',\n      type: 'column',\n      data: pangenomeSeries.slice(0, 10),\n      colors: TAXONOMY_COLOURS,\n      stack: 'pangenome',\n    });\n  }\n\n  return (\n    <div className=\"vf-stack vf-stack--200\">\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n        ref={chartComponentRef}\n      />\n      <EMGTable\n        cols={columns}\n        data={data as MGnifyResponseList}\n        title={`All ${data.meta.pagination.count} KEGG classes`}\n        loading={loading}\n        initialPage={(queryParameters['kegg-page'] as number) - 1}\n        initialPageSize={initialPageSize}\n        namespace=\"kegg-\"\n        isStale={isStale}\n      />\n    </div>\n  );\n};\n\nexport default KEGGClassAnalises;\n","import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse;\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title: Title,\n  initialPage = 0,\n  initialPageSize = 25,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  sortable = false,\n  loading = false,\n  isStale = false,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: data.data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount: data.meta.pagination.pages,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped ${className}`}\n          ref={tableRef}\n        >\n          {Title && (\n            <caption className=\"vf-table__caption\">\n              {typeof Title === 'string' ? Title : <Title />}\n            </caption>\n          )}\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"vf-table__row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import { useMemo } from 'react';\nimport * as Highcharts from 'highcharts';\nimport { TAXONOMY_COLOURS } from 'utils/taxon';\n\ntype DefaultConfigType = {\n  columns: {\n    Header: string;\n    accessor: string;\n  }[];\n  options: Highcharts.Options;\n};\n\nconst useGenomeDefaultConfig = (): DefaultConfigType => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'COG ID',\n        accessor: 'attributes.name',\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.description',\n      },\n      {\n        Header: 'Genome Count',\n        accessor: 'attributes.genome-count',\n      },\n      {\n        Header: 'Pan-genome count',\n        accessor: 'attributes.pangenome-count',\n      },\n    ],\n    []\n  );\n\n  const options: Highcharts.Options = {\n    chart: {\n      type: 'column',\n      height: 400,\n      zoomType: 'xy',\n      renderTo: 'container',\n    },\n    // subtitle: {\n    //   text: `Total: ${total} Genome COG matches - Drag to zoom in/out`,\n    // },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Number of matches',\n      },\n    },\n    // xAxis: {\n    //   categories,\n    // },\n    plotOptions: {\n      series: {\n        stacking: 'normal',\n      },\n      column: {\n        allowPointSelect: true,\n        cursor: 'pointer',\n        colors: TAXONOMY_COLOURS,\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n    legend: {\n      enabled: true,\n    },\n    // tooltip: {\n    //   formatter() {\n    //     const description = categoriesDescriptions[this.key];\n    //     let tooltip = this.series.name + '<br/>Count: ' + this.y;\n    //     if (description) {\n    //       tooltip += '<br />COG: ' + description;\n    //     }\n    //     return tooltip;\n    //   },\n    // },\n    // series: [\n    //   {\n    //     name: 'Genome',\n    //     type: 'column',\n    //     data: genomeSeries.slice(0, 10),\n    //     colors: TAXONOMY_COLOURS,\n    //     stack: 'genome',\n    //   },\n    // ],\n  };\n  return { columns, options };\n};\n\nexport default useGenomeDefaultConfig;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    navigate(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      navigate(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n"],"names":["includePangenomes","chartComponentRef","useRef","accession","queryParameters","Number","columns","options","data","loading","isStale","error","page","ordering","page_size","size","total","categories","map","d","String","attributes","name","categoriesDescriptions","reduce","memo","description","genomeSeries","c","pangenomeSeries","Header","accessor","title","text","subtitle","xAxis","tooltip","formatter","this","key","series","y","type","slice","colors","stack","push","className","highcharts","ref","cols","meta","pagination","count","initialPage","initialPageSize","namespace","currentPageIndex","pageIndex","gotoPage","onClick","Title","showPagination","sortable","setQueryParameters","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","initialState","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","isChangingPage","setChangingPage","useState","useEffect","current","scrollIntoView","order","tableSortBy","length","col","desc","id","replace","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","target","value","Loading","undefined","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onBlur","onChange","pg","disabled","paginationIndex","chart","height","zoomType","renderTo","yAxis","min","plotOptions","stacking","allowPointSelect","cursor","credits","enabled","legend","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","Object","entries","forEach","parameter","serializer","get","useQueryParametersState","location","navigate","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString"],"sourceRoot":""}