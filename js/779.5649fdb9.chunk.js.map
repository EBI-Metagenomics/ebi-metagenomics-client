{"version":3,"file":"js/779.5649fdb9.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/FileUploaderButton/index.tsx","webpack://mgportalv2/./src/components/UI/InfoBanner/index.tsx","webpack://mgportalv2/./src/components/UI/Tooltip/index.tsx","webpack://mgportalv2/./src/components/Genomes/Table/index.tsx","webpack://mgportalv2/./src/components/UI/Hierarchy/index.tsx","webpack://mgportalv2/./src/components/Genomes/PhyloTree/index.tsx","webpack://mgportalv2/./src/hooks/data/useMgnifyBigsiSearch/index.tsx","webpack://mgportalv2/./src/components/Genomes/Bigsi/Results.tsx","webpack://mgportalv2/./src/components/Genomes/Bigsi/index.tsx","webpack://mgportalv2/./src/hooks/useSearchStorage/index.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/History/index.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/Form/index.tsx","webpack://mgportalv2/./src/hooks/data/useMgnifySourmashSearch/index.tsx","webpack://mgportalv2/./src/hooks/data/useMgnifySourmashStatus/index.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/Results/Table.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/Results/index.tsx","webpack://mgportalv2/./src/components/Genomes/Sourmash/index.tsx","webpack://mgportalv2/./src/pages/GenomeCatalogue/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React, { useRef, FormEvent } from 'react';\n\ntype FileUploaderButtonProps = {\n  onChange: (event: FormEvent) => void;\n  accept?: string;\n};\nconst FileUploaderButton: React.FC<FileUploaderButtonProps> = ({\n  onChange,\n  accept,\n}) => {\n  const fileInput = useRef(null);\n  return (\n    <>\n      <input\n        type=\"file\"\n        hidden\n        ref={fileInput}\n        onChange={onChange}\n        accept={accept}\n      />\n      <button\n        className=\"vf-button vf-button--primary vf-button--sm\"\n        onClick={() => fileInput.current?.click()}\n        type=\"button\"\n      >\n        Browse for file...\n      </button>\n    </>\n  );\n};\n\nexport default FileUploaderButton;\n","import React from 'react';\n\ntype InfoBannerProps = {\n  type?: 'info' | 'warning' | 'error';\n  title?: string;\n};\nconst InfoBanner: React.FC<InfoBannerProps> = ({ type, title, children }) => {\n  return (\n    <div\n      className={`vf-banner vf-banner--alert ${\n        ['warning', 'error'].includes(type)\n          ? 'vf-banner--warning'\n          : 'vf-banner--info'\n      }`}\n    >\n      {(title || type) && (\n        <h3 className=\"vf-box__heading\">\n          {type === 'info' && <span className=\"icon icon-common icon-info\" />}\n          {type === 'error' && <span className=\"icon icon-common icon-bolt\" />}\n          {type === 'warning' && (\n            <span className=\"icon icon-common icon-exclamation-triangle\" />\n          )}{' '}\n          {title || ''}\n        </h3>\n      )}\n      <div className=\"vf-banner__content\">{children}</div>\n    </div>\n  );\n};\n\nexport default InfoBanner;\n","import React from 'react';\nimport Tippy from '@tippyjs/react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport 'tippy.js/dist/tippy.css';\n\ntype TooltipProps = {\n  content: React.ReactNode;\n  children?: React.ReactNode;\n};\n\nconst Tooltip: React.FC<TooltipProps> = ({ content, children }) => (\n  <Tippy content={content}>{children as React.ReactElement}</Tippy>\n);\nexport default Tooltip;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { getSimpleTaxLineage } from 'utils/taxon';\n\nconst initialPageSize = 10;\nconst GenomesTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'genomes-page': 1,\n      'genomes-page_size': initialPageSize,\n      'genomes-order': '',\n    },\n    {\n      'genomes-page': Number,\n      'genomes-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `genome-catalogues/${accession}/genomes`,\n    {\n      page: queryParameters['genomes-page'] as number,\n      ordering: queryParameters['genomes-order'] as string,\n      page_size: queryParameters['genomes-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (genome) => genome.relationships.biome.data?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      disableSortBy: true,\n    },\n    {\n      id: 'genome',\n      Header: 'Accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Length',\n      accessor: 'attributes.length',\n    },\n    {\n      Header: 'Num. of genomes',\n      accessor: 'attributes.num-genomes-total',\n    },\n    {\n      Header: 'Completeness',\n      accessor: 'attributes.completeness',\n    },\n    {\n      Header: 'Contamination',\n      accessor: 'attributes.contamination',\n    },\n    {\n      Header: 'Type',\n      accessor: 'attributes.type',\n      disableSortBy: true,\n    },\n    {\n      Header: 'Taxonomy',\n      accessor: 'attributes.taxon-lineage',\n      Cell: ({ cell }) => getSimpleTaxLineage(cell.value, true),\n      disableSortBy: true,\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['genomes-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"genomes-\"\n      sortable\n    />\n  );\n};\n\nexport default GenomesTable;\n","import React, { useState, useEffect } from 'react';\nimport './style.css';\n\nconst ANIMATION_TIME = 400;\n\nexport type Node = {\n  name: string;\n  countgen?: number;\n  type: string;\n  children?: Node[];\n};\n\ninterface HierarchyNodeProps {\n  tree: Node;\n  depth?: number;\n  shouldExpand?: boolean;\n  collapsing?: boolean;\n  getLabel?: (node: Node) => string | React.ReactElement;\n}\nconst HierarchyNode: React.FC<HierarchyNodeProps> = ({\n  tree,\n  depth = 0,\n  shouldExpand = true,\n  collapsing = false,\n  getLabel = (node) => node.name,\n}) => {\n  const [displayChildren, setDisplayChildren] = useState(shouldExpand);\n  const [show, setShow] = useState(false);\n  const [hideChildren, setHideChildren] = useState(false);\n  useEffect(() => setShow(true), []);\n  useEffect(() => {\n    if (hideChildren) {\n      setTimeout(() => setDisplayChildren(false), ANIMATION_TIME);\n    }\n  }, [hideChildren]);\n  const handleExpanderClick = (): void => {\n    setHideChildren(displayChildren);\n    if (!displayChildren) setDisplayChildren(true);\n  };\n  return (\n    <div\n      style={{\n        marginLeft: `${depth * 0.5}rem`,\n      }}\n    >\n      <div\n        className={`mg-hierarchy-selector ${show && !collapsing ? 'show' : ''}`}\n      >\n        {tree.children?.length ? (\n          <button\n            type=\"button\"\n            className=\"mg-expander\"\n            onClick={handleExpanderClick}\n          >\n            {displayChildren ? '▾' : '▸'}\n          </button>\n        ) : (\n          <span className=\"mg-hierarchy-spacer\" />\n        )}\n        <div>\n          <span className=\"mg-hierarchy-label\">\n            {getLabel(tree)}{' '}\n            {tree.countgen && (\n              <span className=\"mg-number\">{tree.countgen}</span>\n            )}\n          </span>\n        </div>\n      </div>\n      {tree.children &&\n        tree.children.length &&\n        displayChildren &&\n        tree.children.map((child) => (\n          <HierarchyNode\n            key={child.name}\n            tree={child}\n            depth={depth + 1}\n            shouldExpand={tree.countgen === 1 && child.countgen === 1}\n            getLabel={getLabel}\n            collapsing={hideChildren}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default HierarchyNode;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport HierarchyNode, { Node } from 'components/UI/Hierarchy';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport useURLAccession from 'hooks/useURLAccession';\n\nconst PhyloTree: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}/downloads/phylo_tree.json`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  return (\n    <HierarchyNode\n      tree={data as unknown as Node}\n      getLabel={(node) => {\n        const label = node.name.split('__').pop();\n        if (node.type === 'genome') {\n          return (\n            <Link to={`/genomes/${label}`} style={{ backgroundColor: 'white' }}>\n              {label}\n            </Link>\n          );\n        }\n\n        return label || 'Unknown';\n      }}\n    />\n  );\n};\nexport default PhyloTree;\n","import { useContext } from 'react';\n\nimport useData, {\n  MGnifyResponseGenericObj,\n  ResponseFormat,\n} from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\nconst useMgnifyBigsiSearch: (\n  sequence: string,\n  threshold: number,\n  cataloguesFilter: string\n) => MGnifyResponseGenericObj = (sequence, threshold, cataloguesFilter) => {\n  const { config } = useContext(UserContext);\n  const formData = new FormData();\n  formData.append('seq', sequence);\n  formData.append('threshold', String(threshold));\n  formData.append('catalogues_filter', cataloguesFilter);\n\n  const data = useData(\n    sequence.length && String(threshold).length && cataloguesFilter.length\n      ? `${config.api}genome-search`\n      : null,\n    ResponseFormat.JSON,\n    {\n      method: 'POST',\n      body: formData,\n    }\n  );\n  return data as MGnifyResponseGenericObj;\n};\n\nexport default useMgnifyBigsiSearch;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMgnifyBigsiSearch from 'hooks/data/useMgnifyBigsiSearch';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport { getSimpleTaxLineage, cleanTaxLineage } from 'utils/taxon';\nimport Tooltip from 'components/UI/Tooltip';\n\ntype ResultsProps = {\n  sequence: string;\n  threshold: number;\n  cataloguesFilter: string;\n};\nconst Results: React.FC<ResultsProps> = ({\n  sequence,\n  threshold,\n  cataloguesFilter,\n}) => {\n  const { data, loading, error } = useMgnifyBigsiSearch(\n    sequence,\n    threshold,\n    cataloguesFilter\n  );\n  if (loading) return <Loading />;\n  if (error) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      Header: 'Genome accession',\n      accessor: 'mgnify.id',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Taxonomic assignment',\n      accessor: 'mgnify.attributes.taxon-lineage',\n      Cell: ({ cell }) => (\n        <>\n          {getSimpleTaxLineage(cell.value, true)}{' '}\n          <Tooltip content={cleanTaxLineage(cell.value, ' > ')}>\n            <sup>\n              <span className=\"icon icon-common icon-info\" />\n            </sup>\n          </Tooltip>\n        </>\n      ),\n    },\n    {\n      Header: 'Genome length',\n      accessor: 'mgnify.attributes.length',\n    },\n    {\n      Header: 'Num. contigs',\n      accessor: 'mgnify.attributes.num-contigs',\n    },\n    {\n      Header: 'Genome completeness',\n      accessor: 'mgnify.attributes.completeness',\n    },\n    {\n      Header: 'Genome contamination',\n      accessor: 'mgnify.attributes.contamination',\n    },\n    {\n      Header: 'Geographic origin',\n      accessor: 'mgnify.attributes.geographic-origin',\n    },\n    {\n      Header: 'Num. K-mers in query',\n      accessor: 'bigsi.num_kmers',\n    },\n    {\n      Header: 'Num. K-mers found in genome',\n      accessor: 'bigsi.num_kmers_found',\n    },\n    {\n      Header: '% K-mers found',\n      accessor: 'bigsi.percent_kmers_found',\n    },\n    {\n      Header: 'BLAST score (log p)',\n      accessor: (result) => ({\n        score: result.bigsi.score,\n        pvalue: result.bigsi.log_pvalue,\n      }),\n      Cell: ({ cell }) => `${cell.value.score} (${cell.value.pvalue})`,\n    },\n  ];\n  if (!data) return null;\n\n  return (\n    <section>\n      <h3>BIGSI Results</h3>\n      <EMGTable\n        cols={columns}\n        data={data.results as Record<string, unknown>[]}\n        initialPageSize={100}\n        className=\"mg-anlyses-table\"\n        loading={loading}\n        showPagination={false}\n      />\n    </section>\n  );\n};\n\nexport default Results;\n","import React, { useState, useRef, useEffect } from 'react';\nimport 'textarea-sequence/dist/textarea-sequence';\n\nimport ExtLink from 'components/UI/ExtLink';\nimport Tooltip from 'components/UI/Tooltip';\n\nimport InfoBanner from 'components/UI/InfoBanner';\nimport FileUploaderButton from 'components/UI/FileUploaderButton';\nimport BigsiResults from './Results';\n\nimport example1 from './examples/human-gut-v2-0.txt';\nimport example2 from './examples/marine-v1-0.txt';\nimport example3 from './examples/cow-rumen-v1-0.txt';\nimport example4 from './examples/human-oral-v1-0.txt';\nimport './style.css';\n\nconst KMERS_DEFAULT = 0.4;\nconst MIN_BASES = 50;\n\nconst examples = {\n  'human-gut-v2-0': example1,\n  'marine-v1-0': example2,\n  'rumen-v1-0': example3,\n  'human-oral-v1-0': example4,\n};\n\ntype BigsyProps = {\n  catalogueName: string;\n  catalogueID: string;\n};\nconst BigsiSearch: React.FC<BigsyProps> = ({ catalogueName, catalogueID }) => {\n  const textareaSeq = useRef(null);\n  const [shouldSearch, setShouldSearch] = useState(false);\n  const [kmers, setKmers] = useState(KMERS_DEFAULT);\n  const [errors, setErrors] = useState<{\n    tooShort?: boolean;\n    multipleSequences?: boolean;\n    hasInvalidCharacters?: boolean;\n  }>({});\n  const [valid, setValid] = useState(false);\n  useEffect(() => {\n    textareaSeq.current.addEventListener('error-change', (e) => {\n      setErrors(e.detail.errors);\n      setValid(textareaSeq.current.quill.valid);\n    });\n  }, []);\n\n  const setSequence = (seq: string): void => {\n    textareaSeq.current.quill.setText(seq);\n  };\n\n  const handleExampleClick = (): void => {\n    if (catalogueID in examples) setSequence(examples[catalogueID]);\n    else setSequence(example1);\n  };\n\n  const handleKmersChange = (event): void => {\n    setKmers(Math.min(1, Math.max(0, Number(event.target.value))));\n  };\n  const handleClear = (): void => {\n    setSequence('');\n    setKmers(KMERS_DEFAULT);\n    setShouldSearch(false);\n  };\n\n  const handleFileLoad = (event): void => {\n    const { files } = event.target;\n    const reader = new FileReader();\n\n    reader.addEventListener(\n      'load',\n      () => setSequence(reader.result as string),\n      false\n    );\n\n    if (files && files.length) {\n      reader.readAsText(files[0]);\n    }\n  };\n\n  const handleCleanup = (): void => {\n    textareaSeq.current.cleanUp();\n  };\n  return (\n    <section id=\"genome-search\">\n      <section>\n        <h3>Search DNA fragments in the {catalogueName} catalogue</h3>\n        <p>\n          This is a{' '}\n          <ExtLink href=\"https://www.nature.com/articles/s41587-018-0010-1\">\n            BIGSI-based\n          </ExtLink>{' '}\n          search engine designed to query short sequence fragments (50-5,000 bp\n          in length) against representative genomes from the catalogue.\n        </p>\n      </section>\n      <section>\n        <div>\n          <h5>Enter a sequence</h5>\n          <p>You can use any of these methods to enter your sequence:</p>\n          <ul>\n            <li>Paste in your sequence in the area below.</li>\n            <li>\n              <label\n                htmlFor=\"sequence\"\n                id=\"example-seq\"\n                style={{ cursor: 'pointer' }}\n              >\n                Use the{' '}\n                <button\n                  type=\"button\"\n                  className=\"vf-button vf-button--link mg-button-as-link\"\n                  onClick={handleExampleClick}\n                >\n                  example.\n                </button>\n              </label>\n            </li>\n            <li>\n              <label htmlFor=\"fasta-file\" style={{ cursor: 'pointer' }}>\n                Upload a fasta file{' '}\n                <FileUploaderButton\n                  onChange={handleFileLoad}\n                  accept=\".fasta, .fna, .ffn, .frn, .fa, .txt\"\n                />\n              </label>\n            </li>\n          </ul>\n        </div>\n\n        <section>\n          <div />\n          <div>\n            <textarea-sequence\n              id=\"textareaID\"\n              height=\"10em\"\n              min-sequence-length={MIN_BASES}\n              single=\"true\"\n              ref={textareaSeq}\n              className=\"mg-sequence\"\n              disable-header-check\n            />\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"threshold\">\n              <Tooltip\n                content={`The minimum proportion of K-mers from the query that must be\n              matched (default: ${KMERS_DEFAULT})`}\n              >\n                <sup>\n                  <span className=\"icon icon-common icon-info\" />\n                </sup>\n              </Tooltip>{' '}\n              Threshold:\n            </label>{' '}\n            <input\n              id=\"threshold\"\n              name=\"threshold\"\n              type=\"number\"\n              min=\"0.1\"\n              max=\"1.0\"\n              value={kmers}\n              step=\"0.1\"\n              onChange={handleKmersChange}\n              className=\"vf-form__input mg-threshold\"\n            />\n          </div>\n          {!valid && (\n            <InfoBanner>\n              <div>\n                <p>\n                  The sequence above has the following errors and can&apos;t be\n                  submitted.\n                </p>\n                <ul>\n                  {errors.tooShort && (\n                    <li>\n                      The sequence has to have at least {MIN_BASES} nucleotides\n                    </li>\n                  )}\n                  {errors.hasInvalidCharacters && (\n                    <li>The sequence has invalid characters</li>\n                  )}\n                  {errors.multipleSequences && (\n                    <li>\n                      There are multiple sequences and only 1 is supported\n                    </li>\n                  )}\n                </ul>\n              </div>\n            </InfoBanner>\n          )}\n          <div className=\"mg-right\">\n            {!valid && (\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--sm vf-button--tertiary mg-button\"\n                onClick={handleCleanup}\n              >\n                CleanUp Sequence\n              </button>\n            )}\n            {valid && (\n              <button\n                id=\"search-button\"\n                type=\"button\"\n                className=\"vf-button vf-button--sm vf-button--primary\"\n                onClick={() => setShouldSearch(true)}\n              >\n                Search\n              </button>\n            )}\n            <button\n              id=\"clear-button\"\n              type=\"button\"\n              className=\"vf-button vf-button--sm vf-button--tertiary\"\n              onClick={handleClear}\n            >\n              Clear\n            </button>\n          </div>\n        </section>\n\n        {shouldSearch && (\n          <BigsiResults\n            sequence={textareaSeq.current.sequence}\n            threshold={kmers}\n            cataloguesFilter={catalogueID}\n          />\n        )}\n\n        <section>\n          <div id=\"results-section\" className=\"hidden\">\n            <div className=\"row\">\n              <div id=\"results-table\" className=\"columns\" />\n            </div>\n          </div>\n        </section>\n      </section>\n    </section>\n  );\n};\n\nexport default BigsiSearch;\n","import { useState } from 'react';\n\nconst useSearchStorage = (\n  namespace: string\n): {\n  jobs: Map<string, { time: number }>;\n  saveStorage: () => void;\n  addToStorage: (jobID: string) => void;\n  removeFromStorage: (jobID: string) => void;\n} => {\n  const [jobs, setJobs] = useState(\n    new Map<string, { time: number }>(\n      JSON.parse(localStorage.getItem(namespace) || '[]')\n    )\n  );\n  const saveStorage = (): void => {\n    localStorage.setItem(namespace, JSON.stringify(Array.from(jobs.entries())));\n    setJobs(new Map(jobs));\n  };\n\n  const addToStorage = (jobID: string): void => {\n    if (!jobs.has(jobID)) {\n      jobs.set(jobID, { time: Date.now() });\n      saveStorage();\n    }\n  };\n  const removeFromStorage = (jobID: string): void => {\n    if (jobs.has(jobID)) {\n      jobs.delete(jobID);\n      saveStorage();\n    }\n  };\n\n  const pruneOldJobs = (): void => {\n    const now = Date.now();\n    const okTime = 1000 * 60 * 60 * 24 * 30; // 30 days\n    let hasDeleted = false;\n    Array.from(jobs.entries()).forEach(([jobID, { time }]) => {\n      if (time < now - okTime) {\n        jobs.delete(jobID);\n        hasDeleted = true;\n      }\n    });\n    if (hasDeleted) {\n      saveStorage();\n    }\n  };\n  pruneOldJobs();\n  return {\n    jobs,\n    saveStorage,\n    addToStorage,\n    removeFromStorage,\n  };\n};\n\nexport default useSearchStorage;\n","import React from 'react';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\ntype HistoryProps = {\n  jobs: Map<string, { time: number }>;\n  removeFromStorage: (jobID: string) => void;\n};\n\nconst SourmashHistory: React.FC<HistoryProps> = ({\n  jobs,\n  removeFromStorage,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState({\n    job_id: '',\n  });\n  return (\n    <section>\n      <details>\n        <summary>\n          <h4 style={{ display: 'inline', cursor: 'pointer' }}>\n            Search History\n          </h4>\n        </summary>\n        <div>\n          <p>Here is a list of previous searches in this catalog:</p>\n          <div className=\"genome-search-history\">\n            {jobs.size === 0 ? (\n              \"We can't find any previous search jobs in this browser.\"\n            ) : (\n              <ul>\n                {Array.from(jobs.keys()).map((jobID) => (\n                  <li key={jobID}>\n                    <button\n                      type=\"button\"\n                      className=\"vf-button vf-button--link mg-button-as-link\"\n                      onClick={() =>\n                        setQueryParameters({\n                          ...queryParameters,\n                          job_id: jobID,\n                        })\n                      }\n                    >\n                      {jobID}\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"vf-button--outline vf-button--sm \"\n                      onClick={() => {\n                        removeFromStorage(jobID);\n                      }}\n                    >\n                      Remove\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n          <p className=\"small\">\n            <b>Notice</b>: Results are only kept in our servers for 30 days.\n          </p>\n        </div>\n      </details>\n    </section>\n  );\n};\nexport default SourmashHistory;\n","import React, { useRef, useState, useEffect } from 'react';\nimport 'mgnify-sourmash-component';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport useMgnifySourmashSearch from 'hooks/data/useMgnifySourmashSearch';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\ntype SourmashFormProps = {\n  catalogueID: string;\n};\nconst SourmashForm: React.FC<SourmashFormProps> = ({ catalogueID }) => {\n  const sourmash = useRef(null);\n  const [queryParameters, setQueryParameters] = useQueryParametersState({\n    job_id: '',\n  });\n  const [shouldSearch, setShouldSearch] = useState(false);\n  const [{ signatures, errors }, setSourmashState] = useState({\n    signatures: null,\n    errors: null,\n  });\n  const { data, error, loading } = useMgnifySourmashSearch(\n    shouldSearch ? 'gather' : '',\n    catalogueID,\n    signatures\n  );\n\n  useEffect(() => {\n    let sourmashElement;\n    const sketchedAll = (event): void => {\n      setSourmashState({\n        signatures: event.detail.signatures,\n        errors: event.detail.errors,\n      });\n    };\n    const changedFiles = (): void => {\n      setSourmashState({\n        signatures: null,\n        errors: null,\n      });\n    };\n    if (sourmash.current) {\n      sourmashElement = sourmash.current;\n      sourmashElement.addEventListener('sketchedall', sketchedAll);\n      sourmashElement.addEventListener('change', changedFiles);\n    }\n    return () => {\n      if (sourmashElement) {\n        sourmashElement.removeEventListener('sketchedall', sketchedAll);\n        sourmashElement.removeEventListener('change', changedFiles);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sourmash.current]);\n\n  useEffect(() => {\n    if (!loading && !error && data) {\n      // The signatures were succesfully sent and now we have job_id\n      setQueryParameters({\n        ...queryParameters,\n        job_id: (data.data as Record<string, string>).job_id,\n      });\n      setShouldSearch(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, error, loading]);\n\n  const handleSearch = (): void => {\n    setShouldSearch(true);\n  };\n\n  const handleClear = (): void => {\n    sourmash.current?.clear();\n    setShouldSearch(false);\n    setSourmashState({\n      signatures: null,\n      errors: null,\n    });\n  };\n  if (queryParameters.job_id) {\n    return null;\n  }\n  return (\n    <section id=\"search-mag-section\">\n      <mgnify-sourmash-component\n        id=\"sourmash\"\n        ref={sourmash}\n        show_directory_checkbox\n      />\n      <div>\n        <button\n          id=\"search-button-mag\"\n          type=\"button\"\n          className=\"vf-button vf-button--sm vf-button--primary mg-button\"\n          disabled={\n            Object.keys(signatures || {})?.length === 0 ||\n            Object.keys(errors || {}).length > 0\n          }\n          onClick={handleSearch}\n        >\n          Search\n        </button>\n        <button\n          id=\"clear-button-mag\"\n          type=\"button\"\n          className=\"vf-button vf-button--sm vf-button--tertiary\"\n          onClick={handleClear}\n        >\n          Clear\n        </button>\n      </div>\n      {loading && <Loading />}\n      {!loading && error && <FetchError error={error} />}\n    </section>\n  );\n};\n\nexport default SourmashForm;\n","import { useContext } from 'react';\n\nimport useData, {\n  MGnifyResponseGenericObj,\n  ResponseFormat,\n} from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\nconst useMgnifySourmashSearch: (\n  endpoint: 'gather' | '',\n  catalog: string,\n  signatures: { [filename: string]: string }\n) => MGnifyResponseGenericObj = (endpoint, catalog, signatures) => {\n  const { config } = useContext(UserContext);\n  const formdata = new FormData();\n  formdata.append('mag_catalog', catalog);\n  Object.entries(signatures || {}).forEach(([filename, signature]) => {\n    formdata.append(\n      'file_uploaded',\n      new Blob([signature], {\n        type: 'text/plain',\n      }),\n      filename\n    );\n  });\n  const data = useData(\n    endpoint.length && catalog.length && Object.keys(signatures || {}).length\n      ? `${config.api}genomes-search/${endpoint}`\n      : null,\n    ResponseFormat.JSON,\n    {\n      method: 'POST',\n      body: formdata,\n    }\n  );\n  return data as MGnifyResponseGenericObj;\n};\n\nexport default useMgnifySourmashSearch;\n","import { useContext } from 'react';\n\nimport useData, {\n  MGnifyResponseGenericObj,\n  ResponseFormat,\n} from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\nconst useMgnifySourmashStatus: (\n  endpoint: 'status' | '',\n  catalog: string,\n  jobID: string\n) => MGnifyResponseGenericObj = (endpoint, catalog, jobID) => {\n  const { config } = useContext(UserContext);\n\n  const data = useData(\n    endpoint.length && catalog.length\n      ? `${config.api}genomes-search/${endpoint}/${jobID}`\n      : null,\n    ResponseFormat.JSON,\n    {\n      method: 'GET',\n      cache: 'no-store',\n    }\n  );\n  return data as MGnifyResponseGenericObj;\n};\n\nexport default useMgnifySourmashStatus;\n","import React, { useMemo } from 'react';\nimport EMGTable from 'components/UI/EMGTable';\nimport { Link } from 'react-router-dom';\n\nconst emoji = {\n  SUCCESS: '✅',\n  FAILURE: '❌',\n  IN_QUEUE: '🕛',\n  NO_RESULTS: '🔸',\n  RUNNING: '🏃🏻‍♀️',\n};\n\ntype SourmashResultsTableProps = {\n  results: Array<Record<string, unknown>>;\n  loading: boolean;\n};\nconst SourmashResultsTable: React.FC<SourmashResultsTableProps> = ({\n  results,\n  loading,\n}) => {\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Filename',\n        accessor: 'filename',\n      },\n      {\n        Header: 'Status',\n        accessor: (r) => ({\n          status: r.status,\n          resultStatus: r.result?.status,\n        }),\n        Cell: ({ cell }) => (\n          <span style={{ whiteSpace: 'nowrap' }}>\n            {emoji[cell.value.resultStatus || cell.value.status]}{' '}\n            {cell.value.resultStatus || cell.value.status}\n          </span>\n        ),\n      },\n      {\n        id: 'match',\n        Header: (\n          <>\n            Best Match\n            <br />\n            (% query covered)\n          </>\n        ),\n        accessor: (x) => x,\n        Cell: ({ cell }) => {\n          if (\n            cell.value.status === 'SUCCESS' &&\n            cell.value.result?.status === 'NO_RESULTS'\n          )\n            return \"We couldn't find any matches with your query\";\n          if (cell.value.status === 'IN_QUEUE')\n            return `Position: ${cell.value.position_in_queue}`;\n          if (\n            cell.value.status === 'SUCCESS' &&\n            cell.value.result?.status !== 'NO_RESULTS'\n          )\n            return (\n              <span style={{ whiteSpace: 'nowrap' }}>\n                <Link to={`/genomes/${cell.value.result.match}`}>\n                  {cell.value.result.match}\n                </Link>{' '}\n                ({cell.value.result.p_query})\n              </span>\n            );\n\n          return cell.value.reason || null;\n        },\n        colspan: (cell) =>\n          cell.value.status === 'SUCCESS' &&\n          cell.value.result?.status !== 'NO_RESULTS'\n            ? 1\n            : 3,\n      },\n      {\n        Header: 'Total No. of matches',\n        accessor: 'result.matches',\n      },\n      {\n        Header: 'Download',\n        accessor: (x) => x,\n        Cell: ({ cell }) =>\n          cell.value.status === 'SUCCESS' &&\n          cell.value.result?.status !== 'NO_RESULTS' ? (\n            <a\n              download={`${cell.value.filename}.csv`}\n              href={cell.value.results_url}\n            >\n              <span className=\"icon icon-fileformats icon-CSV\" />\n            </a>\n          ) : null,\n      },\n    ],\n    []\n  );\n  return (\n    <EMGTable\n      cols={columns}\n      data={results.sort((s1, s2) => (s1.status < s2.status ? 1 : -1))}\n      initialPageSize={100}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      showPagination={false}\n    />\n  );\n};\n\nexport default SourmashResultsTable;\n","import React, { useEffect, useState } from 'react';\nimport 'mgnify-sourmash-component';\n\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport useInterval from 'hooks/useInterval';\nimport useMgnifySourmashStatus from 'hooks/data/useMgnifySourmashStatus';\n// import SearchStorage from 'utils/SearchStorage';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport SourmashResultsTable from './Table';\n\nconst INTERVAL_TIME = 1000;\nconst COUNT_TO = 5;\ntype SourmashResultsProps = {\n  catalogueID: string;\n  addToStorage: (jobID: string) => void;\n};\n\nconst SourmashResults: React.FC<SourmashResultsProps> = ({\n  catalogueID,\n  addToStorage,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState({\n    job_id: '',\n  });\n  const [count, setCount] = useState(-1);\n  const [shouldCheck, setShouldCheck] = useState(false);\n  const [jobRetrieved, setJobRetrieved] = useState(false);\n  const [job, setJob] = useState(null);\n\n  useInterval(() => {\n    if (!queryParameters.job_id || jobRetrieved) return;\n    if (count % COUNT_TO === 0) {\n      setShouldCheck(true);\n    }\n    setCount((c) => c + 1);\n  }, INTERVAL_TIME);\n  const { data, error, loading } = useMgnifySourmashStatus(\n    shouldCheck && !jobRetrieved ? `status` : '',\n    catalogueID,\n    queryParameters.job_id as string\n  );\n  useEffect(() => {\n    if (!loading && !error && data) {\n      const results = data?.data as Record<string, Array<{ status: string }>>;\n      // Got the status of the job\n      if (\n        !(results?.signatures || []).some((s) =>\n          ['PENDING', 'IN_QUEUE', 'RUNNING'].includes(s.status)\n        )\n      ) {\n        setJobRetrieved(true);\n        addToStorage(queryParameters.job_id as string);\n      }\n      setJob(data.data);\n      setCount(0);\n      setShouldCheck(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, error, loading]);\n\n  useEffect(() => {\n    setJob(null);\n    setShouldCheck(true);\n    setJobRetrieved(false);\n    setCount(-1);\n  }, [queryParameters.job_id]);\n\n  const handleNewSearch = (): void => {\n    setQueryParameters({\n      ...queryParameters,\n      job_id: '',\n    });\n  };\n  if (!queryParameters.job_id) return null;\n  return (\n    <section>\n      <div className=\"vf-stack\">\n        <div>\n          <h4>Search Results</h4>\n          <div>\n            {jobRetrieved && <p>✅ Here are the results of your Job.</p>}\n            {!loading && error && <FetchError error={error} />}\n            {!jobRetrieved && !error && (\n              <p>🔎 Getting the results of your Job</p>\n            )}\n          </div>\n          <h5>Job Information</h5>\n          <dl className=\"vf-list vf-list--definition\">\n            <dt>Job ID</dt>\n            <dd>{queryParameters.job_id}</dd>\n            <dt>Status</dt>\n            <dd>\n              <span>{jobRetrieved ? 'FINISH' : 'Retrieving'}</span>{' '}\n              {loading && <Loading size=\"small\" />}{' '}\n              {!jobRetrieved && !loading && (\n                <span>Checking status in {COUNT_TO - (count % COUNT_TO)}</span>\n              )}\n            </dd>\n            <dt>Link</dt>\n            <dd id=\"results-link\">\n              <a href={window.location.href}>{window.location.href}</a>\n              {jobRetrieved &&\n                job?.signatures.some(({ status }) => status === 'SUCCESS') && (\n                  <a\n                    className=\"vf-button vf-button--sm\"\n                    download={`${job.group_id}.tgz`}\n                    href={job.results_url}\n                  >\n                    <span className=\"icon icon-common icon-download\" />\n                    Download all Results [.tgz]\n                  </a>\n                )}\n            </dd>\n            {job && (\n              <>\n                <dt>Processed Files</dt>\n                <dd>\n                  <SourmashResultsTable\n                    results={job.signatures}\n                    loading={loading}\n                  />\n                </dd>\n              </>\n            )}\n          </dl>\n        </div>\n        <div className=\"columns text-center\">\n          <button\n            type=\"button\"\n            className=\"vf-button vf-button--sm\"\n            onClick={handleNewSearch}\n          >\n            Start a new search\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default SourmashResults;\n","import React from 'react';\nimport 'mgnify-sourmash-component';\nimport SourmashLogo from 'images/sourmash_logo.png';\nimport InfoBanner from 'components/UI/InfoBanner';\nimport useSearchStorage from 'hooks/useSearchStorage';\nimport SourmashHistory from './History';\nimport SourmashForm from './Form';\nimport SourmashResults from './Results';\n\ntype SourmashProps = {\n  catalogueName: string;\n  catalogueID: string;\n};\n\nconst SourmashSearch: React.FC<SourmashProps> = ({\n  catalogueName,\n  catalogueID,\n}) => {\n  const { jobs, addToStorage, removeFromStorage } = useSearchStorage(\n    `sourmashJobs-${catalogueID}`\n  );\n  return (\n    <section id=\"genome-search-mag\">\n      <section className=\"vf-stack\">\n        <div style={{ width: '100%', textAlign: 'right' }}>\n          Powered by <a href=\"https://sourmash.readthedocs.io/\">Sourmash</a>.\n          <img\n            src={SourmashLogo}\n            style={{ height: '2em' }}\n            alt=\"Sourmash logo\"\n          />\n        </div>\n\n        <h3>Search MAG files in the {catalogueName} catalogue</h3>\n        <p>\n          Compare your MAG file or your MAG collection against this catalog to\n          see if they are novel.\n          <br />\n        </p>\n        <InfoBanner>\n          <details className=\"mg-sourmash-readmore\">\n            <summary>Instructions</summary>\n            <p>\n              Use the browse button below to upload either a single FastA file,\n              or multiple files by holding [ctrl] or [shift] while clicking in\n              the file explorer. Alternatively you can select a whole directory\n              of files using the directory mode (select this option below the\n              Browse button). In this mode, the tool will process all FastA\n              files in the selected directory, however it will not descend into\n              subdirectories.\n            </p>\n            <p>\n              Your files are not uploaded into our servers. Rather, Sourmash\n              generates a signature of your file(s) in your browser, and\n              compares this against our MAG catalogue.\n            </p>\n            <p>\n              Successful searches create a CSV result file for each signature\n              submitted. These are compiled into a TGZ allowing you to fetch all\n              your results in one click. These result files are only stored in\n              our servers for 30 days, so please be sure to download them before\n              they expire.\n            </p>\n          </details>\n        </InfoBanner>\n        <SourmashForm catalogueID={catalogueID} />\n        <SourmashResults\n          catalogueID={catalogueID}\n          addToStorage={addToStorage}\n        />\n        <SourmashHistory jobs={jobs} removeFromStorage={removeFromStorage} />\n      </section>\n    </section>\n  );\n};\n\nexport default SourmashSearch;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport GenomesTable from 'components/Genomes/Table';\nimport PhyloTree from 'components/Genomes/PhyloTree';\nimport BigsiSearch from 'components/Genomes/Bigsi';\nimport SourmashSearch from 'components/Genomes/Sourmash';\nimport RouteForHash from 'components/Nav/RouteForHash';\n\nconst tabs = [\n  { label: 'Genome list', to: '#' },\n  { label: 'Taxonomy tree', to: '#phylo-tab' },\n  { label: 'Protein catalogue', to: '#protein-catalog-tab' },\n  { label: 'Search by Gene', to: '#genome-search-tab' },\n  { label: 'Search by MAG', to: '#genome-search-mag-tab' },\n];\n\nconst GenomePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: genomeData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>{genomeData.attributes.name}</h2>\n      <div>\n        <ReactMarkdown>\n          {genomeData.attributes.description as string}\n        </ReactMarkdown>\n      </div>\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"\" isDefault>\n            <GenomesTable />\n          </RouteForHash>\n          <RouteForHash hash=\"#phylo-tab\">\n            <PhyloTree />\n          </RouteForHash>\n          <RouteForHash hash=\"#genome-search-tab\">\n            <BigsiSearch\n              catalogueName={genomeData.attributes.name as string}\n              catalogueID={genomeData.id}\n            />\n          </RouteForHash>\n          <RouteForHash hash=\"#genome-search-mag-tab\">\n            <SourmashSearch\n              catalogueName={genomeData.attributes.name as string}\n              catalogueID={genomeData.id}\n            />\n          </RouteForHash>\n          <RouteForHash hash=\"#protein-catalog-tab\">\n            <h3>{genomeData.attributes['protein-catalogue-name'] as string}</h3>\n            <ReactMarkdown>\n              {genomeData.attributes['protein-catalogue-description'] as string}\n            </ReactMarkdown>\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default GenomePage;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["onChange","accept","fileInput","useRef","type","hidden","ref","className","onClick","current","click","title","children","includes","content","accession","useURLAccession","queryParameters","Number","data","loading","error","isStale","useMGnifyData","page","ordering","page_size","Loading","size","FetchError","columns","id","Header","accessor","genome","relationships","biome","Cell","cell","value","style","float","disableSortBy","to","Date","toLocaleDateString","EMGTable","cols","initialPage","initialPageSize","namespace","sortable","HierarchyNode","tree","depth","shouldExpand","collapsing","getLabel","node","name","displayChildren","setDisplayChildren","useState","show","setShow","hideChildren","setHideChildren","useEffect","setTimeout","marginLeft","length","countgen","map","child","key","Hierarchy","label","split","pop","backgroundColor","sequence","threshold","cataloguesFilter","config","useContext","UserContext","formData","FormData","append","String","useData","api","method","body","Tooltip","result","score","bigsi","pvalue","log_pvalue","results","showPagination","examples","catalogueName","catalogueID","textareaSeq","shouldSearch","setShouldSearch","kmers","setKmers","errors","setErrors","valid","setValid","addEventListener","e","detail","quill","setSequence","seq","setText","ExtLink","href","htmlFor","cursor","FileUploaderButton","event","files","target","reader","FileReader","readAsText","height","single","min","max","step","Math","InfoBanner","tooShort","hasInvalidCharacters","multipleSequences","cleanUp","jobs","removeFromStorage","setQueryParameters","job_id","display","Array","from","keys","jobID","sourmash","signatures","setSourmashState","endpoint","catalog","formdata","Object","entries","forEach","filename","signature","Blob","sourmashElement","sketchedAll","changedFiles","removeEventListener","show_directory_checkbox","disabled","clear","emoji","SUCCESS","FAILURE","IN_QUEUE","NO_RESULTS","RUNNING","useMemo","r","status","resultStatus","whiteSpace","x","position_in_queue","match","p_query","reason","colspan","download","results_url","sort","s1","s2","addToStorage","count","setCount","shouldCheck","setShouldCheck","jobRetrieved","setJobRetrieved","job","setJob","useInterval","c","cache","some","s","window","location","group_id","setJobs","Map","JSON","parse","localStorage","getItem","saveStorage","setItem","stringify","now","hasDeleted","time","delete","pruneOldJobs","has","set","width","textAlign","src","alt","tabs","genomeData","attributes","description","Tabs","RouteForHash","hash","isDefault","Bigsi","Sourmash","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}