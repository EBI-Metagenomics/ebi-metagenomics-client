{"version":3,"file":"js/792.4cbda3f7.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Nav/RouteForHash/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/components/Genomes/Table/index.tsx","webpack://mgportalv2/./src/components/UI/Hierarchy/index.tsx","webpack://mgportalv2/./src/components/Genomes/PhyloTree/index.tsx","webpack://mgportalv2/./src/pages/GenomeCatalogue/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts","webpack://mgportalv2/./src/utils/taxon.ts"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\ntype PropsType = {\n  hash: string;\n  isDefault?: boolean;\n};\nconst RouteForHash: React.FC<PropsType> = ({\n  hash,\n  isDefault = false,\n  children,\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (location.hash === '' && hash !== '' && isDefault) {\n      navigate(hash, { replace: true });\n    }\n  });\n\n  if (location.hash === hash) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport default RouteForHash;\n","import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse, MGnifyDatum } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse | Array<MGnifyDatum>;\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title: Title,\n  initialPage = 0,\n  initialPageSize = 25,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  sortable = false,\n  loading = false,\n  isStale = false,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: (data as MGnifyResponse)?.data || data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount: (data as MGnifyResponse)?.meta?.pagination?.pages || 1,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped ${className}`}\n          ref={tableRef}\n        >\n          {Title && (\n            <caption className=\"vf-table__caption\">\n              {typeof Title === 'string' ? Title : <Title />}\n            </caption>\n          )}\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"vf-table__row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    navigate(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      navigate(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  const parts = location.pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { getSimpleTaxLineage } from 'utils/taxon';\n\nconst initialPageSize = 10;\nconst GenomesTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'genomes-page': 1,\n      'genomes-page_size': initialPageSize,\n      'genomes-order': '',\n    },\n    {\n      'genomes-page': Number,\n      'genomes-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `genome-catalogues/${accession}/genomes`,\n    {\n      page: queryParameters['genomes-page'] as number,\n      ordering: queryParameters['genomes-order'] as string,\n      page_size: queryParameters['genomes-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (genome) => genome.relationships.biome.data?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      disableSortBy: true,\n    },\n    {\n      id: 'genome',\n      Header: 'Accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Length',\n      accessor: 'attributes.length',\n    },\n    {\n      Header: 'Num. of genomes',\n      accessor: 'attributes.num-genomes-total',\n    },\n    {\n      Header: 'Completeness',\n      accessor: 'attributes.completeness',\n    },\n    {\n      Header: 'Contamination',\n      accessor: 'attributes.contamination',\n    },\n    {\n      Header: 'Type',\n      accessor: 'attributes.type',\n      disableSortBy: true,\n    },\n    {\n      Header: 'Taxonomy',\n      accessor: 'attributes.taxon-lineage',\n      Cell: ({ cell }) => getSimpleTaxLineage(cell.value, true),\n      disableSortBy: true,\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['genomes-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"genomes-\"\n      sortable\n    />\n  );\n};\n\nexport default GenomesTable;\n","import React, { useState, useEffect } from 'react';\nimport './style.css';\n\nconst ANIMATION_TIME = 400;\n\nexport type Node = {\n  name: string;\n  countgen?: number;\n  type: string;\n  children?: Node[];\n};\n\ninterface HierarchyNodeProps {\n  tree: Node;\n  depth?: number;\n  shouldExpand?: boolean;\n  collapsing?: boolean;\n  getLabel?: (node: Node) => string | React.ReactElement;\n}\nconst HierarchyNode: React.FC<HierarchyNodeProps> = ({\n  tree,\n  depth = 0,\n  shouldExpand = true,\n  collapsing = false,\n  getLabel = (node) => node.name,\n}) => {\n  const [displayChildren, setDisplayChildren] = useState(shouldExpand);\n  const [show, setShow] = useState(false);\n  const [hideChildren, setHideChildren] = useState(false);\n  useEffect(() => setShow(true), []);\n  useEffect(() => {\n    if (hideChildren) {\n      setTimeout(() => setDisplayChildren(false), ANIMATION_TIME);\n    }\n  }, [hideChildren]);\n  const handleExpanderClick = (): void => {\n    setHideChildren(displayChildren);\n    if (!displayChildren) setDisplayChildren(true);\n  };\n  return (\n    <div\n      style={{\n        marginLeft: `${depth * 0.5}rem`,\n      }}\n    >\n      <div\n        className={`mg-hierarchy-selector ${show && !collapsing ? 'show' : ''}`}\n      >\n        {tree.children?.length ? (\n          <button\n            type=\"button\"\n            className=\"mg-expander\"\n            onClick={handleExpanderClick}\n          >\n            {displayChildren ? '▾' : '▸'}\n          </button>\n        ) : (\n          <span className=\"mg-hierarchy-spacer\" />\n        )}\n        <div>\n          <span className=\"mg-hierarchy-label\">\n            {getLabel(tree)}{' '}\n            {tree.countgen && (\n              <span className=\"mg-number\">{tree.countgen}</span>\n            )}\n          </span>\n        </div>\n      </div>\n      {tree.children &&\n        tree.children.length &&\n        displayChildren &&\n        tree.children.map((child) => (\n          <HierarchyNode\n            key={child.name}\n            tree={child}\n            depth={depth + 1}\n            shouldExpand={tree.countgen === 1 && child.countgen === 1}\n            getLabel={getLabel}\n            collapsing={hideChildren}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default HierarchyNode;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport HierarchyNode, { Node } from 'components/UI/Hierarchy';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport useURLAccession from 'hooks/useURLAccession';\n\nconst PhyloTree: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}/downloads/phylo_tree.json`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  return (\n    <HierarchyNode\n      tree={data as unknown as Node}\n      getLabel={(node) => {\n        const label = node.name.split('__').pop();\n        if (node.type === 'genome') {\n          return (\n            <Link to={`/genomes/${label}`} style={{ backgroundColor: 'white' }}>\n              {label}\n            </Link>\n          );\n        }\n\n        return label || 'Unknown';\n      }}\n    />\n  );\n};\nexport default PhyloTree;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport GenomesTable from 'components/Genomes/Table';\nimport PhyloTree from 'components/Genomes/PhyloTree';\nimport ReactMarkdown from 'react-markdown';\n\nimport RouteForHash from 'components/Nav/RouteForHash';\n\nconst tabs = [\n  { label: 'Genome list', to: '#' },\n  { label: 'Taxonomy tree', to: '#phylo-tab' },\n  { label: 'Protein catalogue', to: '#protein-catalog-tab' },\n  { label: 'Search by Gene', to: '#genome-search-tab' },\n  { label: 'Search by MAG', to: '#genome-search-mag-tab' },\n];\n\nconst GenomePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: genomeData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>{genomeData.attributes.name}</h2>\n      <div>\n        <ReactMarkdown>\n          {genomeData.attributes.description as string}\n        </ReactMarkdown>\n      </div>\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"\" isDefault>\n            <GenomesTable />\n          </RouteForHash>\n          <RouteForHash hash=\"#phylo-tab\">\n            <PhyloTree />\n          </RouteForHash>\n          <RouteForHash hash=\"#protein-catalog-tab\">\n            <h3>{genomeData.attributes['protein-catalogue-name'] as string}</h3>\n            <ReactMarkdown>\n              {genomeData.attributes['protein-catalogue-description'] as string}\n            </ReactMarkdown>\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default GenomePage;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n","/**\n * Remove the s__ prefixes from a lineage.\n * @param {string} lineage string with the lineage `d__Bacteria;p__Proteobacteria;c__Gammapr...`\n * @param {string} replace replace string\n * @return {string}\n */\nexport function cleanTaxLineage(lineage: string, replace = ''): string {\n  return lineage.replace(/;/g, '').replace(/[d|p|c|o|f|g|s]__/g, replace);\n}\n\n/**\n * Retrieve a non-blank taxonomic identity from the species level or upwards\n * @param {string} fullLineage\n * @param {bool} removePrefix true if this should remove the 'd|p|c|o|f|g|s__' prefix\n * @return {string}\n */\nexport function getSimpleTaxLineage(\n  fullLineage: string,\n  removePrefix: boolean\n): string {\n  const l = fullLineage.split(';');\n  let head = l.pop();\n  // Remove all until species\n  while (head.indexOf('s__') === -1) {\n    head = l.pop();\n  }\n  // Find first non-null\n  while (head.length <= 3) {\n    head = l.pop();\n  }\n  if (removePrefix && head) {\n    return cleanTaxLineage(head);\n  }\n  return head;\n}\n\nexport const TAXONOMY_COLOURS = [\n  '#058dc7',\n  '#82d23d',\n  '#e26736',\n  '#fbe300',\n  '#24cbe5',\n  '#c49ecc',\n  '#ffc08a',\n  '#708090',\n  '#6af9c4',\n  '#caae74',\n  '#cccccc',\n];\n"],"names":["hash","isDefault","children","location","navigate","useEffect","replace","currentPageIndex","pageIndex","gotoPage","className","type","onClick","cols","data","title","Title","initialPage","initialPageSize","namespace","showPagination","sortable","loading","isStale","queryParameters","setQueryParameters","Number","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","useRef","isChangingPage","setChangingPage","useState","current","scrollIntoView","order","tableSortBy","length","col","desc","id","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","page","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","target","value","Loading","size","undefined","ref","map","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","key","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onBlur","onChange","pg","disabled","paginationIndex","refreshPage","window","reload","error","style","backgroundColor","status","tabs","label","Label","to","pathname","startsWith","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","Object","entries","forEach","parameter","serializer","String","get","useQueryParametersState","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","parts","split","accession","useURLAccession","useMGnifyData","ordering","page_size","FetchError","Header","accessor","genome","relationships","biome","Cell","float","disableSortBy","Date","toLocaleDateString","EMGTable","HierarchyNode","tree","depth","shouldExpand","collapsing","getLabel","node","name","displayChildren","setDisplayChildren","show","setShow","hideChildren","setHideChildren","setTimeout","marginLeft","countgen","child","Hierarchy","pop","genomeData","attributes","description","Tabs","RouteForHash","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","x","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6","cleanTaxLineage","getSimpleTaxLineage","fullLineage","removePrefix","l","head","indexOf","TAXONOMY_COLOURS"],"sourceRoot":""}