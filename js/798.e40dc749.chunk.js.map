{"version":3,"file":"js/798.e40dc749.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/Tooltip/index.tsx","webpack://mgportalv2/./src/components/Genomes/Table/index.tsx","webpack://mgportalv2/./src/components/UI/Hierarchy/index.tsx","webpack://mgportalv2/./src/components/Genomes/PhyloTree/index.tsx","webpack://mgportalv2/./src/components/UI/InfoBanner/index.tsx","webpack://mgportalv2/./src/hooks/data/useMgnifyBigsiSearch/index.tsx","webpack://mgportalv2/./src/components/Genomes/Bigsi/Results.tsx","webpack://mgportalv2/./src/components/Genomes/Bigsi/index.tsx","webpack://mgportalv2/./src/pages/GenomeCatalogue/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React from 'react';\nimport Tippy from '@tippyjs/react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport 'tippy.js/dist/tippy.css';\n\ntype TooltipProps = {\n  content: React.ReactNode;\n  children?: React.ReactNode;\n};\n\nconst Tooltip: React.FC<TooltipProps> = ({ content, children }) => (\n  <Tippy content={content}>{children as React.ReactElement}</Tippy>\n);\nexport default Tooltip;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { getSimpleTaxLineage } from 'utils/taxon';\n\nconst initialPageSize = 10;\nconst GenomesTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'genomes-page': 1,\n      'genomes-page_size': initialPageSize,\n      'genomes-order': '',\n    },\n    {\n      'genomes-page': Number,\n      'genomes-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `genome-catalogues/${accession}/genomes`,\n    {\n      page: queryParameters['genomes-page'] as number,\n      ordering: queryParameters['genomes-order'] as string,\n      page_size: queryParameters['genomes-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (genome) => genome.relationships.biome.data?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      disableSortBy: true,\n    },\n    {\n      id: 'genome',\n      Header: 'Accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Length',\n      accessor: 'attributes.length',\n    },\n    {\n      Header: 'Num. of genomes',\n      accessor: 'attributes.num-genomes-total',\n    },\n    {\n      Header: 'Completeness',\n      accessor: 'attributes.completeness',\n    },\n    {\n      Header: 'Contamination',\n      accessor: 'attributes.contamination',\n    },\n    {\n      Header: 'Type',\n      accessor: 'attributes.type',\n      disableSortBy: true,\n    },\n    {\n      Header: 'Taxonomy',\n      accessor: 'attributes.taxon-lineage',\n      Cell: ({ cell }) => getSimpleTaxLineage(cell.value, true),\n      disableSortBy: true,\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['genomes-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"genomes-\"\n      sortable\n    />\n  );\n};\n\nexport default GenomesTable;\n","import React, { useState, useEffect } from 'react';\nimport './style.css';\n\nconst ANIMATION_TIME = 400;\n\nexport type Node = {\n  name: string;\n  countgen?: number;\n  type: string;\n  children?: Node[];\n};\n\ninterface HierarchyNodeProps {\n  tree: Node;\n  depth?: number;\n  shouldExpand?: boolean;\n  collapsing?: boolean;\n  getLabel?: (node: Node) => string | React.ReactElement;\n}\nconst HierarchyNode: React.FC<HierarchyNodeProps> = ({\n  tree,\n  depth = 0,\n  shouldExpand = true,\n  collapsing = false,\n  getLabel = (node) => node.name,\n}) => {\n  const [displayChildren, setDisplayChildren] = useState(shouldExpand);\n  const [show, setShow] = useState(false);\n  const [hideChildren, setHideChildren] = useState(false);\n  useEffect(() => setShow(true), []);\n  useEffect(() => {\n    if (hideChildren) {\n      setTimeout(() => setDisplayChildren(false), ANIMATION_TIME);\n    }\n  }, [hideChildren]);\n  const handleExpanderClick = (): void => {\n    setHideChildren(displayChildren);\n    if (!displayChildren) setDisplayChildren(true);\n  };\n  return (\n    <div\n      style={{\n        marginLeft: `${depth * 0.5}rem`,\n      }}\n    >\n      <div\n        className={`mg-hierarchy-selector ${show && !collapsing ? 'show' : ''}`}\n      >\n        {tree.children?.length ? (\n          <button\n            type=\"button\"\n            className=\"mg-expander\"\n            onClick={handleExpanderClick}\n          >\n            {displayChildren ? '▾' : '▸'}\n          </button>\n        ) : (\n          <span className=\"mg-hierarchy-spacer\" />\n        )}\n        <div>\n          <span className=\"mg-hierarchy-label\">\n            {getLabel(tree)}{' '}\n            {tree.countgen && (\n              <span className=\"mg-number\">{tree.countgen}</span>\n            )}\n          </span>\n        </div>\n      </div>\n      {tree.children &&\n        tree.children.length &&\n        displayChildren &&\n        tree.children.map((child) => (\n          <HierarchyNode\n            key={child.name}\n            tree={child}\n            depth={depth + 1}\n            shouldExpand={tree.countgen === 1 && child.countgen === 1}\n            getLabel={getLabel}\n            collapsing={hideChildren}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default HierarchyNode;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport HierarchyNode, { Node } from 'components/UI/Hierarchy';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport useURLAccession from 'hooks/useURLAccession';\n\nconst PhyloTree: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}/downloads/phylo_tree.json`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  return (\n    <HierarchyNode\n      tree={data as unknown as Node}\n      getLabel={(node) => {\n        const label = node.name.split('__').pop();\n        if (node.type === 'genome') {\n          return (\n            <Link to={`/genomes/${label}`} style={{ backgroundColor: 'white' }}>\n              {label}\n            </Link>\n          );\n        }\n\n        return label || 'Unknown';\n      }}\n    />\n  );\n};\nexport default PhyloTree;\n","import React from 'react';\n\nconst InfoBanner: React.FC<{ Content: string | React.ElementType }> = ({\n  Content,\n}) => {\n  return (\n    <div className=\"vf-banner vf-banner--alert vf-banner--info\">\n      <div className=\"vf-banner__content\">\n        {Content &&\n          (typeof Content === 'string' ? (\n            <p className=\"vf-banner__text\">Content</p>\n          ) : (\n            <Content />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default InfoBanner;\n","import { useContext } from 'react';\n\nimport useData, {\n  MGnifyResponseGenericObj,\n  ResponseFormat,\n} from 'hooks/data/useData';\nimport UserContext from 'pages/Login/UserContext';\n\nconst useMgnifyBigsiSearch: (\n  sequence: string,\n  threshold: number,\n  cataloguesFilter: string\n) => MGnifyResponseGenericObj = (sequence, threshold, cataloguesFilter) => {\n  const { config } = useContext(UserContext);\n  const formData = new FormData();\n  formData.append('seq', sequence);\n  formData.append('threshold', String(threshold));\n  formData.append('catalogues_filter', cataloguesFilter);\n\n  const data = useData(\n    sequence.length && String(threshold).length && cataloguesFilter.length\n      ? `${config.api}genome-search`\n      : null,\n    ResponseFormat.JSON,\n    {\n      method: 'POST',\n      body: formData,\n    }\n  );\n  return data as MGnifyResponseGenericObj;\n};\n\nexport default useMgnifyBigsiSearch;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMgnifyBigsiSearch from 'hooks/data/useMgnifyBigsiSearch';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport { getSimpleTaxLineage, cleanTaxLineage } from 'utils/taxon';\nimport Tooltip from 'src/components/UI/Tooltip';\n\ntype ResultsProps = {\n  sequence: string;\n  threshold: number;\n  cataloguesFilter: string;\n};\nconst Results: React.FC<ResultsProps> = ({\n  sequence,\n  threshold,\n  cataloguesFilter,\n}) => {\n  const { data, loading, error } = useMgnifyBigsiSearch(\n    sequence,\n    threshold,\n    cataloguesFilter\n  );\n  if (loading) return <Loading />;\n  if (error) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      Header: 'Genome accession',\n      accessor: 'mgnify.id',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Taxonomic assignment',\n      accessor: 'mgnify.attributes.taxon-lineage',\n      Cell: ({ cell }) => (\n        <>\n          {getSimpleTaxLineage(cell.value, true)}{' '}\n          <Tooltip content={cleanTaxLineage(cell.value, ' > ')}>\n            <sup>\n              <span className=\"icon icon-common icon-info\" />\n            </sup>\n          </Tooltip>\n        </>\n      ),\n    },\n    {\n      Header: 'Genome length',\n      accessor: 'mgnify.attributes.length',\n    },\n    {\n      Header: 'Num. contigs',\n      accessor: 'mgnify.attributes.num-contigs',\n    },\n    {\n      Header: 'Genome completeness',\n      accessor: 'mgnify.attributes.completeness',\n    },\n    {\n      Header: 'Genome contamination',\n      accessor: 'mgnify.attributes.contamination',\n    },\n    {\n      Header: 'Geographic origin',\n      accessor: 'mgnify.attributes.geographic-origin',\n    },\n    {\n      Header: 'Num. K-mers in query',\n      accessor: 'bigsi.num_kmers',\n    },\n    {\n      Header: 'Num. K-mers found in genome',\n      accessor: 'bigsi.num_kmers_found',\n    },\n    {\n      Header: '% K-mers found',\n      accessor: 'bigsi.percent_kmers_found',\n    },\n    {\n      Header: 'BLAST score (log p)',\n      accessor: (result) => ({\n        score: result.bigsi.score,\n        pvalue: result.bigsi.log_pvalue,\n      }),\n      Cell: ({ cell }) => `${cell.value.score} (${cell.value.pvalue})`,\n    },\n  ];\n  if (!data) return null;\n\n  return (\n    <section>\n      <h3>BIGSI Results</h3>\n      <EMGTable\n        cols={columns}\n        data={data.results as Record<string, unknown>[]}\n        initialPageSize={100}\n        className=\"mg-anlyses-table\"\n        loading={loading}\n        showPagination={false}\n      />\n    </section>\n  );\n};\n\nexport default Results;\n","import React, { useState, useRef, useEffect } from 'react';\nimport 'textarea-sequence/dist/textarea-sequence';\n\nimport ExtLink from 'src/components/UI/ExtLink';\nimport Tooltip from 'components/UI/Tooltip';\n\nimport InfoBanner from 'src/components/UI/InfoBanner';\nimport BigsiResults from './Results';\n\nimport example1 from './examples/human-gut-v2-0.txt';\nimport example2 from './examples/marine-v1-0.txt';\nimport example3 from './examples/cow-rumen-v1-0.txt';\nimport example4 from './examples/human-oral-v1-0.txt';\nimport './style.css';\n\nconst KMERS_DEFAULT = 0.4;\nconst MIN_BASES = 50;\n\nconst examples = {\n  'human-gut-v2-0': example1,\n  'marine-v1-0': example2,\n  'rumen-v1-0': example3,\n  'human-oral-v1-0': example4,\n};\n\ntype BigsyProps = {\n  catalogueName: string;\n  catalogueID: string;\n};\nconst BigsiSearch: React.FC<BigsyProps> = ({ catalogueName, catalogueID }) => {\n  const textareaSeq = useRef(null);\n  const fileInput = useRef(null);\n  const [shouldSearch, setShouldSearch] = useState(false);\n  const [kmers, setKmers] = useState(KMERS_DEFAULT);\n  const [errors, setErrors] = useState<{\n    tooShort?: boolean;\n    multipleSequences?: boolean;\n    hasInvalidCharacters?: boolean;\n  }>({});\n  const [valid, setValid] = useState(false);\n  useEffect(() => {\n    textareaSeq.current.addEventListener('error-change', (e) => {\n      setErrors(e.detail.errors);\n      setValid(textareaSeq.current.quill.valid);\n    });\n  }, []);\n\n  const setSequence = (seq: string): void => {\n    textareaSeq.current.quill.setText(seq);\n  };\n\n  const handleExampleClick = (): void => {\n    if (catalogueID in examples) setSequence(examples[catalogueID]);\n    else setSequence(example1);\n  };\n\n  const handleKmersChange = (event): void => {\n    setKmers(Math.min(1, Math.max(0, Number(event.target.value))));\n  };\n  const handleClear = (): void => {\n    setSequence('');\n    setKmers(KMERS_DEFAULT);\n    setShouldSearch(false);\n    fileInput.current.value = '';\n  };\n\n  const handleFileLoad = (): void => {\n    const { files } = fileInput.current as HTMLInputElement;\n    const reader = new FileReader();\n\n    reader.addEventListener(\n      'load',\n      () => setSequence(reader.result as string),\n      false\n    );\n\n    if (files && files.length) {\n      reader.readAsText(files[0]);\n    }\n  };\n\n  const handleCleanup = (): void => {\n    textareaSeq.current.cleanUp();\n  };\n  return (\n    <section id=\"genome-search\">\n      <section>\n        <h3>Search DNA fragments in the {catalogueName} catalogue</h3>\n        <p>\n          This is a{' '}\n          <ExtLink href=\"https://www.nature.com/articles/s41587-018-0010-1\">\n            BIGSI-based\n          </ExtLink>{' '}\n          search engine designed to query short sequence fragments (50-5,000 bp\n          in length) against representative genomes from the catalogue.\n        </p>\n      </section>\n      <section>\n        <div>\n          <h5>Paste a sequence</h5>\n          <div id=\"message-containter\" />\n        </div>\n\n        <section>\n          <div>\n            <label\n              htmlFor=\"sequence\"\n              id=\"example-seq\"\n              style={{ cursor: 'pointer' }}\n            >\n              Paste in your sequence or use the{' '}\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--link mg-button-as-link\"\n                onClick={handleExampleClick}\n              >\n                example.\n              </button>\n            </label>\n\n            <label htmlFor=\"fasta-file\" style={{ cursor: 'pointer' }}>\n              Or upload a fasta file{' '}\n              <input\n                type=\"file\"\n                name=\"fasta\"\n                id=\"fasta-file\"\n                accept=\".fasta, .fna, .ffn, .frn, .fa, .txt\"\n                onChange={handleFileLoad}\n                ref={fileInput}\n              />\n            </label>\n          </div>\n          <div>\n            <textarea-sequence\n              id=\"textareaID\"\n              height=\"10em\"\n              min-sequence-length={MIN_BASES}\n              single=\"true\"\n              ref={textareaSeq}\n              className=\"mg-sequence\"\n              disable-header-check\n            />\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"threshold\">\n              <Tooltip\n                content={`The minimum proportion of K-mers from the query that must be\n              matched (default: ${KMERS_DEFAULT})`}\n              >\n                <sup>\n                  <span className=\"icon icon-common icon-info\" />\n                </sup>\n              </Tooltip>{' '}\n              Threshold:\n            </label>{' '}\n            <input\n              id=\"threshold\"\n              name=\"threshold\"\n              type=\"number\"\n              min=\"0.1\"\n              max=\"1.0\"\n              value={kmers}\n              step=\"0.1\"\n              onChange={handleKmersChange}\n            />\n          </div>\n          {!valid && (\n            <InfoBanner\n              Content={() => (\n                <div>\n                  <p>\n                    The sequence above has the following errors and can&apos;t\n                    be submitted.\n                  </p>\n                  <ul>\n                    {errors.tooShort && (\n                      <li>\n                        The sequence has to have at least {MIN_BASES}{' '}\n                        nucleotides\n                      </li>\n                    )}\n                    {errors.hasInvalidCharacters && (\n                      <li>The sequence has invalid characters</li>\n                    )}\n                    {errors.multipleSequences && (\n                      <li>\n                        There are multiple sequences and only 1 is supported\n                      </li>\n                    )}\n                  </ul>\n                </div>\n              )}\n            />\n          )}\n          <div className=\"mg-right\">\n            {!valid && (\n              <button\n                type=\"button\"\n                className=\"vf-button vf-button--sm vf-button--tertiary mg-button\"\n                onClick={handleCleanup}\n              >\n                CleanUp Sequence\n              </button>\n            )}\n            {valid && (\n              <button\n                id=\"search-button\"\n                type=\"button\"\n                className=\"vf-button vf-button--sm vf-button--primary\"\n                onClick={() => setShouldSearch(true)}\n              >\n                Search\n              </button>\n            )}\n            <button\n              id=\"clear-button\"\n              type=\"button\"\n              className=\"vf-button vf-button--sm vf-button--tertiary\"\n              onClick={handleClear}\n            >\n              Clear\n            </button>\n          </div>\n        </section>\n\n        {shouldSearch && (\n          <BigsiResults\n            sequence={textareaSeq.current.sequence}\n            threshold={kmers}\n            cataloguesFilter={catalogueID}\n          />\n        )}\n\n        <section>\n          <div id=\"results-section\" className=\"hidden\">\n            <div className=\"row\">\n              <div id=\"results-table\" className=\"columns\" />\n            </div>\n          </div>\n        </section>\n      </section>\n    </section>\n  );\n};\n\nexport default BigsiSearch;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport GenomesTable from 'components/Genomes/Table';\nimport PhyloTree from 'components/Genomes/PhyloTree';\nimport BigsiSearch from 'components/Genomes/Bigsi';\nimport RouteForHash from 'components/Nav/RouteForHash';\n\nconst tabs = [\n  { label: 'Genome list', to: '#' },\n  { label: 'Taxonomy tree', to: '#phylo-tab' },\n  { label: 'Protein catalogue', to: '#protein-catalog-tab' },\n  { label: 'Search by Gene', to: '#genome-search-tab' },\n  { label: 'Search by MAG', to: '#genome-search-mag-tab' },\n];\n\nconst GenomePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: genomeData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>{genomeData.attributes.name}</h2>\n      <div>\n        <ReactMarkdown>\n          {genomeData.attributes.description as string}\n        </ReactMarkdown>\n      </div>\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"\" isDefault>\n            <GenomesTable />\n          </RouteForHash>\n          <RouteForHash hash=\"#phylo-tab\">\n            <PhyloTree />\n          </RouteForHash>\n          <RouteForHash hash=\"#genome-search-tab\">\n            <BigsiSearch\n              catalogueName={genomeData.attributes.name as string}\n              catalogueID={genomeData.id}\n            />\n          </RouteForHash>\n          <RouteForHash hash=\"#protein-catalog-tab\">\n            <h3>{genomeData.attributes['protein-catalogue-name'] as string}</h3>\n            <ReactMarkdown>\n              {genomeData.attributes['protein-catalogue-description'] as string}\n            </ReactMarkdown>\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default GenomePage;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["content","children","accession","useURLAccession","queryParameters","Number","data","loading","error","isStale","useMGnifyData","page","ordering","page_size","Loading","size","FetchError","columns","id","Header","accessor","genome","relationships","biome","Cell","cell","className","value","style","float","disableSortBy","to","Date","toLocaleDateString","EMGTable","cols","initialPage","initialPageSize","namespace","sortable","HierarchyNode","tree","depth","shouldExpand","collapsing","getLabel","node","name","displayChildren","setDisplayChildren","useState","show","setShow","hideChildren","setHideChildren","useEffect","setTimeout","marginLeft","length","type","onClick","countgen","map","child","key","Hierarchy","label","split","pop","backgroundColor","Content","sequence","threshold","cataloguesFilter","config","useContext","UserContext","formData","FormData","append","String","useData","api","method","body","Tooltip","result","score","bigsi","pvalue","log_pvalue","results","showPagination","examples","catalogueName","catalogueID","textareaSeq","useRef","fileInput","shouldSearch","setShouldSearch","kmers","setKmers","errors","setErrors","valid","setValid","current","addEventListener","e","detail","quill","setSequence","seq","setText","ExtLink","href","htmlFor","cursor","accept","onChange","files","reader","FileReader","readAsText","ref","height","single","min","max","step","event","Math","target","tooShort","hasInvalidCharacters","multipleSequences","cleanUp","tabs","genomeData","attributes","description","Tabs","RouteForHash","hash","isDefault","Bigsi","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","x","toLowerCase","lineageD2","slice","join","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}