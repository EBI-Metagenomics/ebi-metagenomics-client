{"version":3,"file":"js/8.69384d51.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Nav/RouteForHash/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/TextInputDebounced/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/utils/taxon.ts"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\ntype PropsType = {\n  hash: string;\n  isDefault?: boolean;\n};\nconst RouteForHash: React.FC<PropsType> = ({\n  hash,\n  isDefault = false,\n  children,\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (location.hash === '' && hash !== '' && isDefault) {\n      navigate(hash, { replace: true });\n    }\n  });\n\n  if (location.hash === hash) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport default RouteForHash;\n","import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","import React, { useState, useCallback } from 'react';\nimport { debounce } from 'lodash-es';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport './style.css';\n\ntype TextInputDebouncedProps = {\n  namespace: string;\n};\nconst TextInputDebounced: React.FC<TextInputDebouncedProps> = ({\n  namespace,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState({\n    [`${namespace}search`]: '',\n  });\n  const [value, setValue] = useState(\n    (queryParameters[`${namespace}search`] as string) || ''\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounced = useCallback(\n    debounce((v: string): void => {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}search`]: v,\n      });\n    }, 300),\n    []\n  );\n  const handleOnChange = (event): void => {\n    const v = event.target.value;\n    setValue(v);\n    debounced(v);\n  };\n  return (\n    <div className=\"vf-form__item mg-textsearch\">\n      <label className=\"vf-form__label vf-search__label\" htmlFor=\"searchitem\">\n        Filter\n      </label>\n      <input\n        type=\"search\"\n        placeholder=\"Enter your search terms\"\n        id=\"searchitem\"\n        className=\"vf-form__input\"\n        onChange={handleOnChange}\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default TextInputDebounced;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse, MGnifyDatum } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\nimport TextInputDebounced from '../TextInputDebounced';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse | Array<MGnifyDatum>;\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  showTextFilter?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title: Title,\n  initialPage = 0,\n  initialPageSize = 25,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  showTextFilter = false,\n  sortable = false,\n  loading = false,\n  isStale = false,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n      [`${namespace}search`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: (data as MGnifyResponse)?.data || data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount: (data as MGnifyResponse)?.meta?.pagination?.pages || 1,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped mg-table ${className}`}\n          ref={tableRef}\n        >\n          {Title && (\n            <caption className=\"vf-table__caption mg-table-caption\">\n              <div>\n                {typeof Title === 'string' ? Title : <Title />}\n                {showTextFilter && <TextInputDebounced namespace={namespace} />}\n              </div>\n            </caption>\n          )}\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"vf-table__row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/data/useData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    navigate(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      navigate(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  let { pathname } = location;\n  if (pathname.trim().endsWith('/')) pathname = pathname.trim().slice(0, -1);\n  const parts = pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","/**\n * Remove the s__ prefixes from a lineage.\n * @param {string} lineage string with the lineage `d__Bacteria;p__Proteobacteria;c__Gammapr...`\n * @param {string} replace replace string\n * @return {string}\n */\nexport function cleanTaxLineage(lineage: string, replace = ''): string {\n  return lineage.replace(/;/g, '').replace(/[d|p|c|o|f|g|s]__/g, replace);\n}\n\n/**\n * Retrieve a non-blank taxonomic identity from the species level or upwards\n * @param {string} fullLineage\n * @param {bool} removePrefix true if this should remove the 'd|p|c|o|f|g|s__' prefix\n * @return {string}\n */\nexport function getSimpleTaxLineage(\n  fullLineage: string,\n  removePrefix: boolean\n): string {\n  const l = fullLineage.split(';');\n  let head = l.pop();\n  // Remove all until species\n  while (head.indexOf('s__') === -1) {\n    head = l.pop();\n  }\n  // Find first non-null\n  while (head.length <= 3) {\n    head = l.pop();\n  }\n  if (removePrefix && head) {\n    return cleanTaxLineage(head);\n  }\n  return head;\n}\n\nexport const TAXONOMY_COLOURS = [\n  '#058dc7',\n  '#82d23d',\n  '#e26736',\n  '#fbe300',\n  '#24cbe5',\n  '#c49ecc',\n  '#ffc08a',\n  '#708090',\n  '#6af9c4',\n  '#caae74',\n  '#cccccc',\n];\n"],"names":["hash","isDefault","children","location","navigate","useEffect","replace","currentPageIndex","pageIndex","gotoPage","className","type","onClick","namespace","queryParameters","setQueryParameters","value","setValue","useState","debounced","useCallback","debounce","v","htmlFor","placeholder","id","onChange","event","target","cols","data","title","Title","initialPage","initialPageSize","showPagination","showTextFilter","sortable","loading","isStale","Number","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","useRef","isChangingPage","setChangingPage","current","scrollIntoView","order","tableSortBy","length","col","desc","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","page","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","Loading","size","undefined","ref","map","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","key","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onBlur","pg","disabled","paginationIndex","refreshPage","window","reload","error","style","backgroundColor","status","tabs","label","Label","to","pathname","startsWith","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","Object","entries","forEach","parameter","serializer","String","get","useQueryParametersState","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","trim","endsWith","slice","parts","split","cleanTaxLineage","lineage","getSimpleTaxLineage","fullLineage","removePrefix","l","head","pop","indexOf","TAXONOMY_COLOURS"],"sourceRoot":""}