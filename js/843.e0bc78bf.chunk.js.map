{"version":3,"file":"js/843.e0bc78bf.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Nav/RouteForHash/index.tsx","webpack://mgportalv2/./src/components/Study/Studies/index.tsx","webpack://mgportalv2/./src/components/UI/KeyValueList/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/render.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/BySamplesArray/index.tsx","webpack://mgportalv2/./src/components/Sample/Overview/index.tsx","webpack://mgportalv2/./src/components/Sample/Runs/index.tsx","webpack://mgportalv2/./src/components/Sample/Assemblies/index.tsx","webpack://mgportalv2/./src/pages/Sample/index.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\ntype PropsType = {\n  hash: string;\n  isDefault?: boolean;\n};\nconst RouteForHash: React.FC<PropsType> = ({\n  hash,\n  isDefault = false,\n  children,\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (location.hash === '' && hash !== '' && isDefault) {\n      navigate(hash, { replace: true });\n    }\n  });\n\n  if (location.hash === hash) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport default RouteForHash;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst initialPageSize = 10;\n\ntype AssociatedStudiesProps = {\n  rootEndpoint: string;\n};\nconst AssociatedStudies: React.FC<AssociatedStudiesProps> = ({\n  rootEndpoint,\n}) => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'studies-page': 1,\n      'studies-page_size': initialPageSize,\n      'studies-order': '',\n    },\n    {\n      'studies-page': Number,\n      'studies-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `${rootEndpoint}/${accession}/studies`,\n    {\n      page: queryParameters['studies-page'] as number,\n      ordering: queryParameters['studies-order'] as string,\n      page_size: queryParameters['studies-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n      Cell: ({ cell }) => <TruncatedText text={(cell.value as string) || ''} />,\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['studies-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-studies-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"studies-\"\n    />\n  );\n};\n\nexport default AssociatedStudies;\n","import React from 'react';\n\ntype KeyValueProps = {\n  list: { key: string; value: string | React.ElementType }[];\n};\n\nconst KeyValueList: React.FC<KeyValueProps> = ({ list }) => (\n  <div\n    className=\"vf-grid vf-grid__col-2\"\n    style={{\n      gridTemplateColumns: '1fr 2fr',\n      rowGap: '0.5rem',\n    }}\n  >\n    {list.map(({ key, value: Value }) => (\n      <React.Fragment key={key}>\n        <div style={{ textAlign: 'right' }}>{key}:</div>\n        <div>{typeof Value === 'string' ? Value : <Value />}</div>\n      </React.Fragment>\n    ))}\n  </div>\n);\n\nexport default KeyValueList;\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\n\nimport './style.css';\n\n// TODO: make the link play nicer with react-router\nconst MarkerPopup: React.FC<{ sample: MGnifyDatum }> = ({ sample }) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">\n      <a href={`../samples/${sample.id}`}>{sample.id}</a>\n      {/* <Link to=\"/search/studies\">{sample.id}</Link> */}\n    </h3>\n    <p className=\"vf-box__text\">{sample.attributes['sample-desc']}</p>\n  </div>\n);\nconst ClusterMarkerPopup: React.FC<{ accessions: string[] }> = ({\n  accessions,\n}) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">Samples on this geographical location</h3>\n    <ul className=\"vf-list\">\n      {accessions.map((accession) => (\n        <li ref={accession}>\n          <a href={`../samples/${accession}`}>{accession}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ntype MapProps = {\n  samples: Array<MGnifyDatum>;\n};\n\nconst SamplesMap: React.FC<MapProps> = ({ samples }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const markerCluster = useRef<MarkerClusterer>(null);\n  const sampleInfoWindow = useRef(new google.maps.InfoWindow());\n  const clusterInfoWindow = useRef(new google.maps.InfoWindow());\n  const newBoundary = useRef(new google.maps.LatLngBounds());\n\n  const markers = useRef({});\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n        minZoom: 2,\n      });\n      setTheMap(tmpMap);\n    }\n  }, [theMap]);\n  useEffect(() => {\n    if (theMap && samples) {\n      if (markerCluster.current) {\n        markerCluster.current.clearMarkers();\n      }\n\n      samples\n        .filter(({ id }) => !(id in markers.current))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n            title: sample.id,\n          });\n          newBoundary.current.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.current.setContent(\n              ReactDOMServer.renderToString(<MarkerPopup sample={sample} />)\n            );\n            sampleInfoWindow.current.open(theMap, marker);\n          });\n          markers.current[sample.id] = marker;\n        });\n      markerCluster.current = new MarkerClusterer(\n        theMap,\n        Object.values(markers.current),\n        {\n          imagePath:\n            'https://raw.githubusercontent.com/googlemaps/js-markerclustererplus/master/images/m',\n          maxZoom: 10,\n        }\n      );\n\n      // for clusters in MAX Zoom and with less than 10 elements show a list\n      google.maps.event.addListener(\n        markerCluster.current,\n        'click',\n        // eslint-disable-next-line func-names\n        function (cluster) {\n          if (\n            // eslint-disable-next-line no-underscore-dangle, react/no-this-in-sfc\n            this.prevZoom_ + 1 <= this.getMaxZoom() ||\n            cluster.getSize() >= 10\n          ) {\n            return;\n          }\n          clusterInfoWindow.current.setPosition(cluster.getCenter());\n\n          clusterInfoWindow.current.setContent(\n            ReactDOMServer.renderToString(\n              <ClusterMarkerPopup\n                accessions={cluster.getMarkers().map((m) => m.getTitle())}\n              />\n            )\n          );\n\n          clusterInfoWindow.current.open(theMap);\n        }\n      );\n\n      theMap.fitBounds(newBoundary.current);\n    }\n  }, [theMap, samples]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\nexport default SamplesMap;\n","import React, { ReactElement } from 'react';\nimport { Status } from '@googlemaps/react-wrapper';\nimport { ErrorTypes } from 'hooks/data/useData';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\nexport default render;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React from 'react';\n\nconst TruncatedText: React.FC<{ maxLength?: number; text: string }> = ({\n  text,\n  maxLength = 250,\n}) => (\n  <>\n    {text.substring(0, maxLength)}\n    {text.length >= maxLength && '...'}\n  </>\n);\n\nexport default TruncatedText;\n","import React, { useContext } from 'react';\n\nimport { Wrapper } from '@googlemaps/react-wrapper';\n\nimport UserContext from 'pages/Login/UserContext';\nimport SamplesMap from 'components/UI/SamplesMap';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport render from '../render';\n\nimport '../style.css';\n\ntype SamplesMapProps = {\n  samples: Array<MGnifyDatum>;\n};\nconst SamplesMapBySamplesArray: React.FC<SamplesMapProps> = ({ samples }) => {\n  const { config } = useContext(UserContext);\n\n  const samplesFiltered = samples.filter((sample) => {\n    try {\n      return (\n        Number(sample.attributes.longitude) !== 0.0 &&\n        Number(sample.attributes.latitude) !== 0.0\n      );\n    } catch {\n      return false;\n    }\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <SamplesMap samples={samplesFiltered} />\n        </Wrapper>\n      </div>\n      <div className=\"mg-map-progress\">\n        {samplesFiltered.length === 0 && (\n          <div>⚠️ None of the samples have geolocation co-ordinates.</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SamplesMapBySamplesArray;\n","import React from 'react';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMap from 'components/UI/SamplesMap/BySamplesArray';\nimport Box from 'components/UI/Box';\nimport ExtLink from 'components/UI/ExtLink';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype SampleOverviewProps = {\n  data: MGnifyDatum;\n};\n\nconst SampleOverview: React.FC<SampleOverviewProps> = ({ data }) => {\n  const lineage = data.relationships.biome.data.id;\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <Box label=\"Description\">{data.attributes['sample-desc']}</Box>\n          <Box label=\"External links\">\n            <ul>\n              <li>\n                <ExtLink\n                  href={`https://www.ebi.ac.uk/ena/browser/view/${data.attributes.accession}`}\n                >\n                  ENA website ({data.attributes.accession})\n                </ExtLink>\n              </li>\n              <li>\n                <ExtLink\n                  href={`https://www.ebi.ac.uk/biosamples/samples/${data.attributes.biosample}`}\n                >\n                  EBI biosample ({data.attributes.biosample})\n                </ExtLink>\n              </li>\n            </ul>\n          </Box>\n          <Box label=\"Classification\">\n            <span\n              className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n              style={{ float: 'initial' }}\n            />\n            {lineage}\n          </Box>\n        </div>\n        <SamplesMap samples={[data]} />\n      </div>\n    </section>\n  );\n};\n\nexport default SampleOverview;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst initialPageSize = 10;\n\nconst AssociatedRuns: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'runs-page': 1,\n      'runs-page_size': initialPageSize,\n      'runs-order': '',\n    },\n    {\n      'runs-page': Number,\n      'runs-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(\n    `samples/${accession}/runs`,\n    {\n      page: queryParameters['runs-page'] as number,\n      ordering: queryParameters['runs-order'] as string,\n      page_size: queryParameters['runs-page_size'] as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'run',\n      Header: 'Run ID',\n      accessor: 'id',\n      Cell: ({ cell }) => <Link to={`/runs/${cell.value}`}>{cell.value}</Link>,\n    },\n    {\n      Header: 'Experiment type',\n      accessor: 'attributes.experiment-type',\n    },\n    {\n      Header: 'Instrument model',\n      accessor: 'attributes.instrument-model',\n    },\n    {\n      Header: 'Instrument platform',\n      accessor: 'attributes.instrument-platform',\n    },\n    {\n      Header: 'pipeline versions',\n      accessor: 'relationships.pipelines.data',\n      Cell: ({ cell }) =>\n        (cell.value as { id: string }[]).map(({ id }) => id).join(', '),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['runs-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-runs-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"runs-\"\n    />\n  );\n};\n\nexport default AssociatedRuns;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst initialPageSize = 10;\n\nconst AssociatedAssemblies: React.FC = () => {\n  const accession = useURLAccession();\n  const [queryParameters] = useQueryParametersState(\n    {\n      'assembly-page': 1,\n      'assembly-page_size': initialPageSize,\n      'assembly-order': '',\n    },\n    {\n      'assembly-page': Number,\n      'assembly-page_size': Number,\n    }\n  );\n  const { data, loading, error, isStale } = useMGnifyData(`assemblies`, {\n    sample_accession: accession,\n    page: queryParameters['assembly-page'] as number,\n    ordering: queryParameters['assembly-order'] as string,\n    page_size: queryParameters['assembly-page_size'] as number,\n  });\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      Header: 'Assembly ID',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/assemblies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Experiment type',\n      accessor: 'attributes.experiment-type',\n    },\n    {\n      Header: 'WGS ID',\n      accessor: 'attributes.wgs-accession',\n    },\n    {\n      Header: 'Legacy ID',\n      accessor: 'attributes.legacy-accession',\n    },\n    {\n      Header: 'Pipeline versions',\n      accessor: 'relationships.pipelines.data',\n      Cell: ({ cell }) =>\n        (cell.value as { id: string }[]).map(({ id }) => id).join(', '),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(queryParameters['assembly-page'] as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-assembly-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"assembly-\"\n    />\n  );\n};\n\nexport default AssociatedAssemblies;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Sample/Overview';\nimport AssociatedStudies from 'src/components/Study/Studies';\nimport AssociatedRuns from 'components/Sample/Runs';\nimport AssociatedAssemblies from 'components/Sample/Assemblies';\nimport RouteForHash from 'components/Nav/RouteForHash';\nimport KeyValueList from 'components/UI/KeyValueList';\n\nconst tabs = [\n  { label: 'Sample metadata', to: '#' },\n  { label: 'Associated studies', to: '#studies' },\n  { label: 'Analysed associated runs', to: '#runs' },\n  { label: 'Analysed associated assemblies', to: '#assemblies' },\n];\n\nconst SamplePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`samples/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: sampleData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Sample overview ({accession})</h2>\n      <h3>Sample {sampleData.attributes['sample-name']}</h3>\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <Overview data={sampleData} />\n          <Tabs tabs={tabs} />\n          <section className=\"vf-grid\">\n            <div className=\"vf-stack vf-stack--200\">\n              <RouteForHash hash=\"\" isDefault>\n                <KeyValueList\n                  list={\n                    (sampleData?.attributes?.['sample-metadata'] as {\n                      key: string;\n                      value: string;\n                    }[]) || []\n                  }\n                />\n              </RouteForHash>\n              <RouteForHash hash=\"#studies\">\n                <AssociatedStudies rootEndpoint=\"samples\" />\n              </RouteForHash>\n              <RouteForHash hash=\"#runs\">\n                <AssociatedRuns />\n              </RouteForHash>\n              <RouteForHash hash=\"#assemblies\">\n                <AssociatedAssemblies />\n              </RouteForHash>\n            </div>\n          </section>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default SamplePage;\n"],"names":["hash","isDefault","children","location","navigate","useEffect","replace","rootEndpoint","accession","queryParameters","Number","data","loading","error","isStale","page","ordering","page_size","size","columns","id","Header","accessor","study","relationships","biomes","Cell","cell","className","value","style","float","to","text","Date","toLocaleDateString","cols","initialPage","initialPageSize","namespace","list","gridTemplateColumns","rowGap","map","key","Value","textAlign","MarkerPopup","sample","href","attributes","ClusterMarkerPopup","accessions","ref","samples","useRef","theMap","setTheMap","useState","markerCluster","sampleInfoWindow","google","maps","InfoWindow","clusterInfoWindow","newBoundary","LatLngBounds","markers","tmpMap","Map","current","maxZoom","minZoom","clearMarkers","filter","forEach","position","lat","latitude","lng","longitude","marker","Marker","title","extend","addListener","setContent","open","Object","values","imagePath","event","cluster","this","prevZoom_","getMaxZoom","getSize","setPosition","getCenter","getMarkers","m","getTitle","fitBounds","height","status","Status","type","tabs","label","Label","pathname","startsWith","maxLength","substring","length","config","useContext","UserContext","samplesFiltered","Wrapper","apiKey","googleMapsKey","render","SamplesMap","lineage","biome","toDateString","Box","ExtLink","biosample","useURLAccession","useMGnifyData","Loading","FetchError","join","EMGTable","sample_accession","sampleData","Overview","Tabs","RouteForHash","KeyValueList"],"sourceRoot":""}