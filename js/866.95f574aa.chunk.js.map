{"version":3,"sources":["webpack://mgportalv2/./src/hooks/useMGnifyData/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/pages/Browse/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"names":["ErrorTypes","useData","url","state","setFullState","useState","data","loading","error","setPartialState","updatedValues","prevState","useEffect","updateState","response","json","fetch","type","FetchError","ok","JSONError","status","NotOK","fetchData","useEBISearchData","endpoint","parameters","allParemeters","format","start","Object","entries","map","key","value","join","useMGnifyData","keys","length","useBlogData","resource","PaginationButton","currentPageIndex","pageIndex","gotoPage","className","onClick","cols","title","fetchPage","onChangeSort","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","nextPage","previousPage","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","console","log","paginationRanges","startingPages","adjacentPages","Math","max","page","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","disabled","paginationIndex","pageQuery","setPageQuery","orderingQuery","setOrderingQuery","studiesList","ordering","page_size","id","Header","accessor","study","relationships","biomes","Cell","style","float","href","original","links","self","tableSortBy","col","desc","replace","getOrderingQueryParmFromSortedColumn","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineage","lineageList","split","x","toLowerCase","lineageD2","slice","lineageD3","lineageD4","lineageD5","lineageD6"],"mappings":"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","file":"js/866.95f574aa.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport config from 'config.json';\n\ntype KeyValue = {\n  [key: string]: string | number | Record<string, unknown> | [];\n};\ntype MGnifyResponse = {\n  data: Array<{\n    attributes: KeyValue;\n    id: string;\n    links: KeyValue;\n    type: string;\n    relationships: {\n      biomes?: {\n        data?: Array<{\n          id: string;\n        }>;\n      };\n      [key: string]: unknown;\n    };\n  }>;\n  links: {\n    first?: string;\n    last?: string;\n    next?: string;\n    prev?: string;\n  };\n  meta: {\n    pagination: {\n      count: number;\n      page: number;\n      pages: number;\n    };\n  };\n};\n\ntype BlogResponse = {\n  [category: string]: {\n    title: string;\n    url: string;\n    image: string;\n    excerpt: string;\n    category: string;\n    published: string;\n    emg: {\n      text: string;\n      url: string;\n    };\n  };\n};\n\nexport type ErrorFromFetch = {\n  status?: number;\n  response?: Promise<Response>;\n  type: ErrorTypes;\n  error?: unknown;\n};\nexport enum ErrorTypes {\n  FetchError,\n  NotOK,\n  JSONError,\n}\n\ninterface DataResponse {\n  data: null | KeyValue | MGnifyResponse | BlogResponse;\n  error: ErrorFromFetch | null;\n  loading: boolean;\n}\n\ninterface EBIDataResponse extends DataResponse {\n  data: KeyValue;\n}\ninterface MgnifyDataResponse extends DataResponse {\n  data: MGnifyResponse;\n}\ninterface BlogDataResponse extends DataResponse {\n  data: BlogResponse;\n}\n\nasync function fetchData(\n  url: string,\n  updateState: (DataResponse) => void\n): Promise<void> {\n  let response = null;\n  let json = null;\n  try {\n    response = await fetch(url);\n  } catch (error) {\n    updateState({\n      error: {\n        error,\n        type: ErrorTypes.FetchError,\n      },\n      loading: false,\n    });\n    return;\n  }\n  if (!response.ok) {\n    updateState({\n      error: {\n        status: response.status,\n        response,\n        type: ErrorTypes.NotOK,\n      },\n      loading: false,\n    });\n    return;\n  }\n  try {\n    json = await response.json();\n  } catch (error) {\n    updateState({\n      error: {\n        error,\n        type: ErrorTypes.JSONError,\n      },\n      loading: false,\n    });\n    return;\n  }\n\n  updateState({ data: json, loading: false });\n}\n\nconst useData: (url: string) => DataResponse = (url) => {\n  const [state, setFullState] = useState({\n    data: null,\n    loading: true,\n    error: null,\n  });\n  const setPartialState = (updatedValues): void => {\n    setFullState((prevState) => ({\n      ...prevState,\n      ...updatedValues,\n    }));\n  };\n  useEffect(() => {\n    fetchData(url, setPartialState);\n  }, [url]);\n  return state;\n};\n\nexport const useEBISearchData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => EBIDataResponse = (endpoint, parameters = {}) => {\n  const defaultParameters = {\n    format: 'json',\n    start: 0,\n  };\n  const allParemeters = { ...defaultParameters, ...parameters };\n  const url = `${config.ebisearch}${endpoint}?${Object.entries(allParemeters)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')}`;\n  const data = useData(url);\n  return data as EBIDataResponse;\n};\n\nexport const useMGnifyData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => MgnifyDataResponse = (endpoint, parameters = {}) => {\n  const defaultParameters = {};\n  const allParemeters = { ...defaultParameters, ...parameters };\n  let url = `${config.api}${endpoint}`;\n  if (Object.keys(allParemeters).length > 0)\n    url += `?${Object.entries(allParemeters)\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&')}`;\n  const data = useData(url);\n  return data as MgnifyDataResponse;\n};\n\nexport const useBlogData: (resource: string) => BlogDataResponse = (\n  resource\n) => {\n  const data = useData(`${config.blog}${resource}`);\n  return data as BlogDataResponse;\n};\n\nexport default useData;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { MouseEventHandler } from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: {\n    data: Record<string, any>[];\n    meta: Record<string, any>;\n    links?: Record<string, any>;\n  };\n  title?: string;\n  fetchPage?: (pageIndex: number, pageSize: number) => void;\n  onChangeSort?: (columnId: string) => void;\n};\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = [Math.max(2, pageIndex - 2)];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 3) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 2) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title,\n  fetchPage,\n  onChangeSort,\n}) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: data.data,\n      initialState: { pageIndex: 0 },\n      pageCount: data.meta.pagination.pages,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n\n  React.useEffect(() => {\n    if (fetchPage) {\n      fetchPage(pageIndex, pageSize);\n    }\n  }, [fetchPage, pageIndex, pageSize]);\n\n  React.useEffect(() => {\n    if (onChangeSort) {\n      console.log(sortBy);\n      onChangeSort(sortBy);\n    }\n  }, [onChangeSort, sortBy]);\n\n  const paginationRanges = React.useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n\n  return (\n    <section>\n      <table {...getTableProps} className=\"vf-table--striped\">\n        <caption className=\"vf-table__caption\">{title}</caption>\n        <thead className=\"vf-table__header\">\n          {headerGroups.map((headerGroup) => (\n            <tr\n              {...headerGroup.getHeaderGroupProps()}\n              className=\"vf-table__row\"\n            >\n              {headerGroup.headers.map((column) => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className=\"vf-table__heading\"\n                >\n                  {column.render('Header')}\n                  {onChangeSort && (\n                    <>\n                      &nbsp;\n                      <span>\n                        {/* eslint-disable-next-line no-nested-ternary */}\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"icon icon-common icon-sort-down\" />\n                          ) : (\n                            <i className=\"icon icon-common icon-sort-up\" />\n                          )\n                        ) : (\n                          <i className=\"icon icon-common icon-sort\" />\n                        )}\n                      </span>\n                    </>\n                  )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n          {rows.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()} className=\"vf-table__row\">\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                      {cell.render('Cell')}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {fetchPage && (\n        <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n          <ul className=\"vf-pagination__list\">\n            <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n              <button\n                disabled={!canPreviousPage}\n                type=\"button\"\n                onClick={previousPage}\n                className=\"vf-button vf-button--link vf-pagination__link\"\n              >\n                Previous<span className=\"vf-u-sr-only\"> page</span>\n              </button>\n            </li>\n\n            {paginationRanges.startingPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            {paginationRanges.hasJumpFromStart && (\n              <li className=\"vf-pagination__item\">\n                <span className=\"vf-pagination__label\">...</span>\n              </li>\n            )}\n\n            {paginationRanges.adjacentPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            {paginationRanges.hasJumpToEnd && (\n              <li className=\"vf-pagination__item\">\n                <span className=\"vf-pagination__label\">...</span>\n              </li>\n            )}\n\n            {paginationRanges.endingPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n              <button\n                disabled={!canNextPage}\n                type=\"button\"\n                onClick={nextPage}\n                className=\"vf-button vf-button--link vf-pagination__link\"\n              >\n                Next<span className=\"vf-u-sr-only\"> page</span>\n              </button>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useState } from 'react';\nimport { useMGnifyData } from 'hooks/useMGnifyData';\nimport EMGTable from 'components/UI/EMGTable';\nimport { getBiomeIcon } from 'utils/biomes';\n\nfunction getOrderingQueryParmFromSortedColumn(tableSortBy: any): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\nconst Browse: React.FC = () => {\n  const [pageQuery, setPageQuery] = useState(1);\n  const [orderingQuery, setOrderingQuery] = useState(null);\n  const { data: studiesList, loading } = useMGnifyData('studies', {\n    page: pageQuery,\n    ordering: orderingQuery,\n    page_size: 10,\n  });\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n      },\n      {\n        id: 'accession',\n        Header: 'Accession',\n        accessor: 'attributes.accession',\n        Cell: ({ cell, row }) => (\n          <a href={row.original.links.self} className=\"vf-link\">\n            {cell.value}\n          </a>\n        ),\n      },\n      {\n        Header: 'Study name',\n        accessor: 'attributes.study-name',\n      },\n      {\n        Header: 'Samples',\n        accessor: 'attributes.samples-count',\n      },\n    ],\n    []\n  );\n\n  if (loading) {\n    return <h1>loading</h1>;\n  }\n\n  return (\n    <section className=\"vf-content\">\n      <h2>Browse Page.</h2>\n      <EMGTable\n        cols={columns}\n        data={studiesList}\n        title=\"Studies\"\n        fetchPage={(pageIndex) => {\n          setPageQuery(pageIndex + 1);\n        }}\n        onChangeSort={(sortBy) =>\n          setOrderingQuery(getOrderingQueryParmFromSortedColumn(sortBy))\n        }\n      />\n    </section>\n  );\n};\n\nexport default Browse;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"sourceRoot":""}