{"version":3,"sources":["webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/components/UI/FetchError/index.tsx","webpack://mgportalv2/./src/hooks/useMGnifyData/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/pages/TextSearch/SearchQueryContext.tsx","webpack://mgportalv2/./src/components/Search/Filter/CentreName/index.tsx","webpack://mgportalv2/./src/components/Search/Filter/Biome/index.tsx","webpack://mgportalv2/./src/components/Search/Tabs/index.tsx","webpack://mgportalv2/./src/components/Search/Filter/Text/index.tsx","webpack://mgportalv2/./src/components/Search/Table/index.tsx","webpack://mgportalv2/./src/pages/TextSearch/index.tsx"],"names":["PaginationButton","currentPageIndex","pageIndex","gotoPage","className","type","onClick","cols","data","title","fetchPage","onChangeSort","initialPage","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","nextPage","previousPage","state","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","paginationRanges","startingPages","adjacentPages","Math","max","page","length","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","disabled","paginationIndex","key","refreshPage","window","location","reload","error","style","backgroundColor","status","ErrorTypes","EmptyResponse","loading","NullURL","useData","url","setFullState","useState","setPartialState","updatedValues","prevState","useEffect","updateState","response","json","fetch","FetchError","ok","JSONError","NotOK","fetchData","useEBISearchData","endpoint","parameters","allParemeters","format","start","Object","entries","value","join","undefined","includes","useMGnifyData","keys","useBlogData","resource","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","forEach","parameter","serializer","String","get","useQueryParametersState","history","stateWithURL","useMemo","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","searchData","queryParameters","setQueryParameters","s","useContext","selected","setSelected","centre_name","split","filter","Boolean","facetData","pathname","facets","f","id","Loading","handleSelection","event","checked","isChecked","target","newSelected","sort","facetValues","label","count","name","onChange","htmlFor","Biome","biomeChildren","depth","isSelected","displayChildren","setDisplayChildren","marginLeft","childLabel","childValue","childCount","childChildren","biome","children","v","tabs","to","some","replace","hitCount","searchTerms","setSearchTerms","query","placeholder","evt","dataFor","Header","accessor","study","Cell","fields","ENA_PROJECT","href","biome_name","sample","METAGENOMICS_PROJECTS","pathnames","description","analysis","pipeline_version","METAGENOMICS_SAMPLES","experiment_type","size","fomattedData","ceil","EMGTable","getFacets","facetNames","formatToFacet","facetName","context","facetcount","facetsdepth","Text","path","CentreName"],"mappings":"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","file":"js/879.966910fd.chunk.js","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, { MouseEventHandler } from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: {\n    data: Record<string, any>[];\n    meta: Record<string, any>;\n    links?: Record<string, any>;\n  };\n  title?: string;\n  fetchPage?: (pageIndex: number, pageSize: number) => void;\n  onChangeSort?: (columnId: string) => void;\n  initialPage?: number;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title,\n  fetchPage,\n  onChangeSort,\n  initialPage = 0,\n}) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: data.data,\n      initialState: { pageIndex: initialPage },\n      pageCount: data.meta.pagination.pages,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n\n  React.useEffect(() => {\n    if (fetchPage) {\n      fetchPage(pageIndex, pageSize);\n    }\n  }, [fetchPage, pageIndex, pageSize]);\n\n  React.useEffect(() => {\n    if (onChangeSort) {\n      onChangeSort(sortBy);\n    }\n  }, [onChangeSort, sortBy]);\n\n  const paginationRanges = React.useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n\n  return (\n    <section>\n      <table {...getTableProps} className=\"vf-table--striped\">\n        <caption className=\"vf-table__caption\">{title}</caption>\n        <thead className=\"vf-table__header\">\n          {headerGroups.map((headerGroup) => (\n            <tr\n              {...headerGroup.getHeaderGroupProps()}\n              className=\"vf-table__row\"\n            >\n              {headerGroup.headers.map((column) => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className=\"vf-table__heading\"\n                >\n                  {column.render('Header')}\n                  {onChangeSort && (\n                    <>\n                      &nbsp;\n                      <span>\n                        {/* eslint-disable-next-line no-nested-ternary */}\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"icon icon-common icon-sort-down\" />\n                          ) : (\n                            <i className=\"icon icon-common icon-sort-up\" />\n                          )\n                        ) : (\n                          <i className=\"icon icon-common icon-sort\" />\n                        )}\n                      </span>\n                    </>\n                  )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n          {rows.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()} className=\"vf-table__row\">\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                      {cell.render('Cell')}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {fetchPage && (\n        <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n          <ul className=\"vf-pagination__list\">\n            <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n              <button\n                disabled={!canPreviousPage}\n                type=\"button\"\n                onClick={previousPage}\n                className=\"vf-button vf-button--link vf-pagination__link\"\n              >\n                Previous<span className=\"vf-u-sr-only\"> page</span>\n              </button>\n            </li>\n\n            {paginationRanges.startingPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            {paginationRanges.hasJumpFromStart && (\n              <li className=\"vf-pagination__item\">\n                <span className=\"vf-pagination__label\">...</span>\n              </li>\n            )}\n\n            {paginationRanges.adjacentPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            {paginationRanges.hasJumpToEnd && (\n              <li className=\"vf-pagination__item\">\n                <span className=\"vf-pagination__label\">...</span>\n              </li>\n            )}\n\n            {paginationRanges.endingPages.map((paginationIndex) => (\n              <PaginationButton\n                key={paginationIndex}\n                currentPageIndex={pageIndex}\n                pageIndex={paginationIndex}\n                gotoPage={gotoPage}\n              />\n            ))}\n\n            <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n              <button\n                disabled={!canNextPage}\n                type=\"button\"\n                onClick={nextPage}\n                className=\"vf-button vf-button--link vf-pagination__link\"\n              >\n                Next<span className=\"vf-u-sr-only\"> page</span>\n              </button>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import React from 'react';\nimport { ErrorFromFetch, ErrorTypes } from 'hooks/useMGnifyData';\n\nconst refreshPage = (): void => {\n  window.location.reload();\n};\n\nconst FetchError: React.FC<{ error: ErrorFromFetch }> = ({ error }) => {\n  if (!error || error.type === ErrorTypes.NullURL) return null;\n  return (\n    <div\n      className=\"vf-box vf-box-theme--primary vf-box--easy\"\n      style={{\n        backgroundColor: 'lemonchiffon',\n      }}\n    >\n      <h3 className=\"vf-box__heading\">\n        <span className=\"icon icon-common icon-exclamation-triangle\" /> Error\n        Fetching Data\n      </h3>\n      <p className=\"vf-box__text\">\n        {error?.type === ErrorTypes.FetchError &&\n          `There were problems with the request. [${error.error}]`}\n        {error?.type === ErrorTypes.NotOK &&\n          `The response from the server was not OK [Status: ${error.status}].`}\n        {error?.type === ErrorTypes.JSONError &&\n          `The recovered resource didn't follow the expected format [${error.error}].`}\n      </p>\n      <div className=\"mg-right\">\n        <button\n          type=\"button\"\n          className=\"vf-button vf-button--tertiary vf-button--sm \"\n          onClick={refreshPage}\n        >\n          Refresh\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FetchError;\n","import { useState, useEffect } from 'react';\nimport config from 'config.json';\n\ntype KeyValue = {\n  [key: string]: string | number | Record<string, unknown> | [];\n};\ntype MGnifyResponse = {\n  data: Array<{\n    attributes: KeyValue;\n    id: string;\n    links: KeyValue;\n    type: string;\n    relationships: {\n      biomes?: {\n        data?: Array<{\n          id: string;\n        }>;\n      };\n      [key: string]: unknown;\n    };\n  }>;\n  links: {\n    first?: string;\n    last?: string;\n    next?: string;\n    prev?: string;\n  };\n  meta: {\n    pagination: {\n      count: number;\n      page: number;\n      pages: number;\n    };\n  };\n};\n\ntype BlogResponse = {\n  [category: string]: {\n    title: string;\n    url: string;\n    image: string;\n    excerpt: string;\n    category: string;\n    published: string;\n    emg: {\n      text: string;\n      url: string;\n    };\n  };\n};\n\nexport type ErrorFromFetch = {\n  status?: number;\n  response?: Promise<Response>;\n  type: ErrorTypes;\n  error?: unknown;\n};\nexport enum ErrorTypes {\n  FetchError,\n  NotOK,\n  JSONError,\n  NullURL,\n}\n\ninterface DataResponse {\n  data: null | KeyValue | MGnifyResponse | BlogResponse;\n  error: ErrorFromFetch | null;\n  loading: boolean;\n}\n\ninterface EBIDataResponse extends DataResponse {\n  data: KeyValue;\n}\ninterface MgnifyDataResponse extends DataResponse {\n  data: MGnifyResponse;\n}\ninterface BlogDataResponse extends DataResponse {\n  data: BlogResponse;\n}\n\nconst EmptyResponse = {\n  data: null,\n  loading: false,\n  error: {\n    type: ErrorTypes.NullURL,\n    error: 'The queried URL is null',\n  },\n};\n\nasync function fetchData(\n  url: string,\n  updateState: (DataResponse) => void\n): Promise<void> {\n  let response = null;\n  let json = null;\n  try {\n    response = await fetch(url);\n  } catch (error) {\n    updateState({\n      error: {\n        error,\n        type: ErrorTypes.FetchError,\n      },\n      loading: false,\n    });\n    return;\n  }\n  if (!response.ok) {\n    updateState({\n      error: {\n        status: response.status,\n        response,\n        type: ErrorTypes.NotOK,\n      },\n      loading: false,\n    });\n    return;\n  }\n  try {\n    json = await response.json();\n  } catch (error) {\n    updateState({\n      error: {\n        error,\n        type: ErrorTypes.JSONError,\n      },\n      loading: false,\n    });\n    return;\n  }\n\n  updateState({ data: json, loading: false, error: null });\n}\n\nconst useData: (url: string) => DataResponse = (url) => {\n  const [state, setFullState] = useState({\n    data: null,\n    loading: true,\n    error: null,\n  });\n  const setPartialState = (updatedValues): void => {\n    setFullState((prevState) => ({\n      ...prevState,\n      ...updatedValues,\n    }));\n  };\n  useEffect(() => {\n    // If the URL is null don't do the fetch and return the empty response\n    if (!url) {\n      setFullState(EmptyResponse);\n      return;\n    }\n    fetchData(url, setPartialState);\n  }, [url]);\n  return state;\n};\n\nexport const useEBISearchData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => EBIDataResponse = (endpoint, parameters = {}) => {\n  const defaultParameters = {\n    format: 'json',\n    start: 0,\n  };\n  const allParemeters = { ...defaultParameters, ...parameters };\n  const url = `${config.ebisearch}${endpoint}?${Object.entries(allParemeters)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')}`;\n  const data = useData([null, undefined].includes(endpoint) ? null : url);\n  return data as EBIDataResponse;\n};\n\nexport const useMGnifyData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => MgnifyDataResponse = (endpoint, parameters = {}) => {\n  const defaultParameters = {};\n  const allParemeters = { ...defaultParameters, ...parameters };\n  let url = `${config.api}${endpoint}`;\n  if (Object.keys(allParemeters).length > 0)\n    url += `?${Object.entries(allParemeters)\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&')}`;\n  const data = useData([null, undefined].includes(endpoint) ? null : url);\n  return data as MgnifyDataResponse;\n};\n\nexport const useBlogData: (resource: string) => BlogDataResponse = (\n  resource\n) => {\n  const data = useData(\n    [null, undefined].includes(resource) ? null : `${config.blog}${resource}`\n  );\n  return data as BlogDataResponse;\n};\n\nexport default useData;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const history = useHistory();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    history.push(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const history = useHistory();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      history.push(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","import React from 'react';\nimport { QueryState } from 'hooks/useQueryParamState';\n\nconst SearchQueryContext = React.createContext({\n  searchData: {\n    '/search/studies': {\n      data: null,\n      loading: false,\n      error: null,\n    },\n    '/search/samples': {\n      data: null,\n      loading: false,\n      error: null,\n    },\n    '/search/analyses': {\n      data: null,\n      loading: false,\n      error: null,\n    },\n  },\n  queryParameters: {} as QueryState,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  setQueryParameters: (s: QueryState) => {},\n});\n\nexport default SearchQueryContext;\n","import React, { useContext, useMemo, useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport SearchQueryContext from 'pages/TextSearch/SearchQueryContext';\nimport Loading from 'components/UI/Loading';\nimport 'styles/filters.css';\n\nconst CentreNameFilter: React.FC = () => {\n  const location = useLocation();\n  const { searchData, queryParameters, setQueryParameters } =\n    useContext(SearchQueryContext);\n  const [selected, setSelected] = useState(\n    (queryParameters.centre_name as string).split(',').filter(Boolean)\n  );\n  useEffect(() => {\n    setSelected(\n      (queryParameters.centre_name as string).split(',').filter(Boolean)\n    );\n  }, [queryParameters.centre_name]);\n\n  const facetData = useMemo(\n    () =>\n      (searchData?.[location.pathname]?.data?.facets || []).filter(\n        (f) => f.id === 'centre_name'\n      )?.[0],\n    [location.pathname, searchData]\n  );\n\n  if (searchData?.[location.pathname].loading) return <Loading />;\n  if (searchData?.[location.pathname].error) return null;\n\n  if (!facetData) return null;\n  const handleSelection = (event): void => {\n    const { value, checked: isChecked } = event.target as HTMLInputElement;\n    let newSelected = [...selected];\n    if (isChecked && !selected.includes(value)) {\n      newSelected.push(value);\n    } else {\n      newSelected = selected.filter((s) => s !== value);\n    }\n    setQueryParameters({\n      ...queryParameters,\n      centre_name: newSelected.sort().join(','),\n    });\n  };\n\n  return (\n    <fieldset className=\"vf-form__fieldset vf-stack vf-stack--400\">\n      <legend className=\"vf-form__legend\">Centre name</legend>\n      {facetData.facetValues.map(({ label, value, count }) => (\n        <div className=\"vf-form__item vf-form__item--checkbox\" key={value}>\n          <input\n            type=\"checkbox\"\n            name={value}\n            value={value}\n            id={value}\n            className=\"vf-form__checkbox\"\n            onChange={handleSelection}\n            checked={selected.includes(value)}\n          />\n          <label className=\"vf-form__label\" htmlFor={value}>\n            <span className=\"mg-filter-checkbox-label\">\n              {label} <span className=\"mg-number\">{count}</span>\n            </span>\n          </label>\n        </div>\n      ))}\n    </fieldset>\n  );\n};\n\nexport default CentreNameFilter;\n","import React, { useContext, useMemo, useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport SearchQueryContext from 'pages/TextSearch/SearchQueryContext';\nimport Loading from 'components/UI/Loading';\nimport './style.css';\nimport 'styles/filters.css';\n\ninterface BiomeDataType {\n  value: string;\n  label: string;\n  count: number;\n  biomeChildren?: BiomeDataType[];\n}\ninterface BiomeProps extends BiomeDataType {\n  depth?: number;\n  handleSelection: (evt: {\n    target: {\n      value?: string;\n      checked?: boolean;\n    };\n  }) => void;\n  isSelected: (value: string) => boolean;\n}\nconst Biome: React.FC<BiomeProps> = ({\n  value,\n  label,\n  count,\n  biomeChildren,\n  depth = 0,\n  handleSelection,\n  isSelected,\n}) => {\n  const [displayChildren, setDisplayChildren] = useState(false);\n  return (\n    <div\n      style={{\n        marginLeft: `${depth}rem`,\n      }}\n    >\n      <div className=\"mg-biome-selector\">\n        {biomeChildren?.length ? (\n          <button\n            type=\"button\"\n            className=\"mg-expander\"\n            onClick={() => setDisplayChildren(!displayChildren)}\n          >\n            {displayChildren ? '▾' : '▸'}\n          </button>\n        ) : (\n          <span className=\"mg-biome-spacer\" />\n        )}\n        <div className=\"vf-form__item vf-form__item--checkbox\">\n          <input\n            type=\"checkbox\"\n            name={value}\n            value={value}\n            id={value}\n            className=\"vf-form__checkbox\"\n            onChange={handleSelection}\n            checked={isSelected(value)}\n          />\n          <label className=\"vf-form__label\" htmlFor={value}>\n            <span className=\"mg-filter-checkbox-label\">\n              {label} <span className=\"mg-number\">{count}</span>\n            </span>\n          </label>\n        </div>\n      </div>\n      {biomeChildren &&\n        biomeChildren.length &&\n        displayChildren &&\n        biomeChildren.map(\n          ({\n            label: childLabel,\n            value: childValue,\n            count: childCount,\n            biomeChildren: childChildren,\n          }) => (\n            <Biome\n              key={`${value}/${childValue}`}\n              label={childLabel}\n              value={`${value}/${childValue}`}\n              count={childCount}\n              depth={depth + 1}\n              biomeChildren={childChildren}\n              handleSelection={handleSelection}\n              isSelected={isSelected}\n            />\n          )\n        )}\n    </div>\n  );\n};\n\nconst BiomesFilter: React.FC = () => {\n  const location = useLocation();\n  const { searchData, queryParameters, setQueryParameters } =\n    useContext(SearchQueryContext);\n  const [selected, setSelected] = useState(\n    (queryParameters.biome as string).split(',').filter(Boolean)\n  );\n  useEffect(() => {\n    setSelected((queryParameters.biome as string).split(',').filter(Boolean));\n  }, [queryParameters.biome]);\n\n  const facetData = useMemo(\n    () =>\n      (searchData?.[location.pathname]?.data?.facets || []).filter(\n        (f) => f.id === 'biome'\n      )?.[0],\n    [location.pathname, searchData]\n  );\n\n  if (searchData?.[location.pathname].loading) return <Loading />;\n  if (searchData?.[location.pathname].error) return null;\n\n  if (!facetData) return null;\n  const handleSelection = (event): void => {\n    const { value, checked: isChecked } = event.target as HTMLInputElement;\n    let newSelected = [...selected];\n    if (isChecked && !selected.includes(value)) {\n      newSelected.push(value);\n    } else {\n      newSelected = selected.filter((s) => s !== value);\n    }\n    setQueryParameters({\n      ...queryParameters,\n      biome: newSelected.sort().join(','),\n    });\n  };\n\n  return (\n    <fieldset className=\"vf-form__fieldset vf-stack vf-stack--400\">\n      <legend className=\"vf-form__legend\">Biome</legend>\n      {facetData.facetValues.map(({ label, value, count, children }) => (\n        <Biome\n          key={value}\n          label={label}\n          value={value}\n          count={count}\n          biomeChildren={children}\n          handleSelection={handleSelection}\n          isSelected={(v) => selected.includes(v)}\n        />\n      ))}\n    </fieldset>\n  );\n};\n\nexport default BiomesFilter;\n","import React, { useEffect, useContext } from 'react';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport SearchQueryContext from 'pages/TextSearch/SearchQueryContext';\n\nconst tabs = [\n  { label: 'Studies', to: '/search/studies' },\n  { label: 'Samples', to: '/search/samples' },\n  { label: 'Analyses', to: '/search/analyses' },\n];\n\nconst SearchTabs: React.FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const { searchData } = useContext(SearchQueryContext);\n\n  useEffect(() => {\n    if (!tabs.some(({ to }) => to === location.pathname)) {\n      history.replace({\n        ...location,\n        pathname: tabs[0].to,\n      });\n    }\n  }, [location, history]);\n  return (\n    <div className=\"vf-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label, to }) => (\n          <li className=\"vf-tabs__item\" key={label}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ? 'is-active' : ''\n              }`}\n              to={to}\n            >\n              {label}\n              <span className=\"mg-number\">\n                {searchData?.[to]?.data?.hitCount || ''}\n              </span>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchTabs;\n","import React, { useEffect, useState, useContext } from 'react';\nimport SearchQueryContext from 'pages/TextSearch/SearchQueryContext';\n\nconst TextSearch: React.FC = () => {\n  const { queryParameters, setQueryParameters } =\n    useContext(SearchQueryContext);\n  const [searchTerms, setSearchTerms] = useState(\n    queryParameters.query as string\n  );\n  useEffect(() => {\n    setSearchTerms(queryParameters.query as string);\n  }, [queryParameters.query]);\n  return (\n    <div className=\"vf-form vf-form--search vf-form--search--responsive vf-sidebar vf-sidebar--end\">\n      <div className=\"vf-sidebar__inner\">\n        <div className=\"vf-form__item | vf-search__item\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter your search terms\"\n            id=\"text\"\n            className=\"vf-form__input | st-default-search-input\"\n            value={searchTerms}\n            onChange={(evt) => {\n              setSearchTerms(evt.target.value);\n            }}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"vf-search__button | vf-button vf-button--primary\"\n          onClick={() => {\n            setQueryParameters({\n              ...queryParameters,\n              query: searchTerms,\n            });\n          }}\n        >\n          <span className=\"vf-button__text\">Search </span>\n          <span className=\"icon icon-common icon-search\" />\n        </button>\n        <button\n          type=\"button\"\n          className=\"vf-search__button | vf-button vf-button--tertiary\"\n          onClick={() => {\n            setQueryParameters({});\n          }}\n        >\n          <span className=\"vf-button__text\">Clear All </span>\n          <span className=\"icon icon-common icon-times-circle\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TextSearch;\n","import React, { useMemo, useContext } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport SearchQueryContext from 'pages/TextSearch/SearchQueryContext';\n\nconst dataFor = {\n  '/search/studies': {\n    columns: [\n      {\n        id: 'study_id',\n        Header: 'MGnify ID',\n        accessor: (study) => study.id,\n        Cell: ({ cell }) => (\n          <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        id: 'ena_id',\n        Header: 'ENA accession',\n        accessor: (study) => study?.fields?.ENA_PROJECT?.[0] || '',\n        Cell: ({ cell }) => (\n          <span>\n            <a\n              href={`https://www.ebi.ac.uk/ena/browser/view/${cell.value}`}\n              className=\"ext\"\n            >\n              {cell.value}\n            </a>\n          </span>\n        ),\n      },\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (study) => study?.fields?.biome_name?.join(':'),\n        Cell: ({ cell }) => <span>{cell.value}</span>,\n      },\n      {\n        id: 'centre',\n        Header: 'Centre name',\n        accessor: (study) => study?.fields?.centre_name?.[0],\n        Cell: ({ cell }) => <span>{cell.value}</span>,\n      },\n    ],\n  },\n  '/search/samples': {\n    columns: [\n      {\n        id: 'sample_id',\n        Header: 'Sample',\n        accessor: (sample) => sample.id,\n        Cell: ({ cell }) => (\n          <Link to={`/samples/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        id: 'mgnify_id',\n        Header: 'MGnify ID',\n        accessor: (sample) => sample?.fields?.METAGENOMICS_PROJECTS?.[0] || '',\n        Cell: ({ cell }) => (\n          <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        id: 'sample_name',\n        Header: 'Name',\n        pathnames: ['/search/studies'],\n        accessor: (study) => study?.fields?.name?.[0],\n        Cell: ({ cell }) => <span>{cell.value}</span>,\n      },\n      {\n        id: 'sample_description',\n        Header: 'Description',\n        pathnames: ['/search/studies'],\n        accessor: (study) => study?.fields?.description?.[0],\n        Cell: ({ cell }) => <span>{cell.value}</span>,\n      },\n    ],\n  },\n  '/search/analyses': {\n    columns: [\n      {\n        id: 'analyses_id',\n        Header: 'Analysis',\n        accessor: (analysis) => (analysis.id || '').split('_'),\n        Cell: ({ cell }) => (\n          <Link to={`/analyses/${cell.value[0]}?version=${cell.value[1]}`}>\n            {cell.value[0]}\n          </Link>\n        ),\n      },\n      {\n        id: 'pipeline',\n        Header: 'Pipeline version',\n        accessor: (analysis) => analysis?.fields?.pipeline_version?.[0] || '',\n        Cell: ({ cell }) => (\n          <span>\n            <Link to={`/pipelines/${cell.value}`}>{cell.value}</Link>\n          </span>\n        ),\n      },\n      {\n        id: 'sample_id',\n        Header: 'Sample',\n        accessor: (analysis) => analysis?.fields?.METAGENOMICS_SAMPLES?.[0],\n        Cell: ({ cell }) => (\n          <Link to={`/samples/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        id: 'mgnify_id',\n        Header: 'MGnify ID',\n        accessor: (analysis) =>\n          analysis?.fields?.METAGENOMICS_PROJECTS?.[0] || '',\n        Cell: ({ cell }) => (\n          <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        id: 'experiment',\n        Header: 'Experiment type',\n        accessor: (analysis) => analysis?.fields?.experiment_type?.[0],\n        Cell: ({ cell }) => <span>{cell.value}</span>,\n      },\n    ],\n  },\n};\nconst PAGE_SIZE = 25; // TODO: move to table\n\nconst SearchTable: React.FC = () => {\n  const { pathname } = useLocation();\n  const { searchData } = useContext(SearchQueryContext);\n  const { data, loading, error } = searchData?.[pathname] || {};\n\n  const columns = useMemo(() => dataFor?.[pathname]?.columns, [pathname]);\n  if (loading) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n  const fomattedData = {\n    data: data.entries as Record<string, unknown>[],\n    meta: {\n      pagination: {\n        pages: Math.ceil((data.hitCount as number) / PAGE_SIZE),\n      },\n    },\n  };\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={fomattedData}\n      title={`Studies (${data.hitCount})`}\n      initialPage={1}\n    />\n  );\n};\n\nexport default SearchTable;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport CentreNameFilter from 'components/Search/Filter/CentreName';\nimport BiomeFilter from 'components/Search/Filter/Biome';\nimport SearchTabs from 'src/components/Search/Tabs';\nimport TextSearch from 'src/components/Search/Filter/Text';\nimport SearchTable from 'src/components/Search/Table';\nimport { useEBISearchData } from 'hooks/useMGnifyData';\nimport { QueryState, useQueryParametersState } from 'hooks/useQueryParamState';\nimport SearchQueryContext from './SearchQueryContext';\n\nconst PAGE_SIZE = 25;\n\nconst formatToFacet = (facetName: string, strValue: string): string =>\n  strValue\n    .split(',')\n    .filter(Boolean)\n    .map((v) => `${facetName}:${v}`)\n    .join(',');\n\nconst getFacets = (facetNames: string[], queryParameters: QueryState): string =>\n  facetNames\n    .map((name) => formatToFacet(name, queryParameters[name] as string))\n    .filter(Boolean)\n    .join(',');\n\nconst TextSearchPage: React.FC = () => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState({\n    query: '',\n    centre_name: '',\n    biome: '',\n  });\n\n  const searchDataStudies = useEBISearchData('metagenomics_projects', {\n    query:\n      (queryParameters?.query as string) ||\n      'domain_source:metagenomics_projects',\n    size: PAGE_SIZE,\n    fields: 'ENA_PROJECT,biome_name,centre_name',\n    facetcount: 10,\n    facetsdepth: 3,\n    facets: getFacets(['centre_name', 'biome'], queryParameters),\n  });\n  const searchDataSamples = useEBISearchData('metagenomics_samples', {\n    query:\n      (queryParameters?.query as string) ||\n      'domain_source:metagenomics_samples',\n    size: PAGE_SIZE,\n    fields: 'METAGENOMICS_PROJECTS,name,description',\n    facetcount: 10,\n    facetsdepth: 3,\n    facets: getFacets(['biome'], queryParameters),\n  });\n  const searchDataAnalyses = useEBISearchData('metagenomics_analyses', {\n    query:\n      (queryParameters?.query as string) ||\n      'domain_source:metagenomics_analyses',\n    size: PAGE_SIZE,\n    fields:\n      'METAGENOMICS_PROJECTS,METAGENOMICS_SAMPLES,pipeline_version,experiment_type',\n    facetcount: 10,\n    facetsdepth: 3,\n    facets: getFacets(['biome'], queryParameters),\n  });\n  const context = {\n    searchData: {\n      '/search/studies': searchDataStudies,\n      '/search/samples': searchDataSamples,\n      '/search/analyses': searchDataAnalyses,\n    },\n    queryParameters,\n    setQueryParameters,\n  };\n\n  return (\n    <section className=\"vf-content\">\n      <h2>Text Search.</h2>\n      <SearchQueryContext.Provider value={context}>\n        <TextSearch />\n        <SearchTabs />\n        <section className=\"embl-grid\">\n          <div className=\"vf-stack vf-stack--400\">\n            <Switch>\n              <Route path=\"/search/studies\">\n                <BiomeFilter />\n                <CentreNameFilter />\n              </Route>\n              <Route path=\"/search/samples\">\n                <BiomeFilter />\n              </Route>\n              <Route path=\"/search/analyses\">\n                <BiomeFilter />\n              </Route>\n            </Switch>\n          </div>\n          <SearchTable />\n        </section>\n      </SearchQueryContext.Provider>\n    </section>\n  );\n};\n\nexport default TextSearchPage;\n"],"sourceRoot":""}