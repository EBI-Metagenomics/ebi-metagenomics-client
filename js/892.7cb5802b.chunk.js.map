{"version":3,"file":"js/892.7cb5802b.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Nav/RouteForHash/index.tsx","webpack://mgportalv2/./src/components/UI/ArrowForLink/index.tsx","webpack://mgportalv2/./src/components/UI/Hierarchy/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/components/Genomes/Table/index.tsx","webpack://mgportalv2/./src/components/Genomes/PhyloTree/index.tsx","webpack://mgportalv2/./src/pages/GenomeCatalogue/index.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\ntype PropsType = {\n  hash: string;\n  isDefault?: boolean;\n};\nconst RouteForHash: React.FC<PropsType> = ({\n  hash,\n  isDefault = false,\n  children,\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (location.hash === '' && hash !== '' && isDefault) {\n      navigate(hash, { replace: true });\n    }\n  });\n\n  if (location.hash === hash) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <div id={`tab-${hash.slice(1) || 'default'}`}>{children}</div>;\n  }\n  return null;\n};\n\nexport default RouteForHash;\n","/* eslint-disable max-len */\nimport React from 'react';\n\nconst ArrowForLink: React.FC = () => (\n  <svg\n    aria-hidden=\"true\"\n    className=\"vf-card__heading__icon | vf-icon vf-icon-arrow--inline-end\"\n    width=\"1em\"\n    height=\"1em\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    preserveAspectRatio=\"none\"\n  >\n    <path\n      d=\"M0 12c0 6.627 5.373 12 12 12s12-5.373 12-12S18.627 0 12 0C5.376.008.008 5.376 0 12zm13.707-5.209l4.5 4.5a1 1 0 010 1.414l-4.5 4.5a1 1 0 01-1.414-1.414l2.366-2.367a.25.25 0 00-.177-.424H6a1 1 0 010-2h8.482a.25.25 0 00.177-.427l-2.366-2.368a1 1 0 011.414-1.414z\"\n      fill=\"currentColor\"\n      fillRule=\"nonzero\"\n    />\n  </svg>\n);\n\nexport default ArrowForLink;\n","import React, { useState, useEffect } from 'react';\nimport './style.css';\n\nconst ANIMATION_TIME = 400;\n\nexport type Node = {\n  name: string;\n  countgen?: number;\n  type?: string;\n  children?: Node[];\n  [key: string]: unknown;\n};\n\ninterface HierarchyNodeProps {\n  tree: Node;\n  depth?: number;\n  shouldExpand?: boolean;\n  collapsing?: boolean;\n  getLabel?: (node: Node) => string | React.ReactElement;\n  triggerExpandAll?: boolean;\n  triggerCollapseAll?: boolean;\n}\nconst HierarchyNode: React.FC<HierarchyNodeProps> = ({\n  tree,\n  depth = 0,\n  shouldExpand = true,\n  collapsing = false,\n  getLabel = (node) => node.name,\n  triggerExpandAll = false,\n  triggerCollapseAll = false,\n}) => {\n  const [displayChildren, setDisplayChildren] = useState(shouldExpand);\n  const [triggerExpandAllChildren, setTriggerExpandAllChildren] =\n    useState(triggerExpandAll);\n  const [show, setShow] = useState(false);\n  const [hideChildren, setHideChildren] = useState(false);\n  useEffect(() => setShow(true), []);\n  useEffect(() => {\n    if (hideChildren) {\n      setTimeout(() => setDisplayChildren(false), ANIMATION_TIME);\n    }\n  }, [hideChildren]);\n  useEffect(() => {\n    if (triggerExpandAll) {\n      setDisplayChildren(true);\n      setTriggerExpandAllChildren(true);\n      setTimeout(() => setTriggerExpandAllChildren(false), ANIMATION_TIME);\n    }\n  }, [triggerExpandAll]);\n  useEffect(() => {\n    if (triggerCollapseAll) {\n      setDisplayChildren(false);\n    }\n  }, [triggerCollapseAll]);\n  const handleExpanderClick = (): void => {\n    setHideChildren(displayChildren);\n    if (!displayChildren) setDisplayChildren(true);\n  };\n  return (\n    <div\n      style={{\n        marginLeft: `${depth * 0.5}rem`,\n      }}\n    >\n      <div\n        className={`mg-hierarchy-selector ${show && !collapsing ? 'show' : ''}`}\n      >\n        {tree.children?.length ? (\n          <button\n            type=\"button\"\n            className=\"mg-expander\"\n            onClick={handleExpanderClick}\n          >\n            {displayChildren ? '▾' : '▸'}\n          </button>\n        ) : (\n          <span className=\"mg-hierarchy-spacer\" />\n        )}\n        <div>\n          <span className=\"mg-hierarchy-label\">\n            {getLabel(tree)}{' '}\n            {tree.countgen && (\n              <span className=\"mg-number\">{tree.countgen}</span>\n            )}\n          </span>\n        </div>\n      </div>\n      {tree.children &&\n        tree.children.length > 0 &&\n        displayChildren &&\n        tree.children.map((child) => (\n          <HierarchyNode\n            key={child.name}\n            tree={child}\n            depth={depth + 1}\n            shouldExpand={tree.countgen === 1 && child.countgen === 1}\n            getLabel={getLabel}\n            collapsing={hideChildren}\n            triggerExpandAll={triggerExpandAllChildren}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default HierarchyNode;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  let { pathname } = location;\n  if (pathname.trim().endsWith('/')) pathname = pathname.trim().slice(0, -1);\n  const parts = pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { cleanTaxLineage, getSimpleTaxLineage } from 'utils/taxon';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\nimport Tooltip from 'components/UI/Tooltip';\n\nconst initialPageSize = 10;\nconst GenomesTable: React.FC = () => {\n  const accession = useURLAccession();\n  const [genomesPage] = useQueryParamState('genomes-page', 1, Number);\n  const [genomesPageSize] = useQueryParamState(\n    'genomes-page_size',\n    initialPageSize,\n    Number\n  );\n  const [genomesOrder] = useQueryParamState('genomes-order', '');\n  const [genomeSearchParam] = useQueryParamState('genomes-search', '');\n  const { data, loading, error, isStale } = useMGnifyData(\n    `genome-catalogues/${accession}/genomes`,\n    {\n      page: genomesPage as number,\n      ordering: genomesOrder as string,\n      page_size: genomesPageSize as number,\n      search: genomeSearchParam as string,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (genome) => genome.relationships.biome.data?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      disableSortBy: true,\n      className: 'mg-biome',\n    },\n    {\n      id: 'genome',\n      Header: 'Accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/genomes/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Length',\n      accessor: 'attributes.length',\n    },\n    {\n      Header: 'Num. of genomes',\n      accessor: 'attributes.num-genomes-total',\n    },\n    {\n      Header: 'Completeness',\n      accessor: 'attributes.completeness',\n    },\n    {\n      Header: 'Contamination',\n      accessor: 'attributes.contamination',\n    },\n    {\n      Header: 'Type',\n      accessor: 'attributes.type',\n      disableSortBy: true,\n    },\n    {\n      Header: 'Taxonomy',\n      accessor: 'attributes.taxon-lineage',\n      Cell: ({ cell }) => (\n        <>\n          {getSimpleTaxLineage(cell.value, true)}{' '}\n          <Tooltip content={cleanTaxLineage(cell.value, ' > ')}>\n            <sup>\n              <span className=\"icon icon-common icon-info\" />\n            </sup>\n          </Tooltip>\n        </>\n      ),\n      disableSortBy: true,\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n\n  return (\n    <EMGTable\n      Title=\"Species-level cluster representatives\"\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(genomesPage as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-anlyses-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"genomes-\"\n      showTextFilter\n      sortable\n    />\n  );\n};\n\nexport default GenomesTable;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport HierarchyNode, { Node } from 'components/UI/Hierarchy';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport useURLAccession from 'hooks/useURLAccession';\n\nconst PhyloTree: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}/downloads/phylo_tree.json`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  return (\n    <HierarchyNode\n      tree={data as unknown as Node}\n      getLabel={(node) => {\n        const label = node.name.split('__').pop();\n        if (node.type === 'genome') {\n          return (\n            <Link to={`/genomes/${label}`} style={{ backgroundColor: 'white' }}>\n              {label}\n            </Link>\n          );\n        }\n\n        return label || 'Unknown';\n      }}\n    />\n  );\n};\nexport default PhyloTree;\n","import React, { useContext } from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport GenomesTable from 'components/Genomes/Table';\nimport PhyloTree from 'components/Genomes/PhyloTree';\nimport CobsSearch from 'components/Genomes/Cobs';\nimport SourmashSearch from 'components/Genomes/Sourmash';\nimport RouteForHash from 'components/Nav/RouteForHash';\nimport ArrowForLink from 'components/UI/ArrowForLink';\nimport UserContext from 'pages/Login/UserContext';\nimport ExtLink from 'components/UI/ExtLink';\n\nconst tabs = [\n  { label: 'Genome list', to: '#' },\n  { label: 'Taxonomy tree', to: '#phylo-tab' },\n  { label: 'Protein catalogue', to: '#protein-catalog-tab' },\n  { label: 'Search by Gene', to: '#genome-search-tab' },\n  { label: 'Search by MAG', to: '#genome-search-mag-tab' },\n];\n\nconst GenomePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { config } = useContext(UserContext);\n  const { data, loading, error } = useMGnifyData(\n    `genome-catalogues/${accession}`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: genomeData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>{genomeData.attributes.name}</h2>\n\n      <section className=\"vf-card-container vf-card-container__col-4\">\n        <div className=\"vf-card-container__inner\">\n          <article className=\"vf-card vf-card--brand vf-card--bordered\">\n            <div className=\"vf-card__content | vf-stack vf-stack--200\">\n              <h3 className=\"vf-card__heading\">\n                {genomeData.attributes['unclustered-genome-count']}\n              </h3>\n              <p className=\"vf-card__subheading\">Total genomes</p>\n            </div>\n          </article>\n\n          <article className=\"vf-card vf-card--brand vf-card--bordered\">\n            <div className=\"vf-card__content | vf-stack vf-stack--200\">\n              <h3 className=\"vf-card__heading\">\n                {genomeData.attributes['genome-count']}\n              </h3>\n              <p className=\"vf-card__subheading\">Species-level clusters</p>\n            </div>\n          </article>\n\n          <article className=\"vf-card vf-card--brand vf-card--bordered\">\n            <div className=\"vf-card__content | vf-stack vf-stack--200\">\n              <h3 className=\"vf-card__heading\">\n                <a href={genomeData.attributes['ftp-url'] as string}>\n                  FTP Site\n                  <ArrowForLink />\n                </a>\n              </h3>\n              <p className=\"vf-card__subheading\">Download full catalogue</p>\n            </div>\n          </article>\n\n          <article className=\"vf-card vf-card--brand vf-card--bordered\">\n            <div className=\"vf-card__content | vf-stack vf-stack--200\">\n              <h3 className=\"vf-card__heading\">\n                <ExtLink\n                  href={`${config.magsPipelineRepo}/releases/tag/${genomeData.attributes['pipeline-version-tag']}`}\n                >\n                  Pipeline {genomeData.attributes['pipeline-version-tag']}\n                </ExtLink>\n              </h3>\n              <p className=\"vf-card__subheading\">View workflow & tools</p>\n            </div>\n          </article>\n        </div>\n      </section>\n\n      <div>\n        <ReactMarkdown>\n          {genomeData.attributes.description as string}\n        </ReactMarkdown>\n      </div>\n\n      <Tabs tabs={tabs} />\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <RouteForHash hash=\"\" isDefault>\n            <GenomesTable />\n          </RouteForHash>\n          <RouteForHash hash=\"#phylo-tab\">\n            <PhyloTree />\n          </RouteForHash>\n          <RouteForHash hash=\"#genome-search-tab\">\n            <CobsSearch\n              catalogueName={genomeData.attributes.name as string}\n              catalogueID={genomeData.id}\n            />\n          </RouteForHash>\n          <RouteForHash hash=\"#genome-search-mag-tab\">\n            <SourmashSearch\n              catalogueName={genomeData.attributes.name as string}\n              catalogueID={genomeData.id}\n            />\n          </RouteForHash>\n          <RouteForHash hash=\"#protein-catalog-tab\">\n            <h3>{genomeData.attributes['protein-catalogue-name'] as string}</h3>\n            <ReactMarkdown>\n              {genomeData.attributes['protein-catalogue-description'] as string}\n            </ReactMarkdown>\n          </RouteForHash>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default GenomePage;\n"],"names":["hash","isDefault","children","location","navigate","useEffect","replace","id","slice","className","width","height","xmlns","viewBox","preserveAspectRatio","d","fill","fillRule","HierarchyNode","tree","depth","shouldExpand","collapsing","getLabel","node","name","triggerExpandAll","triggerCollapseAll","displayChildren","setDisplayChildren","useState","triggerExpandAllChildren","setTriggerExpandAllChildren","show","setShow","hideChildren","setHideChildren","setTimeout","style","marginLeft","length","type","onClick","countgen","map","child","key","pathname","trim","endsWith","parts","split","accession","useURLAccession","genomesPage","useQueryParamState","Number","genomesPageSize","genomesOrder","genomeSearchParam","data","loading","error","isStale","useMGnifyData","page","ordering","page_size","search","Loading","size","FetchError","columns","Header","accessor","genome","relationships","biome","Cell","cell","value","float","disableSortBy","to","Tooltip","content","Date","toLocaleDateString","EMGTable","Title","cols","initialPage","initialPageSize","namespace","showTextFilter","sortable","Hierarchy","label","pop","backgroundColor","tabs","config","useContext","UserContext","genomeData","attributes","href","ArrowForLink","ExtLink","magsPipelineRepo","description","Tabs","RouteForHash","Cobs","catalogueName","catalogueID","Sourmash"],"sourceRoot":""}