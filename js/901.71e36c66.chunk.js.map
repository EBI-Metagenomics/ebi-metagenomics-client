{"version":3,"sources":["webpack://mgportalv2/./src/components/UI/ArrowForLink/index.tsx","webpack://mgportalv2/./src/components/UI/InnerCard/index.tsx","webpack://mgportalv2/./src/components/UI/OutterCard/index.tsx","webpack://mgportalv2/./src/hooks/useMGnifyData/index.tsx","webpack://mgportalv2/./src/components/Home/SearchBy/DataType/index.tsx","webpack://mgportalv2/./src/components/Home/SearchBy/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts","webpack://mgportalv2/./src/components/Home/Request/LatestStudies/index.tsx","webpack://mgportalv2/./src/components/Home/Request/index.tsx","webpack://mgportalv2/./src/pages/Home/index.tsx"],"names":["className","width","height","xmlns","d","fill","fillRule","title","label","to","children","useData","url","data","setData","useState","useEffect","response","fetch","json","fetchData","useEBISearchData","endpoint","parameters","allParemeters","format","start","config","Object","entries","map","key","value","join","DataAnalysesTypeRow","type","query","size","fields","facetcount","facetsdepth","facets","style","textAlign","hitCount","DataTypeRow","fontSize","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","LatestStudy","id","name","abstract","lineage","icon","lineageList","split","x","toLowerCase","lineageD2","slice","lineageD3","lineageD4","lineageD5","lineageD6","getBiomeIcon","substring","length","keys","useMGnifyData","attributes","relationships","biomes","Loading","Request"],"mappings":"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","file":"js/901.71e36c66.chunk.js","sourcesContent":["/* eslint-disable max-len */\nimport React from 'react';\n\nconst ArrowForLink: React.FC = () => (\n  <svg\n    aria-hidden=\"true\"\n    className=\"vf-card__heading__icon | vf-icon vf-icon-arrow--inline-end\"\n    width=\"1em\"\n    height=\"1em\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M0 12c0 6.627 5.373 12 12 12s12-5.373 12-12S18.627 0 12 0C5.376.008.008 5.376 0 12zm13.707-5.209l4.5 4.5a1 1 0 010 1.414l-4.5 4.5a1 1 0 01-1.414-1.414l2.366-2.367a.25.25 0 00-.177-.424H6a1 1 0 010-2h8.482a.25.25 0 00.177-.427l-2.366-2.368a1 1 0 011.414-1.414z\"\n      fill=\"currentColor\"\n      fillRule=\"nonzero\"\n    />\n  </svg>\n);\n\nexport default ArrowForLink;\n","import React from 'react';\nimport ArrowForLink from 'components/UI/ArrowForLink';\nimport { Link } from 'react-router-dom';\n\ntype InnerCardProps = {\n  title: string;\n  label: string;\n  to: string;\n};\n\nconst InnerCard: React.FC<InnerCardProps> = ({ title, label, to }) => {\n  return (\n    <article className=\"vf-card vf-card--striped vf-card--bordered\">\n      <div className=\"vf-card__content | vf-stack vf-stack--400\">\n        <p className=\"vf-card__text\">{label}</p>\n        <h3 className=\"vf-card__heading\">\n          <Link className=\"vf-card__link\" to={to}>\n            {title} <ArrowForLink />\n          </Link>\n        </h3>\n      </div>\n    </article>\n  );\n};\n\nexport default InnerCard;\n","import React from 'react';\n\nconst OutterCard: React.FC<{ className?: string }> = ({\n  children,\n  className = '',\n}) => {\n  return (\n    <article\n      className={`vf-card vf-card--brand vf-card--bordered ${className}`}\n    >\n      <div className=\"vf-card__content | vf-stack vf-stack--400\">\n        {children}\n      </div>\n    </article>\n  );\n};\n\nexport default OutterCard;\n","import { useState, useEffect } from 'react';\nimport config from 'config.json';\n\ntype KeyValue = {\n  [key: string]: string | number | Record<string, unknown> | [];\n};\ntype MGnifyResponse = {\n  data: Array<{\n    attributes: KeyValue;\n    id: string;\n    links: KeyValue;\n    type: string;\n    relationships: {\n      biomes?: {\n        data?: Array<{\n          id: string;\n        }>;\n      };\n      [key: string]: unknown;\n    };\n  }>;\n  links: {\n    first?: string;\n    last?: string;\n    next?: string;\n    prev?: string;\n  };\n  meta: {\n    pagination: {\n      count: number;\n      page: number;\n      pages: number;\n    };\n  };\n};\n\nconst useData: (url: string) => null | KeyValue | MGnifyResponse = (url) => {\n  const [data, setData] = useState(null);\n\n  async function fetchData(): Promise<void> {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [url]);\n  return data;\n};\n\nexport const useEBISearchData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => null | KeyValue = (endpoint, parameters = {}) => {\n  const defaultParameters = {\n    format: 'json',\n    start: 0,\n  };\n  const allParemeters = { ...defaultParameters, ...parameters };\n  const url = `${config.ebisearch}${endpoint}?${Object.entries(allParemeters)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&')}`;\n  const data = useData(url);\n  return data as null | KeyValue;\n};\n\nexport const useMGnifyData: (\n  endpoint: string,\n  parameters?: KeyValue\n) => null | MGnifyResponse = (endpoint, parameters = {}) => {\n  const defaultParameters = {};\n  const allParemeters = { ...defaultParameters, ...parameters };\n  let url = `${config.api}${endpoint}`;\n  if (Object.keys(allParemeters).length > 0)\n    url += `?${Object.entries(allParemeters)\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&')}`;\n  const data = useData(url);\n  return data as MGnifyResponse | null;\n};\n\nexport default useData;\n","import React from 'react';\nimport { useEBISearchData } from 'hooks/useMGnifyData';\nimport './style.css';\n\nconst DataAnalysesTypeRow: React.FC<{ type: string; label: string }> = ({\n  type,\n  label,\n}) => {\n  const data = useEBISearchData('metagenomics_analyses', {\n    query: 'domain_source:metagenomics_analyses',\n    size: 0,\n    fields: 'id,name,description,biome_name,metagenomics_samples',\n    facetcount: 0,\n    facetsdepth: 5,\n    facets: `experiment_type:${type}`,\n  });\n\n  if (!data) return null;\n  return (\n    <tr className=\"vf-table__row\">\n      <td className=\"vf-table__cell\" style={{ textAlign: 'right' }}>\n        {data?.hitCount || '??'}\n      </td>\n      <td className=\"vf-table__cell\">{label}</td>\n    </tr>\n  );\n};\nconst DataTypeRow: React.FC<{ label: string; endpoint: string }> = ({\n  label,\n  endpoint,\n}) => {\n  const data = useEBISearchData(endpoint, {\n    query: `domain_source:${endpoint}`,\n    size: 0,\n    fields: 'id,name,description,biome_name,metagenomics_samples',\n    facetcount: 0,\n    facetsdepth: 5,\n  });\n\n  if (!data) return null;\n  return (\n    <tr className=\"vf-table__row\">\n      <td className=\"vf-table__cell\" style={{ textAlign: 'right' }}>\n        {data?.hitCount || '??'}\n      </td>\n      <td className=\"vf-table__cell\">{label}</td>\n    </tr>\n  );\n};\n\nconst DataType: React.FC = () => {\n  const analysesTypes = [\n    { type: 'amplicon', label: 'amplicon' },\n    { type: 'assembly', label: 'assemblies' },\n    { type: 'metabarcoding', label: 'metabarcoding' },\n    { type: 'metagenomic', label: 'metagenomes' },\n    { type: 'metatranscriptomic', label: 'metatranscriptomics' },\n  ];\n  const types = [\n    { label: 'studies', endpoint: 'metagenomics_projects' },\n    { label: 'samples', endpoint: 'metagenomics_samples' },\n    { label: 'analyses', endpoint: 'metagenomics_analyses' },\n  ];\n\n  return (\n    <div className=\"vf-grid vf-grid__col-4\" style={{ fontSize: '0.7rem' }}>\n      <div style={{ textAlign: 'right' }}>\n        <span\n          className=\"icon icon-conceptual icon-c3\"\n          style={{ fontSize: '2rem' }}\n          data-icon=\"d\"\n        />\n      </div>\n      <table className=\"vf-table mg-small-table\">\n        <tbody className=\"vf-table__body\">\n          {analysesTypes.map(({ type, label }) => (\n            <DataAnalysesTypeRow type={type} label={label} key={type} />\n          ))}\n        </tbody>\n      </table>\n      <div style={{ textAlign: 'right' }}>\n        <span\n          className=\"icon icon-functional icon-c9\"\n          style={{ fontSize: '2rem' }}\n          data-icon=\"U\"\n        />\n      </div>\n      <table className=\"vf-table mg-small-table\">\n        <tbody className=\"vf-table__body\">\n          {types.map(({ endpoint, label }) => (\n            <DataTypeRow endpoint={endpoint} label={label} key={endpoint} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default DataType;\n","import React from 'react';\nimport InnerCard from 'components/UI/InnerCard';\nimport OutterCard from 'components/UI/OutterCard';\nimport DataType from './DataType';\n\nconst SearchBy: React.FC = () => {\n  return (\n    <OutterCard className=\"search-by-section\">\n      <h3 className=\"vf-card__heading\">Search by</h3>\n      <div className=\"vf-grid\">\n        <InnerCard\n          title=\"Text search\"\n          label=\"Name, biome, or keyword\"\n          to=\"/search\"\n        />\n        <InnerCard\n          title=\"Sequence search\"\n          label=\"Sequence search\"\n          to=\"/sequence-search\"\n        />\n      </div>\n      <h3 className=\"vf-card__heading\">Or by data type</h3>\n      <DataType />\n      <h3 className=\"vf-card__heading\">Or by selected biomes</h3>\n    </OutterCard>\n  );\n};\n\nexport default SearchBy;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useMGnifyData } from 'hooks/useMGnifyData';\nimport Loading from 'components/UI/Loading';\nimport { getBiomeIcon } from 'utils/biomes';\n\nimport './style.css';\n\ntype LatestStudyProps = {\n  id: string;\n  name: string;\n  abstract: string;\n  lineage?: string;\n};\nconst LatestStudy: React.FC<LatestStudyProps> = ({\n  id,\n  name,\n  abstract,\n  lineage,\n}) => {\n  const icon = getBiomeIcon(lineage);\n  return (\n    <article className=\"vf-summary vf-summary--has-image study\">\n      <span className={`biome_icon icon_xs ${icon}`} />\n      <h3 className=\"vf-summary__title\">\n        <Link to={`/studies/${id}`} className=\"vf-summary__link\">\n          {name}\n        </Link>\n      </h3>\n      <p className=\"vf-summary__text\">\n        {abstract.substring(0, 250)}\n        {abstract.length >= 250 && '...'}\n      </p>\n      <div className=\"vf-summary__text vf-grid\">\n        <Link to={`/studies/${id}`} className=\"vf-button vf-button--sm\">\n          View more\n        </Link>\n        <Link\n          to={`/studies/${id}#samples-section`}\n          className=\"vf-button vf-button--sm\"\n        >\n          Samples\n        </Link>\n      </div>\n    </article>\n  );\n};\n\nconst LatestStudies: React.FC = () => {\n  const data = useMGnifyData('studies/recent');\n  if (!data) return <Loading />;\n  return (\n    <section>\n      <div className=\"vf-grid vf-grid__col-1 latest-studies-section\">\n        {data.data.map(({ id, attributes, relationships }) => (\n          <LatestStudy\n            key={id}\n            id={id}\n            name={attributes['study-name'] as string}\n            abstract={attributes['study-abstract'] as string}\n            lineage={relationships?.biomes?.data?.[0]?.id}\n          />\n        ))}\n      </div>\n      <Link to=\"/browse/studies/\" className=\"vf-button vf-primary\">\n        View all studies\n      </Link>\n      View all studies\n    </section>\n  );\n};\n\nexport default LatestStudies;\n","import React from 'react';\nimport InnerCard from 'components/UI/InnerCard';\nimport OutterCard from 'components/UI/OutterCard';\nimport LatestStudies from './LatestStudies';\n\nconst SearchBy: React.FC = () => {\n  return (\n    <OutterCard className=\"request-by-section\">\n      <h3 className=\"vf-card__heading\">Request analysis of</h3>\n      <div className=\"vf-grid\">\n        <InnerCard title=\"Submit and/or Request\" label=\"Your data\" to=\"/\" />\n        <InnerCard title=\"Request\" label=\"A public dataset\" to=\"/\" />\n      </div>\n      <h3 className=\"vf-card__heading\">Latest studies</h3>\n      <LatestStudies />\n    </OutterCard>\n  );\n};\n\nexport default SearchBy;\n","import React from 'react';\nimport SearchBy from 'components/Home/SearchBy';\nimport Request from 'components/Home/Request';\n\nconst HomePage: React.FC = () => {\n  return (\n    <section className=\"vf-content vf-stack--600\">\n      <h2>Getting started</h2>\n      <div className=\"vf-grid\">\n        <SearchBy />\n        <Request />\n      </div>\n    </section>\n  );\n};\n\nexport default HomePage;\n"],"sourceRoot":""}