{"version":3,"file":"js/915.ac957384.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/TextInputDebounced/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/components/UI/ExtLink/index.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/components/UI/BiomeSelector/index.tsx","webpack://mgportalv2/./src/components/Browse/Studies/index.tsx","webpack://mgportalv2/./src/components/Browse/SuperStudies/index.tsx","webpack://mgportalv2/./src/components/Browse/Samples/index.tsx","webpack://mgportalv2/./src/components/Browse/Publications/index.tsx","webpack://mgportalv2/./src/components/Browse/Genomes/index.tsx","webpack://mgportalv2/./src/pages/Browse/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","import React, { useState, useCallback } from 'react';\nimport { debounce } from 'lodash-es';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport './style.css';\n\ntype TextInputDebouncedProps = {\n  namespace: string;\n};\nconst TextInputDebounced: React.FC<TextInputDebouncedProps> = ({\n  namespace,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState({\n    [`${namespace}search`]: '',\n  });\n  const [value, setValue] = useState(\n    (queryParameters[`${namespace}search`] as string) || ''\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounced = useCallback(\n    debounce((v: string): void => {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}search`]: v,\n      });\n    }, 300),\n    []\n  );\n  const handleOnChange = (event): void => {\n    const v = event.target.value;\n    setValue(v);\n    debounced(v);\n  };\n  return (\n    <div className=\"vf-form__item mg-textsearch\">\n      <label className=\"vf-form__label vf-search__label\" htmlFor=\"searchitem\">\n        Filter\n      </label>\n      <input\n        type=\"search\"\n        placeholder=\"Enter your search terms\"\n        id=\"searchitem\"\n        className=\"vf-form__input\"\n        onChange={handleOnChange}\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default TextInputDebounced;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse, MGnifyDatum } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\nimport TextInputDebounced from '../TextInputDebounced';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse | Array<MGnifyDatum>;\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  showTextFilter?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title: Title,\n  initialPage = 0,\n  initialPageSize = 25,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  showTextFilter = false,\n  sortable = false,\n  loading = false,\n  isStale = false,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n      [`${namespace}search`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: (data as MGnifyResponse)?.data || data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount: (data as MGnifyResponse)?.meta?.pagination?.pages || 1,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped mg-table ${className}`}\n          ref={tableRef}\n        >\n          {Title && (\n            <caption className=\"vf-table__caption mg-table-caption\">\n              <div>\n                {typeof Title === 'string' ? Title : <Title />}\n                {showTextFilter && <TextInputDebounced namespace={namespace} />}\n              </div>\n            </caption>\n          )}\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"vf-table__row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import React from 'react';\n\nimport './style.css';\n\ntype ExtLinkProps = {\n  href: string;\n  title?: string;\n  id?: string;\n};\nconst ExtLink: React.FC<ExtLinkProps> = ({ href, id, title, children }) => (\n  <a\n    href={href}\n    title={title}\n    id={id}\n    target=\"_blank\"\n    rel=\"noreferrer noopener\"\n    className=\"mg-ext\"\n  >\n    <span className=\"icon icon-common icon-external-link-alt\" /> {children}\n  </a>\n);\n\nexport default ExtLink;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    navigate(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      navigate(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\n\nimport { groupBy, split, map, flatMap, find } from 'lodash-es';\nimport Select from 'react-select';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList, MGnifyDatum } from 'hooks/data/useData';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype BiomeSelectorProps = {\n  onSelect: (lineage: string) => void;\n  initialValue?: string;\n};\n\ntype OptionProps = {\n  value: MGnifyDatum | string;\n  label: string | number | Record<string, unknown> | [];\n};\n\nconst OptionLabel: React.FC<OptionProps> = ({ value, label }) => (\n  <div style={{ display: 'flex', alignItems: 'center' }}>\n    <div style={{ display: 'flex' }}>\n      <span\n        className={`biome_icon icon_xxs ${getBiomeIcon(\n          typeof value === 'string' ? value : value.id\n        )}`}\n        style={{ float: 'initial' }}\n      />\n    </div>\n    <div>{label}</div>\n  </div>\n);\n\nconst BiomeSelector: React.FC<BiomeSelectorProps> = ({\n  onSelect,\n  initialValue,\n}) => {\n  const { data: biomes, loading } = useMGnifyData(\n    'biomes/root/children?depth_gte=1&depth_lte=4&page_size=100'\n  );\n  const [value, setValue] = useState<OptionProps | undefined>();\n  const options = React.useMemo(() => {\n    if (loading) {\n      return [{ label: 'Loading...', value: 'root' }];\n    }\n    const groupedLineages = groupBy(\n      (biomes as MGnifyResponseList).data,\n      (biome) => split(biome.id.replace('root:', ''), ':', 1).join(':')\n    );\n    return map(groupedLineages, (childBiomes, lineageLabel) => ({\n      label: lineageLabel,\n      options: childBiomes.map((biome) => ({\n        value: biome,\n        label: `${\n          (biome.attributes.lineage as string).replace(/[^:]/g, '').length > 2\n            ? ' - '\n            : ''\n        }${\n          lineageLabel === biome.attributes['biome-name']\n            ? `All ${lineageLabel}`\n            : biome.attributes['biome-name']\n        }\n            `,\n      })),\n    }));\n  }, [biomes, loading]);\n\n  useEffect(() => {\n    if (initialValue && options?.length && !loading) {\n      setValue(\n        find(flatMap(options, 'options'), (o) => {\n          return o.value.id === initialValue;\n        })\n      );\n    }\n  }, [initialValue, options, loading]);\n\n  return (\n    <Select\n      theme={(theme) => ({\n        ...theme,\n        borderRadius: 0,\n        border: '2px solid grey',\n        colors: {\n          ...theme.colors,\n          primary: 'var(--vf-color--blue--dark)',\n          primary25: 'var(--vf-color--blue--light)',\n          primary50: 'var(--vf-color--blue--light)',\n          primary75: 'var(--vf-color--blue)',\n          neutral0: 'var(--vf-color--neutral--0)',\n          neutral5: 'var(--vf-color--neutral--100)',\n          neutral10: 'var(--vf-color--neutral--100)',\n          neutral20: 'var(--vf-color--neutral--200)',\n          neutral30: 'var(--vf-color--neutral--300)',\n          neutral40: 'var(--vf-color--neutral--400)',\n          neutral50: 'var(--vf-color--neutral--500)',\n          neutral60: 'var(--vf-color--neutral--600)',\n          neutral70: 'var(--vf-color--neutral--700)',\n          neutral80: 'var(--vf-color--neutral--800)',\n          neutral90: 'var(--vf-color--neutral--900)',\n          danger: 'var(--vf-color--red)',\n          dangerLight: 'var(--vf-color--red--light)',\n        },\n      })}\n      styles={{\n        control: (provided, state) => ({\n          ...provided,\n          border: state.isFocused\n            ? '2px solid var(--vf-color--grey--dark)'\n            : '2px solid var(--vf-color--grey)',\n          boxShadow: state.isFocused\n            ? '0 0 0 .0625rem var(--vf-color--grey--dark)'\n            : 'unset',\n          '&:hover': {\n            border: '2px solid var(--vf-color--grey--dark)',\n            boxShadow: '0 0 0 .0625rem var(--vf-color--grey--dark)',\n          },\n          color: state.isFocused\n            ? 'var(--vf-color--grey--dark)'\n            : 'var(--vf-color--grey)',\n        }),\n      }}\n      placeholder=\"Filter by biome\"\n      value={value}\n      onChange={(option, action) => {\n        if (action.action === 'select-option') {\n          setValue(option);\n          onSelect(\n            typeof option.value === 'string' ? option.value : option.value.id\n          );\n        }\n      }}\n      formatOptionLabel={OptionLabel}\n      isLoading={loading}\n      isSearchable\n      name=\"biome\"\n      options={options}\n    />\n  );\n};\n\nexport default BiomeSelector;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport BiomeSelector from 'components/UI/BiomeSelector';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst BrowseStudies: React.FC = () => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n      search: '',\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: studiesList,\n    loading,\n    isStale,\n  } = useMGnifyData('studies', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n    search: (queryParameters.search as string) || undefined,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n      },\n      {\n        id: 'study_id',\n        Header: 'Accession',\n        accessor: 'attributes.accession',\n        Cell: ({ cell }) => (\n          <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Study name',\n        accessor: 'attributes.study-name',\n      },\n      {\n        Header: 'Samples',\n        accessor: 'attributes.samples-count',\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!studiesList);\n  }, [studiesList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      <BiomeSelector\n        onSelect={async (biome) => {\n          await setHasData(false);\n          setQueryParameters({\n            ...queryParameters,\n            biome,\n            page: 1,\n          });\n          await studiesList;\n          setHasData(true);\n        }}\n        initialValue={queryParameters.biome as string}\n      />\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={studiesList as MGnifyResponseList}\n          title={`Studies (${studiesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          showTextFilter\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseStudies;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst BrowseSuperStudies: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: superStudiesList,\n    loading,\n    isStale,\n  } = useMGnifyData('super-studies', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Title',\n        accessor: 'attributes.title',\n        Cell: ({ cell }) => (\n          <Link\n            to={`/super-studies/${cell.row.original.attributes['url-slug']}`}\n          >\n            {cell.value}\n          </Link>\n        ),\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.description',\n        disableSortBy: true,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!superStudiesList);\n  }, [superStudiesList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={superStudiesList as MGnifyResponseList}\n          title={`Super Studies (${superStudiesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          showPagination={false}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSuperStudies;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport BiomeSelector from 'components/UI/BiomeSelector';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst BrowseSamples: React.FC = () => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: samplesList,\n    loading,\n    isStale,\n  } = useMGnifyData('samples', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (sample) => sample.relationships.biome.data?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n      },\n      {\n        Header: 'Accession',\n        accessor: 'attributes.accession',\n        Cell: ({ cell }) => (\n          <Link to={`/samples/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Sample name',\n        accessor: 'attributes.sample-name',\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.sample-desc',\n        disableSortBy: true,\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!samplesList);\n  }, [samplesList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      <BiomeSelector\n        onSelect={async (biome) => {\n          await setHasData(false);\n          setQueryParameters({\n            ...queryParameters,\n            biome,\n            page: 1,\n          });\n          await samplesList;\n          setHasData(true);\n        }}\n        initialValue={queryParameters.biome as string}\n      />\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={samplesList as MGnifyResponseList}\n          title={`Samples (${samplesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSamples;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport ExtLink from 'components/UI/ExtLink';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst BrowsePublications: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: publicationsList,\n    loading,\n    isStale,\n  } = useMGnifyData('publications', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'pubmed_id',\n        Header: 'PMID',\n        accessor: 'id',\n        Cell: ({ cell }) => (\n          <ExtLink href={`https://europepmc.org/abstract/MED/${cell.value}`}>\n            {cell.value}\n          </ExtLink>\n        ),\n      },\n      {\n        Header: 'Publication title',\n        accessor: 'attributes.pub-title',\n        disableSortBy: true,\n      },\n      {\n        Header: 'Studies',\n        accessor: 'attributes.studies-count',\n      },\n      {\n        Header: 'Year of pub.',\n        accessor: 'attributes.published-year',\n      },\n      {\n        Header: 'Link',\n        accessor: 'attributes.pubmed-id',\n        Cell: ({ cell }) => (\n          <Link\n            to={`/publications/${cell.value}`}\n            className=\"vf-button vf-button--primary vf-button--sm \"\n          >\n            View details\n          </Link>\n        ),\n        disableSortBy: true,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!publicationsList);\n  }, [publicationsList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={publicationsList as MGnifyResponseList}\n          title={`Publications (${publicationsList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowsePublications;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst BrowseSamples: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: genomesList,\n    loading,\n    isStale,\n  } = useMGnifyData('genome-catalogues', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (catalogue) => catalogue.relationships.biome.data?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n      },\n      {\n        Header: 'Catalogue ID',\n        accessor: 'id',\n        Cell: ({ cell }) => (\n          <Link to={`/genome-catalogues/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Catalogue name',\n        accessor: 'attributes.name',\n      },\n      {\n        Header: 'Catalogue version',\n        accessor: 'attributes.version',\n      },\n      {\n        Header: 'Genomes count',\n        accessor: 'attributes.genome-count',\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!genomesList);\n  }, [genomesList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      <div>\n        <p>\n          Genome catalogues are biome-specific collections of\n          metagenomic-assembled and isolate genomes. The latest version of each\n          catalogue is shown on this website. Data for current and previous\n          versions are available on the{' '}\n          <a href=\"https://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/\">\n            FTP server\n          </a>\n          .\n        </p>\n        <p>Select a catalogue in the table to browse or search its genomes.</p>\n      </div>\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={genomesList as MGnifyResponseList}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSamples;\n","import React from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\n\nimport BrowseStudies from 'components/Browse/Studies';\nimport BrowseSuperStudies from 'components/Browse/SuperStudies';\nimport BrowseSamples from 'components/Browse/Samples';\nimport BrowsePublications from 'components/Browse/Publications';\nimport BrowseGenomes from 'components/Browse/Genomes';\nimport Tabs from 'components/UI/Tabs';\n\nconst tabs = [\n  { label: 'Super Studies', to: '/browse/super-studies' },\n  { label: 'Studies', to: '/browse/studies' },\n  { label: 'Samples', to: '/browse/samples' },\n  { label: 'Publications', to: '/browse/publications' },\n  { label: 'Genomes', to: '/browse/genomes' },\n];\n\nconst Browse: React.FC = () => {\n  return (\n    <section className=\"vf-content\">\n      <h2>Browse Page.</h2>\n      <Tabs tabs={tabs} />\n      <Routes>\n        <Route path=\"super-studies\" element={<BrowseSuperStudies />} />\n        <Route path=\"studies\" element={<BrowseStudies />} />\n        <Route path=\"samples\" element={<BrowseSamples />} />\n        <Route path=\"publications\" element={<BrowsePublications />} />\n        <Route path=\"genomes\" element={<BrowseGenomes />} />\n        <Route index element={<Navigate to=\"super-studies\" replace />} />\n      </Routes>\n    </section>\n  );\n};\n\nexport default Browse;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["currentPageIndex","pageIndex","gotoPage","className","type","onClick","namespace","queryParameters","setQueryParameters","value","setValue","useState","debounced","useCallback","debounce","v","htmlFor","placeholder","id","onChange","event","target","cols","data","title","Title","initialPage","initialPageSize","showPagination","showTextFilter","sortable","loading","isStale","Number","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","useRef","isChangingPage","setChangingPage","useEffect","current","scrollIntoView","order","tableSortBy","length","col","desc","replace","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","page","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","Loading","size","undefined","ref","map","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","key","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onBlur","pg","disabled","paginationIndex","href","children","rel","tabs","location","label","Label","to","pathname","startsWith","hash","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","Object","entries","forEach","parameter","serializer","String","get","useQueryParametersState","navigate","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","OptionLabel","style","display","alignItems","float","onSelect","initialValue","biomes","useMGnifyData","options","groupedLineages","groupBy","biome","split","join","childBiomes","lineageLabel","attributes","lineage","find","flatMap","o","theme","borderRadius","border","colors","primary","primary25","primary50","primary75","neutral0","neutral5","neutral10","neutral20","neutral30","neutral40","neutral50","neutral60","neutral70","neutral80","neutral90","danger","dangerLight","styles","control","provided","isFocused","boxShadow","color","option","action","formatOptionLabel","isLoading","isSearchable","name","page_size","hasData","setHasData","studiesList","ordering","Header","accessor","study","relationships","Cell","disableSortBy","Date","toLocaleDateString","height","EMGTable","count","superStudiesList","original","samplesList","sample","publicationsList","ExtLink","genomesList","catalogue","Tabs","path","element","index","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineageList","x","toLowerCase","lineageD2","slice","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}