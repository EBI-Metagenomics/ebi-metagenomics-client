{"version":3,"file":"js/915.bef32029.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/UI/EMGTable/PaginationButton/index.tsx","webpack://mgportalv2/./src/components/UI/EMGTable/index.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/hooks/useQueryParamState/index.tsx","webpack://mgportalv2/./src/components/UI/BiomeSelector/index.tsx","webpack://mgportalv2/./src/components/Browse/Studies/index.tsx","webpack://mgportalv2/./src/components/Browse/SuperStudies/index.tsx","webpack://mgportalv2/./src/components/Browse/Samples/index.tsx","webpack://mgportalv2/./src/components/Browse/Publications/index.tsx","webpack://mgportalv2/./src/components/Browse/Genomes/index.tsx","webpack://mgportalv2/./src/pages/Browse/index.tsx","webpack://mgportalv2/./src/utils/biomes.ts"],"sourcesContent":["import React, { MouseEventHandler } from 'react';\n\ntype PaginationButtonProps = {\n  currentPageIndex: number;\n  pageIndex: number;\n  gotoPage: (pageIndex: number) => MouseEventHandler;\n};\n\nconst PaginationButton: React.FC<PaginationButtonProps> = ({\n  currentPageIndex,\n  pageIndex,\n  gotoPage,\n}) => {\n  if (currentPageIndex === pageIndex) {\n    return (\n      <li className=\"vf-pagination__item vf-pagination__item--is-active\">\n        <span className=\"vf-pagination__label\" aria-current=\"page\">\n          <span className=\"vf-u-sr-only\">Page </span>\n          {currentPageIndex + 1}\n        </span>\n      </li>\n    );\n  }\n  return (\n    <li className=\"vf-pagination__item\">\n      <button\n        type=\"button\"\n        onClick={() => gotoPage(pageIndex)}\n        className=\"vf-button vf-button--link vf-pagination__link\"\n      >\n        <span className=\"vf-u-sr-only\"> page</span>\n        {pageIndex + 1}\n      </button>\n    </li>\n  );\n};\n\nexport default PaginationButton;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEventHandler,\n} from 'react';\nimport { Column, usePagination, useSortBy, useTable } from 'react-table';\n\nimport Loading from 'components/UI/Loading';\nimport { MGnifyResponse } from 'src/hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport PaginationButton from './PaginationButton';\n\nimport './style.css';\n\ntype PaginationRanges = {\n  startingPages: number[];\n  endingPages: number[];\n  adjacentPages: number[];\n  hasJumpFromStart: boolean;\n  hasJumpToEnd: boolean;\n};\n\nfunction getPaginationRanges(\n  pageIndex: number,\n  pageCount: number\n): PaginationRanges {\n  const startingPages = pageCount > 1 ? [0, 1] : [0];\n\n  const adjacentPages = pageCount > 2 ? [Math.max(2, pageIndex - 2)] : [];\n  for (\n    let page = adjacentPages[0] + 1;\n    page < pageCount - 2 && adjacentPages.length < 5;\n    page += 1\n  ) {\n    adjacentPages.push(page);\n  }\n\n  let endingPages = [];\n  if (pageCount > 7) {\n    endingPages = [pageCount - 2, pageCount - 1];\n  } else if (pageCount > 6) {\n    endingPages = [pageCount - 1];\n  }\n\n  return {\n    startingPages,\n    endingPages,\n    adjacentPages,\n    hasJumpFromStart:\n      !!adjacentPages.length &&\n      adjacentPages[0] > startingPages[startingPages.length - 1] + 1,\n    hasJumpToEnd:\n      !!endingPages.length &&\n      !!adjacentPages.length &&\n      endingPages[0] > adjacentPages[adjacentPages.length - 1] + 1,\n  };\n}\n\nfunction getOrderingQueryParamFromSortedColumn(\n  tableSortBy: Array<{ id: string; desc: boolean }>\n): string {\n  if (!tableSortBy.length) return '';\n  const col = tableSortBy[0];\n  return `${col.desc ? '-' : ''}${col.id\n    .replace(/attributes./g, '')\n    .replace(/-/g, '_')}`;\n}\n\ntype EMGTableProps = {\n  cols: Column[];\n  data: MGnifyResponse;\n  title?: string | React.ElementType;\n  showPagination?: boolean;\n  initialPage?: number;\n  initialPageSize?: number;\n  className?: string;\n  namespace?: string;\n  sortable?: boolean;\n  loading?: boolean;\n  isStale?: boolean;\n};\n\nconst EMGTable: React.FC<EMGTableProps> = ({\n  cols,\n  data,\n  title,\n  initialPage = 0,\n  initialPageSize = 25,\n  className = '',\n  namespace = '',\n  showPagination = true,\n  sortable = false,\n  loading = false,\n  isStale = false,\n}) => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      [`${namespace}page`]: 1,\n      [`${namespace}order`]: '',\n      [`${namespace}page_size`]: initialPageSize,\n    },\n    {\n      [`${namespace}page`]: Number,\n      [`${namespace}page_size`]: Number,\n    }\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setPageSize,\n    nextPage,\n    previousPage,\n    state: { pageIndex, pageSize, sortBy },\n  } = useTable(\n    {\n      columns: cols,\n      data: data.data,\n      initialState: {\n        pageIndex: initialPage,\n        pageSize: queryParameters[`${namespace}page_size`],\n      },\n      pageCount: data.meta.pagination.pages,\n      manualPagination: true,\n      manualSortBy: true,\n    },\n    useSortBy,\n    usePagination\n  );\n  const tableRef = useRef(null);\n  const [isChangingPage, setChangingPage] = useState(false);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page`] !== pageIndex + 1\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page`]: pageIndex + 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageIndex]);\n\n  useEffect(() => {\n    if (\n      showPagination &&\n      queryParameters[`${namespace}page_size`] !== pageSize\n    ) {\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}page_size`]: pageSize,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, pageSize]);\n\n  useEffect(() => {\n    if (sortable) {\n      const order = getOrderingQueryParamFromSortedColumn(sortBy);\n      if (order === queryParameters[`${namespace}order`]) return;\n      setQueryParameters({\n        ...queryParameters,\n        [`${namespace}order`]: order,\n        [`${namespace}page`]: 1,\n      });\n      if (tableRef.current && isChangingPage) {\n        tableRef.current.scrollIntoView();\n        setChangingPage(false);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showPagination, setQueryParameters, sortBy, sortable]);\n\n  const paginationRanges = useMemo(\n    () => getPaginationRanges(pageIndex, pageCount),\n    [pageIndex, pageCount]\n  );\n  const goToPageAndScroll = (pageNumber): MouseEventHandler => {\n    setChangingPage(true);\n    return gotoPage(pageNumber);\n  };\n  const changeSizeAndScroll = (evt): void => {\n    setChangingPage(true);\n    return setPageSize(+evt.target.value);\n  };\n\n  if (loading && !isStale) return <Loading size=\"small\" />;\n\n  return (\n    <section>\n      <div className=\"mg-table-overlay-container\">\n        <div className={loading && isStale ? 'mg-table-overlay' : undefined} />\n        <table\n          {...getTableProps}\n          className={`vf-table--striped ${className}`}\n          ref={tableRef}\n        >\n          <caption className=\"vf-table__caption\">{title}</caption>\n          <thead className=\"vf-table__header\">\n            {headerGroups.map((headerGroup) => (\n              <tr\n                {...headerGroup.getHeaderGroupProps()}\n                className=\"vf-table__row\"\n              >\n                {headerGroup.headers.map((column) => (\n                  <th\n                    {...(sortable && column.canSort\n                      ? column.getHeaderProps(column.getSortByToggleProps())\n                      : { key: column.id })}\n                    className=\"vf-table__heading\"\n                  >\n                    {column.render('Header')}\n                    {sortable && column.canSort && (\n                      <>\n                        &nbsp;\n                        <span>\n                          {/* eslint-disable-next-line no-nested-ternary */}\n                          {column.isSorted ? (\n                            column.isSortedDesc ? (\n                              <i className=\"icon icon-common icon-sort-down\" />\n                            ) : (\n                              <i className=\"icon icon-common icon-sort-up\" />\n                            )\n                          ) : (\n                            <i className=\"icon icon-common icon-sort\" />\n                          )}\n                        </span>\n                      </>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()} className=\"vf-table__body\">\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"vf-table__row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()} className=\"vf-table__cell\">\n                        {cell.render('Cell')}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <section className=\"mg-table-footer\">\n          <label className=\"vf-form__label\">\n            Page Size:\n            <select\n              className=\"vf-form__select\"\n              value={queryParameters[`${namespace}page_size`] as number}\n              onBlur={changeSizeAndScroll}\n              onChange={changeSizeAndScroll}\n            >\n              {[10, 25, 50].map((pg) => (\n                <option key={pg} value={pg}>\n                  Show {pg}\n                </option>\n              ))}\n            </select>\n          </label>\n          <nav className=\"vf-pagination\" aria-label=\"Pagination\">\n            <ul className=\"vf-pagination__list\">\n              <li className=\"vf-pagination__item vf-pagination__item--previous-page\">\n                <button\n                  disabled={!canPreviousPage}\n                  type=\"button\"\n                  onClick={previousPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Previous<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n\n              {paginationRanges.startingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpFromStart && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.adjacentPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              {paginationRanges.hasJumpToEnd && (\n                <li className=\"vf-pagination__item\">\n                  <span className=\"vf-pagination__label\">...</span>\n                </li>\n              )}\n\n              {paginationRanges.endingPages.map((paginationIndex) => (\n                <PaginationButton\n                  key={paginationIndex}\n                  currentPageIndex={pageIndex}\n                  pageIndex={paginationIndex}\n                  gotoPage={goToPageAndScroll}\n                />\n              ))}\n\n              <li className=\"vf-pagination__item vf-pagination__item--next-page\">\n                <button\n                  disabled={!canNextPage}\n                  type=\"button\"\n                  onClick={nextPage}\n                  className=\"vf-button vf-button--link vf-pagination__link\"\n                >\n                  Next<span className=\"vf-u-sr-only\"> page</span>\n                </button>\n              </li>\n            </ul>\n          </nav>\n        </section>\n      )}\n    </section>\n  );\n};\n\nexport default EMGTable;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs }) => {\n  const location = useLocation();\n\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash)\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nconst useQueryParamState: <S>(\n  parameter: string,\n  defaultValue: S\n) => [string | S, (s: S) => void] = (parameter, defaultValue) => {\n  const location = useLocation();\n  const history = useHistory();\n  const parameters = new URLSearchParams(location.search);\n  const [value, setValue] = useState(parameters.get(parameter) || defaultValue);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const changedParameters = new URLSearchParams(location.search);\n    if (changedParameters.get(parameter) === value) return;\n    setValue(changedParameters.get(parameter) || defaultValue);\n  }, [location.search, defaultValue, parameter, value]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParameterInURL: (newValue: unknown) => void = (newValue) => {\n    if (String(newValue) === String(value)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n    parametersToChange.set(parameter, String(newValue));\n    // The default value is not displayed in the URL\n    if (newValue === defaultValue) {\n      parametersToChange.delete(parameter);\n    }\n    location.search = parametersToChange.toString();\n    history.push(location);\n  };\n\n  return [value, setParameterInURL];\n};\n\nexport type QueryState = {\n  [parameter: string]: unknown;\n};\ntype SerializersType = {\n  [parameter: string]: (str: string) => unknown;\n};\n\nconst getQueryStateFromURL = (\n  state: QueryState,\n  searchStr: string,\n  serializers: SerializersType\n): QueryState => {\n  const innerState = {};\n  const parametersFromURL = new URLSearchParams(searchStr);\n  Object.entries(state).forEach(([parameter, value]) => {\n    const serializer = serializers[parameter] || String;\n    innerState[parameter] = serializer(\n      parametersFromURL.get(parameter) || (value as string)\n    );\n  });\n  return innerState;\n};\nexport const useQueryParametersState: (\n  initialState: QueryState,\n  serializers?: SerializersType\n) => [QueryState, (s: QueryState) => void] = (\n  initialState,\n  serializers = {}\n) => {\n  const location = useLocation();\n  const history = useHistory();\n  const stateWithURL = useMemo(\n    () => getQueryStateFromURL(initialState, location.search, serializers),\n    [initialState, location.search, serializers]\n  );\n  const [currentState, setCurrentState] = useState(stateWithURL);\n\n  // The Query parameters have changed, so we need to update the value if needed.\n  useEffect(() => {\n    const newState = getQueryStateFromURL(\n      initialState,\n      location.search,\n      serializers\n    );\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    setCurrentState(newState);\n  }, [location.search, currentState, initialState, serializers]);\n\n  // Pushes the new URL(including the new parameter value) into history\n  const setParametersInURL: (newState: QueryState) => void = (newState) => {\n    if (JSON.stringify(newState) === JSON.stringify(currentState)) return;\n    const parametersToChange = new URLSearchParams(location.search);\n\n    let changed = false;\n    Object.entries(initialState).forEach(([parameter, defaultValue]) => {\n      const newValue =\n        parameter in newState ? newState[parameter] : defaultValue;\n      if (newState[parameter] !== currentState[parameter]) {\n        parametersToChange.set(parameter, String(newValue));\n        if (newValue === defaultValue) {\n          parametersToChange.delete(parameter);\n        }\n        changed = true;\n      }\n    });\n\n    // The default value is not displayed in the URL\n    if (changed) {\n      location.search = parametersToChange.toString();\n      history.push(location);\n    }\n  };\n\n  return [currentState, setParametersInURL];\n};\n\nexport default useQueryParamState;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\n\nimport { groupBy, split, map, flatMap, find } from 'lodash-es';\nimport Select from 'react-select';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList, MGnifyDatum } from 'hooks/data/useData';\nimport { getBiomeIcon } from 'utils/biomes';\n\ntype BiomeSelectorProps = {\n  onSelect: (lineage: string) => void;\n  initialValue?: string;\n};\n\ntype OptionProps = {\n  value: MGnifyDatum | string;\n  label: string | number | Record<string, unknown> | [];\n};\n\nconst OptionLabel: React.FC<OptionProps> = ({ value, label }) => (\n  <div style={{ display: 'flex', alignItems: 'center' }}>\n    <div style={{ display: 'flex' }}>\n      <span\n        className={`biome_icon icon_xxs ${getBiomeIcon(\n          typeof value === 'string' ? value : value.id\n        )}`}\n        style={{ float: 'initial' }}\n      />\n    </div>\n    <div>{label}</div>\n  </div>\n);\n\nconst BiomeSelector: React.FC<BiomeSelectorProps> = ({\n  onSelect,\n  initialValue,\n}) => {\n  const { data: biomes, loading } = useMGnifyData(\n    'biomes/root/children?depth_gte=1&depth_lte=3&page_size=100'\n  );\n  const [value, setValue] = useState<OptionProps | undefined>();\n  const options = React.useMemo(() => {\n    if (loading) {\n      return [{ label: 'Loading...', value: 'root' }];\n    }\n    const groupedLineages = groupBy(\n      (biomes as MGnifyResponseList).data,\n      (biome) => split(biome.id.replace('root:', ''), ':', 1).join(':')\n    );\n    return map(groupedLineages, (childBiomes, lineageLabel) => ({\n      label: lineageLabel,\n      options: childBiomes.map((biome) => ({\n        value: biome,\n        label:\n          lineageLabel === biome.attributes['biome-name']\n            ? `All ${lineageLabel}`\n            : biome.attributes['biome-name'],\n      })),\n    }));\n  }, [biomes, loading]);\n\n  useEffect(() => {\n    if (initialValue && options?.length && !loading) {\n      setValue(\n        find(flatMap(options, 'options'), (o) => {\n          return o.value.id === initialValue;\n        })\n      );\n    }\n  }, [initialValue, options, loading]);\n\n  return (\n    <Select\n      theme={(theme) => ({\n        ...theme,\n        borderRadius: 0,\n        border: '2px solid grey',\n        colors: {\n          ...theme.colors,\n          primary: 'var(--vf-color--blue--dark)',\n          primary25: 'var(--vf-color--blue--light)',\n          primary50: 'var(--vf-color--blue--light)',\n          primary75: 'var(--vf-color--blue)',\n          neutral0: 'var(--vf-color--neutral--0)',\n          neutral5: 'var(--vf-color--neutral--100)',\n          neutral10: 'var(--vf-color--neutral--100)',\n          neutral20: 'var(--vf-color--neutral--200)',\n          neutral30: 'var(--vf-color--neutral--300)',\n          neutral40: 'var(--vf-color--neutral--400)',\n          neutral50: 'var(--vf-color--neutral--500)',\n          neutral60: 'var(--vf-color--neutral--600)',\n          neutral70: 'var(--vf-color--neutral--700)',\n          neutral80: 'var(--vf-color--neutral--800)',\n          neutral90: 'var(--vf-color--neutral--900)',\n          danger: 'var(--vf-color--red)',\n          dangerLight: 'var(--vf-color--red--light)',\n        },\n      })}\n      styles={{\n        control: (provided, state) => ({\n          ...provided,\n          border: state.isFocused\n            ? '2px solid var(--vf-color--grey--dark)'\n            : '2px solid var(--vf-color--grey)',\n          boxShadow: state.isFocused\n            ? '0 0 0 .0625rem var(--vf-color--grey--dark)'\n            : 'unset',\n          '&:hover': {\n            border: '2px solid var(--vf-color--grey--dark)',\n            boxShadow: '0 0 0 .0625rem var(--vf-color--grey--dark)',\n          },\n          color: state.isFocused\n            ? 'var(--vf-color--grey--dark)'\n            : 'var(--vf-color--grey)',\n        }),\n      }}\n      placeholder=\"Filter by biome\"\n      value={value}\n      onChange={(option, action) => {\n        if (action.action === 'select-option') {\n          setValue(option);\n          onSelect(\n            typeof option.value === 'string' ? option.value : option.value.id\n          );\n        }\n      }}\n      formatOptionLabel={OptionLabel}\n      isLoading={loading}\n      isSearchable\n      name=\"biome\"\n      options={options}\n    />\n  );\n};\n\nexport default BiomeSelector;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport BiomeSelector from 'components/UI/BiomeSelector';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst BrowseStudies: React.FC = () => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: studiesList,\n    loading,\n    isStale,\n  } = useMGnifyData('studies', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n      },\n      {\n        id: 'study_id',\n        Header: 'Accession',\n        accessor: 'attributes.accession',\n        Cell: ({ cell }) => (\n          <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Study name',\n        accessor: 'attributes.study-name',\n      },\n      {\n        Header: 'Samples',\n        accessor: 'attributes.samples-count',\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!studiesList);\n  }, [studiesList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      <BiomeSelector\n        onSelect={async (biome) => {\n          await setHasData(false);\n          setQueryParameters({\n            ...queryParameters,\n            biome,\n            page: 1,\n          });\n          await studiesList;\n          setHasData(true);\n        }}\n        initialValue={queryParameters.biome as string}\n      />\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={studiesList as MGnifyResponseList}\n          title={`Studies (${studiesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseStudies;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst BrowseSuperStudies: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: superStudiesList,\n    loading,\n    isStale,\n  } = useMGnifyData('super-studies', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Title',\n        accessor: 'attributes.title',\n        Cell: ({ cell }) => (\n          <Link\n            to={`/super-studies/${cell.row.original.attributes['url-slug']}`}\n          >\n            {cell.value}\n          </Link>\n        ),\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.description',\n        disableSortBy: true,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!superStudiesList);\n  }, [superStudiesList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={superStudiesList as MGnifyResponseList}\n          title={`Super Studies (${superStudiesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n          showPagination={false}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSuperStudies;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport BiomeSelector from 'components/UI/BiomeSelector';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst BrowseSamples: React.FC = () => {\n  const [queryParameters, setQueryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      biome: 'root',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: samplesList,\n    loading,\n    isStale,\n  } = useMGnifyData('samples', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    lineage: queryParameters.biome as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (sample) => sample.relationships.biome.data?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n      },\n      {\n        Header: 'Accession',\n        accessor: 'attributes.accession',\n        Cell: ({ cell }) => (\n          <Link to={`/samples/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Sample name',\n        accessor: 'attributes.sample-name',\n      },\n      {\n        Header: 'Description',\n        accessor: 'attributes.sample-desc',\n        disableSortBy: true,\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!samplesList);\n  }, [samplesList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      <BiomeSelector\n        onSelect={async (biome) => {\n          await setHasData(false);\n          setQueryParameters({\n            ...queryParameters,\n            biome,\n            page: 1,\n          });\n          await samplesList;\n          setHasData(true);\n        }}\n        initialValue={queryParameters.biome as string}\n      />\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={samplesList as MGnifyResponseList}\n          title={`Samples (${samplesList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSamples;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\n\nconst BrowsePublications: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: publicationsList,\n    loading,\n    isStale,\n  } = useMGnifyData('publications', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'pubmed_id',\n        Header: 'PMID',\n        accessor: 'id',\n        Cell: ({ cell }) => (\n          <a href={`https://europepmc.org/abstract/MED/${cell.value}`}>\n            {cell.value}\n          </a>\n        ),\n      },\n      {\n        Header: 'Publication title',\n        accessor: 'attributes.pub-title',\n        disableSortBy: true,\n      },\n      {\n        Header: 'Studies',\n        accessor: 'attributes.studies-count',\n      },\n      {\n        Header: 'Year of pub.',\n        accessor: 'attributes.published-year',\n      },\n      {\n        Header: 'Link',\n        accessor: 'attributes.pubmed-id',\n        Cell: ({ cell }) => (\n          <Link\n            to={`/publications/${cell.value}`}\n            className=\"vf-button vf-button--primary vf-button--sm \"\n          >\n            View details\n          </Link>\n        ),\n        disableSortBy: true,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!publicationsList);\n  }, [publicationsList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={publicationsList as MGnifyResponseList}\n          title={`Publications (${publicationsList.meta.pagination.count})`}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowsePublications;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport { useQueryParametersState } from 'hooks/useQueryParamState';\nimport { getBiomeIcon } from 'utils/biomes';\n\nconst BrowseSamples: React.FC = () => {\n  const [queryParameters] = useQueryParametersState(\n    {\n      page: 1,\n      order: '',\n      page_size: 25,\n    },\n    {\n      page: Number,\n      page_size: Number,\n    }\n  );\n  const [hasData, setHasData] = useState(false);\n  const {\n    data: genomesList,\n    loading,\n    isStale,\n  } = useMGnifyData('genome-catalogues', {\n    page: queryParameters.page as number,\n    ordering: queryParameters.order as string,\n    page_size: queryParameters.page_size as number,\n  });\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'biome',\n        Header: 'Biome',\n        accessor: (catalogue) => catalogue.relationships.biome.data?.id,\n        Cell: ({ cell }) => (\n          <span\n            className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n            style={{ float: 'initial' }}\n          />\n        ),\n        disableSortBy: true,\n      },\n      {\n        Header: 'Catalogue ID',\n        accessor: 'id',\n        Cell: ({ cell }) => (\n          <Link to={`/genome-catalogues/${cell.value}`}>{cell.value}</Link>\n        ),\n      },\n      {\n        Header: 'Catalogue name',\n        accessor: 'attributes.name',\n      },\n      {\n        Header: 'Catalogue version',\n        accessor: 'attributes.version',\n      },\n      {\n        Header: 'Genomes count',\n        accessor: 'attributes.genome-count',\n      },\n      {\n        id: 'last_update',\n        Header: 'Last Updated',\n        accessor: 'attributes.last-update',\n        Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    setHasData(!!genomesList);\n  }, [genomesList]);\n\n  return (\n    <section className=\"mg-browse-section\">\n      <div>\n        <p>\n          Genome catalogues are biome-specific collections of\n          metagenomic-assembled and isolate genomes. The latest version of each\n          catalogue is shown on this website. Data for current and previous\n          versions are available on the{' '}\n          <a href=\"https://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/\">\n            FTP server\n          </a>\n          .\n        </p>\n        <p>Select a catalogue in the table to browse or search its genomes.</p>\n      </div>\n      <div style={{ height: '2rem' }} />\n      {hasData && (\n        <EMGTable\n          cols={columns}\n          data={genomesList as MGnifyResponseList}\n          initialPage={(queryParameters.page as number) - 1}\n          sortable\n          loading={loading}\n          isStale={isStale}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default BrowseSamples;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport BrowseStudies from 'components/Browse/Studies';\nimport BrowseSuperStudies from 'components/Browse/SuperStudies';\nimport BrowseSamples from 'components/Browse/Samples';\nimport BrowsePublications from 'components/Browse/Publications';\nimport BrowseGenomes from 'components/Browse/Genomes';\nimport Tabs from 'components/UI/Tabs';\n\nconst tabs = [\n  { label: 'Super Studies', to: '/browse/super-studies' },\n  { label: 'Studies', to: '/browse/studies' },\n  { label: 'Samples', to: '/browse/samples' },\n  { label: 'Publications', to: '/browse/publications' },\n  { label: 'Genomes', to: '/browse/genomes' },\n];\n\nconst Browse: React.FC = () => {\n  return (\n    <section className=\"vf-content\">\n      <h2>Browse Page.</h2>\n      <Tabs tabs={tabs} />\n      <Switch>\n        <Route path=\"/browse/super-studies\">\n          <BrowseSuperStudies />\n        </Route>\n        <Route path=\"/browse/studies\">\n          <BrowseStudies />\n        </Route>\n        <Route path=\"/browse/samples\">\n          <BrowseSamples />\n        </Route>\n        <Route path=\"/browse/publications\">\n          <BrowsePublications />\n        </Route>\n        <Route path=\"/browse/genomes\">\n          <BrowseGenomes />\n        </Route>\n        <Route>\n          <Redirect to=\"/browse/super-studies\" />\n        </Route>\n      </Switch>\n    </section>\n  );\n};\n\nexport default Browse;\n","const biomeIconMapD2 = {\n  'root:engineered': 'engineered_b',\n};\nconst biomeIconMapD3 = {\n  'root:engineered:wastewater': 'wastewater_b',\n  'root:environmental:air': 'air_b',\n  'root:host-associated:amphibia': 'amphibian_b',\n  'root:host-associated:arthropoda': 'arthropoda_b',\n  'root:host-associated:fish': 'fish_b',\n  'root:host-associated:human': 'human_host_b',\n  'root:host-associated:insecta': 'insect_b',\n  'root:host-associated:mammals': 'mammals_b',\n  'root:host-associated:mollusca': 'mollusca_b',\n  'root:host-associated:plants': 'plant_host_b',\n  'root:host-associated:porifera': 'porifera_b',\n};\nconst biomeIconMapD4 = {\n  'root:environmental:aquatic:freshwater': 'freshwater_b',\n  'root:environmental:aquatic:marine': 'marine_b',\n  'root:environmental:aquatic:thermal springs': 'hotspring_b',\n  'root:environmental:terrestrial:soil': 'soil_b',\n  'root:environmental:terrestrial:volcanic': 'vulcano_b',\n  'root:host-associated:human:digestive system': 'human_gut_b',\n  'root:host-associated:human:skin': 'skin_b',\n};\n\nconst biomeIconMapD5 = {\n  'root:environmental:aquatic:freshwater:drinking water': 'drinking_water_b',\n  'root:environmental:aquatic:freshwater:groundwater': 'groundwater_b',\n  'root:environmental:aquatic:freshwater:ice': 'ice_b',\n  'root:environmental:aquatic:freshwater:lake': 'lake_b',\n  'root:environmental:aquatic:freshwater:lotic': 'river_b',\n  'root:environmental:aquatic:marine:hydrothermal vents':\n    'hydrothermal_vents_b',\n  'root:environmental:terrestrial:soil:wetlands': 'wetlands_b',\n  'root:host-associated:human:digestive system:oral': 'mouth_b',\n  'root:host-associated:human:respiratory system:pulmonary system': 'lung_b',\n  'root:host-associated:mammals:nervous system:brain': 'brain_b',\n};\n\nconst biomeIconMapD6 = {\n  'root:environmental:aquatic:freshwater:groundwater:cave water': 'cave_b',\n  'root:environmental:aquatic:freshwater:ice:glacier': 'glacier_b',\n  'root:environmental:terrestrial:soil:grasslands': 'grassland_b',\n  'root:environmental:terrestrial:soil:loam:forest soil': 'forest_b',\n  'root:environmental:terrestrial:soil:sand:desert': 'desert_b',\n};\n\n/**\n * Retrieve biome icon for a lineage\n */\nexport function getBiomeIcon(lineage: string): string {\n  const lineageList = (lineage || '').split(':').map((x) => x.toLowerCase());\n\n  const lineageD2 = lineageList.slice(0, 2).join(':');\n  const lineageD3 = lineageList.slice(0, 3).join(':');\n  const lineageD4 = lineageList.slice(0, 4).join(':');\n  const lineageD5 = lineageList.slice(0, 5).join(':');\n  const lineageD6 = lineageList.slice(0, 6).join(':');\n\n  const biome =\n    biomeIconMapD6[lineageD6] ||\n    biomeIconMapD5[lineageD5] ||\n    biomeIconMapD4[lineageD4] ||\n    biomeIconMapD3[lineageD3] ||\n    biomeIconMapD2[lineageD2] ||\n    'default_b';\n  return biome;\n}\ntype Biome = { icon?: string; name: string };\nexport function simplifyBiomeIcons(biomes: Biome[]): Biome[] {\n  const groupedBiomes = {};\n  biomes.forEach((b) => {\n    if (groupedBiomes[b.icon]) {\n      groupedBiomes[b.icon].push(b.name);\n    } else {\n      groupedBiomes[b.icon] = [b.name];\n    }\n  });\n  const icons = [];\n  Object.keys(groupedBiomes).forEach((biomeIcon) => {\n    const biomesInGroup = groupedBiomes[biomeIcon].sort().join(', ');\n    icons.push({ name: biomesInGroup, icon: biomeIcon });\n  });\n  return icons;\n}\n"],"names":["currentPageIndex","pageIndex","gotoPage","className","type","onClick","cols","data","title","initialPage","initialPageSize","namespace","showPagination","sortable","loading","isStale","queryParameters","setQueryParameters","Number","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","setPageSize","nextPage","previousPage","state","pageSize","sortBy","useTable","columns","initialState","meta","pagination","pages","manualPagination","manualSortBy","useSortBy","usePagination","tableRef","useRef","isChangingPage","setChangingPage","useState","useEffect","current","scrollIntoView","order","tableSortBy","length","col","desc","id","replace","getOrderingQueryParamFromSortedColumn","paginationRanges","useMemo","startingPages","adjacentPages","Math","max","page","push","endingPages","hasJumpFromStart","hasJumpToEnd","getPaginationRanges","goToPageAndScroll","pageNumber","changeSizeAndScroll","evt","target","value","Loading","size","undefined","ref","map","headerGroup","getHeaderGroupProps","headers","column","canSort","getHeaderProps","getSortByToggleProps","key","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","onBlur","onChange","pg","disabled","paginationIndex","tabs","location","label","Label","to","pathname","startsWith","hash","getQueryStateFromURL","searchStr","serializers","innerState","parametersFromURL","URLSearchParams","Object","entries","forEach","parameter","serializer","String","get","useQueryParametersState","history","stateWithURL","search","currentState","setCurrentState","newState","JSON","stringify","parametersToChange","changed","defaultValue","newValue","set","delete","toString","OptionLabel","style","display","alignItems","float","onSelect","initialValue","biomes","useMGnifyData","setValue","options","groupedLineages","groupBy","biome","split","join","childBiomes","lineageLabel","attributes","find","flatMap","o","theme","borderRadius","border","colors","primary","primary25","primary50","primary75","neutral0","neutral5","neutral10","neutral20","neutral30","neutral40","neutral50","neutral60","neutral70","neutral80","neutral90","danger","dangerLight","styles","control","provided","isFocused","boxShadow","color","placeholder","option","action","formatOptionLabel","isLoading","isSearchable","name","page_size","hasData","setHasData","studiesList","ordering","lineage","Header","accessor","study","relationships","Cell","disableSortBy","Date","toLocaleDateString","height","EMGTable","count","superStudiesList","original","samplesList","sample","publicationsList","href","genomesList","catalogue","Tabs","path","biomeIconMapD2","biomeIconMapD3","biomeIconMapD4","biomeIconMapD5","biomeIconMapD6","getBiomeIcon","lineageList","x","toLowerCase","lineageD2","slice","lineageD3","lineageD4","lineageD5","lineageD6"],"sourceRoot":""}