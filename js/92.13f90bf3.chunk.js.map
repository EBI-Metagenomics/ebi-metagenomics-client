{"version":3,"file":"js/92.13f90bf3.chunk.js","mappings":"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","sources":["webpack://mgportalv2/./src/components/Assembly/Assemblies/index.tsx","webpack://mgportalv2/./src/components/Nav/RouteForHash/index.tsx","webpack://mgportalv2/./src/components/Study/Studies/index.tsx","webpack://mgportalv2/./src/components/UI/Box/index.tsx","webpack://mgportalv2/./src/components/UI/KeyValueList/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/render.tsx","webpack://mgportalv2/./src/components/UI/Tabs/index.tsx","webpack://mgportalv2/./src/components/UI/TextTruncated/index.tsx","webpack://mgportalv2/./src/components/UI/Tooltip/index.tsx","webpack://mgportalv2/./src/hooks/useURLAccession/index.tsx","webpack://mgportalv2/./src/components/UI/SamplesMap/BySamplesArray/index.tsx","webpack://mgportalv2/./src/components/Sample/Overview/index.tsx","webpack://mgportalv2/./src/components/Sample/Runs/index.tsx","webpack://mgportalv2/./src/components/Sample/AnnotationMetadata/index.tsx","webpack://mgportalv2/./src/pages/Sample/index.tsx","webpack://mgportalv2/./src/utils/urls.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport InfoBanner from 'src/components/UI/InfoBanner';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\n\nconst initialPageSize = 10;\n\nconst getURLByEndpoint = (endpoint: string, accession: string): string => {\n  if (endpoint === 'runs') return `runs/${accession}/assemblies`;\n  return 'assemblies';\n};\ntype AssociatedAssembliesProps = {\n  rootEndpoint: string;\n};\n\nconst AssociatedAssemblies: React.FC<AssociatedAssembliesProps> = ({\n  rootEndpoint,\n}) => {\n  const accession = useURLAccession();\n  const [assemblyPage] = useQueryParamState('assembly-page', 1, Number);\n  const [assemblyPageSize] = useQueryParamState(\n    'assembly-page_size',\n    initialPageSize,\n    Number\n  );\n  const [assemblyOrder] = useQueryParamState('assembly-order', '');\n  const url = getURLByEndpoint(rootEndpoint, accession);\n  const { data, loading, error, isStale, downloadURL } = useMGnifyData(url, {\n    sample_accession: rootEndpoint === 'samples' ? accession : undefined,\n    page: assemblyPage as number,\n    ordering: assemblyOrder as string,\n    page_size: assemblyPageSize as number,\n  });\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n  if (!(data.data as MGnifyDatum[]).length)\n    return <InfoBanner type=\"info\" title=\"No associated assemblies found.\" />;\n\n  const columns = [\n    {\n      Header: 'Assembly ID',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/assemblies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Experiment type',\n      accessor: 'attributes.experiment-type',\n    },\n    {\n      Header: 'WGS ID',\n      accessor: 'attributes.wgs-accession',\n    },\n    {\n      Header: 'Legacy ID',\n      accessor: 'attributes.legacy-accession',\n    },\n    {\n      Header: 'Pipeline versions',\n      accessor: 'relationships.pipelines.data',\n      Cell: ({ cell }) =>\n        (cell.value as { id: string }[]).map(({ id }) => id).join(', '),\n    },\n  ];\n  const showPagination = (data.meta?.pagination?.count || 1) > initialPageSize;\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(assemblyPage as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-assembly-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"assembly-\"\n      showPagination={showPagination}\n      downloadURL={downloadURL}\n    />\n  );\n};\n\nexport default AssociatedAssemblies;\n","import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\ntype PropsType = {\n  hash: string;\n  isDefault?: boolean;\n};\nconst RouteForHash: React.FC<PropsType> = ({\n  hash,\n  isDefault = false,\n  children,\n}) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (location.hash === '' && hash !== '' && isDefault) {\n      navigate(hash, { replace: true });\n    }\n  });\n\n  if (location.hash === hash) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{children}</>;\n  }\n  return null;\n};\n\nexport default RouteForHash;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport TruncatedText from 'components/UI/TextTruncated';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyDatum, MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport { getBiomeIcon } from 'utils/biomes';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\n\nconst initialPageSize = 10;\n\ntype AssociatedStudiesProps = {\n  rootEndpoint: string;\n};\nconst AssociatedStudies: React.FC<AssociatedStudiesProps> = ({\n  rootEndpoint,\n}) => {\n  const accession = useURLAccession();\n\n  const [studiesPage] = useQueryParamState('studies-page', 1, Number);\n  const [studiesPageSize] = useQueryParamState(\n    'studies-page_size',\n    initialPageSize,\n    Number\n  );\n  const [studiesOrder] = useQueryParamState('studies-order', '');\n  const { data, loading, error, isStale, downloadURL } = useMGnifyData(\n    `${rootEndpoint}/${accession}/studies`,\n    {\n      page: studiesPage as number,\n      ordering: studiesOrder as string,\n      page_size: studiesPageSize as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n  if (!(data.data as MGnifyDatum[]).length) return null;\n\n  const columns = [\n    {\n      id: 'biome_id',\n      Header: 'Biome',\n      accessor: (study) => study.relationships.biomes.data?.[0]?.id,\n      Cell: ({ cell }) => (\n        <span\n          className={`biome_icon icon_xs ${getBiomeIcon(cell.value)}`}\n          style={{ float: 'initial' }}\n        />\n      ),\n      className: 'mg-biome',\n    },\n    {\n      id: 'study',\n      Header: 'Study accession',\n      accessor: 'id',\n      Cell: ({ cell }) => (\n        <Link to={`/studies/${cell.value}`}>{cell.value}</Link>\n      ),\n    },\n    {\n      Header: 'Name',\n      accessor: 'attributes.study-name',\n    },\n    {\n      Header: 'Abstract',\n      accessor: 'attributes.study-abstract',\n      Cell: ({ cell }) => <TruncatedText text={(cell.value as string) || ''} />,\n    },\n    {\n      Header: 'Samples Count',\n      accessor: 'attributes.samples-count',\n    },\n    {\n      id: 'last_update',\n      Header: 'Last Updated',\n      accessor: 'attributes.last-update',\n      Cell: ({ cell }) => new Date(cell.value).toLocaleDateString(),\n    },\n  ];\n  const showPagination = (data.meta?.pagination?.count || 1) > initialPageSize;\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(studiesPage as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-studies-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"studies-\"\n      showPagination={showPagination}\n      downloadURL={downloadURL}\n    />\n  );\n};\n\nexport default AssociatedStudies;\n","import React from 'react';\n\nconst Box: React.FC<{ label: string; theme?: string }> = ({\n  label,\n  theme = 'primary',\n  children,\n}) => (\n  <div className=\"vf-grid\">\n    <div className={`vf-box vf-box--easy vf-box-theme--${theme}`}>\n      <h5 className=\"vf-box__heading\">{label}</h5>\n      <div className=\"vf-box__text\">{children}</div>\n    </div>\n  </div>\n);\n\nexport default Box;\n","import React from 'react';\n\ntype KeyValueProps = {\n  list: { key: string; value: string | React.ElementType }[];\n};\n\nconst KeyValueList: React.FC<KeyValueProps> = ({ list }) => (\n  <div\n    className=\"vf-grid vf-grid__col-2\"\n    style={{\n      gridTemplateColumns: '1fr 2fr',\n      rowGap: '0.5rem',\n    }}\n  >\n    {list.map(({ key, value: Value }) => (\n      <React.Fragment key={key}>\n        <div style={{ textAlign: 'right' }}>{key}:</div>\n        <div>{typeof Value === 'string' ? Value : <Value />}</div>\n      </React.Fragment>\n    ))}\n  </div>\n);\n\nexport default KeyValueList;\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport MarkerClusterer from '@googlemaps/markerclustererplus';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\n\nimport './style.css';\n\n// TODO: make the link play nicer with react-router\nconst MarkerPopup: React.FC<{ sample: MGnifyDatum }> = ({ sample }) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">\n      <a href={`../samples/${sample.id}`}>{sample.id}</a>\n      {/* <Link to=\"/search/studies\">{sample.id}</Link> */}\n    </h3>\n    <p className=\"vf-box__text\">{sample.attributes['sample-desc']}</p>\n  </div>\n);\nconst ClusterMarkerPopup: React.FC<{ accessions: string[] }> = ({\n  accessions,\n}) => (\n  <div className=\"vf-box vf-box--easy\">\n    <h3 className=\"vf-box__heading\">Samples on this geographical location</h3>\n    <ul className=\"vf-list\">\n      {accessions.map((accession) => (\n        <li ref={accession}>\n          <a href={`../samples/${accession}`}>{accession}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ntype MapProps = {\n  samples: Array<MGnifyDatum>;\n};\n\nconst SamplesMap: React.FC<MapProps> = ({ samples }) => {\n  const ref = useRef();\n  const [theMap, setTheMap] = useState(null);\n  const markerCluster = useRef<MarkerClusterer>(null);\n  const sampleInfoWindow = useRef(new google.maps.InfoWindow());\n  const clusterInfoWindow = useRef(new google.maps.InfoWindow());\n  const newBoundary = useRef(new google.maps.LatLngBounds());\n\n  const markers = useRef({});\n\n  useEffect(() => {\n    if (theMap === null) {\n      const tmpMap = new google.maps.Map(ref.current, {\n        maxZoom: 10,\n        minZoom: 2,\n      });\n      setTheMap(tmpMap);\n    }\n  }, [theMap]);\n  useEffect(() => {\n    if (theMap && samples) {\n      if (markerCluster.current) {\n        markerCluster.current.clearMarkers();\n      }\n\n      samples\n        .filter(({ id }) => !(id in markers.current))\n        .forEach((sample) => {\n          const position = {\n            lat: sample.attributes.latitude as number,\n            lng: sample.attributes.longitude as number,\n          };\n          const marker = new google.maps.Marker({\n            position,\n            title: sample.id,\n          });\n          newBoundary.current.extend(position);\n          marker.addListener('click', () => {\n            sampleInfoWindow.current.setContent(\n              ReactDOMServer.renderToString(<MarkerPopup sample={sample} />)\n            );\n            sampleInfoWindow.current.open(theMap, marker);\n          });\n          markers.current[sample.id] = marker;\n        });\n      markerCluster.current = new MarkerClusterer(\n        theMap,\n        Object.values(markers.current),\n        {\n          imagePath:\n            'https://raw.githubusercontent.com/googlemaps/js-markerclustererplus/master/images/m',\n          maxZoom: 10,\n        }\n      );\n\n      // for clusters in MAX Zoom and with less than 10 elements show a list\n      google.maps.event.addListener(\n        markerCluster.current,\n        'click',\n        // eslint-disable-next-line func-names\n        function (cluster) {\n          if (\n            // eslint-disable-next-line no-underscore-dangle, react/no-this-in-sfc\n            this.prevZoom_ + 1 <= this.getMaxZoom() ||\n            cluster.getSize() >= 10\n          ) {\n            return;\n          }\n          clusterInfoWindow.current.setPosition(cluster.getCenter());\n\n          clusterInfoWindow.current.setContent(\n            ReactDOMServer.renderToString(\n              <ClusterMarkerPopup\n                accessions={cluster.getMarkers().map((m) => m.getTitle())}\n              />\n            )\n          );\n\n          clusterInfoWindow.current.open(theMap);\n        }\n      );\n\n      theMap.fitBounds(newBoundary.current);\n    }\n  }, [theMap, samples]);\n\n  return <div ref={ref} id=\"map\" style={{ height: '100%' }} />;\n};\n\nexport default SamplesMap;\n","import React, { ReactElement } from 'react';\nimport { Status } from '@googlemaps/react-wrapper';\nimport { ErrorTypes } from 'hooks/data/useData';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\n\nconst render = (status: Status): ReactElement => {\n  if (status === Status.LOADING) return <Loading />;\n  if (status === Status.FAILURE)\n    return (\n      <FetchError\n        error={{\n          status: 200,\n          type: ErrorTypes.OtherError,\n          error: status,\n        }}\n      />\n    );\n  return null;\n};\n\nexport default render;\n","import React, { useMemo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Tab: React.FC = () => null;\n\ntype TabsProps = {\n  tabs: Array<{\n    label: string | React.ElementType;\n    to: string;\n  }>;\n  preservedQueryParameters?: string[];\n};\nconst Tabs: React.FC<TabsProps> = ({ tabs, preservedQueryParameters }) => {\n  const location = useLocation();\n  const queryParamString = useMemo(() => {\n    if (!preservedQueryParameters) return '';\n    const preserved = new URLSearchParams();\n    const existing = new URLSearchParams(location.search);\n    let anyPreserved = false;\n    preservedQueryParameters.forEach((queryParam) => {\n      if (existing.has(queryParam))\n        preserved.append(queryParam, existing.get(queryParam));\n      anyPreserved = true;\n    });\n    return anyPreserved ? `?${preserved.toString()}` : '';\n  }, [preservedQueryParameters, location.search]);\n  return (\n    <div className=\"vf-tabs mg-search-tabs\">\n      <ul className=\"vf-tabs__list\">\n        {tabs.map(({ label: Label, to }) => (\n          <li className=\"vf-tabs__item\" key={to}>\n            <Link\n              className={`vf-tabs__link ${\n                to === location.pathname ||\n                (to.startsWith('#') && to === location.hash) ||\n                (to === '#' && location.hash === '')\n                  ? 'is-active'\n                  : ''\n              }`}\n              to={to + queryParamString}\n            >\n              {typeof Label === 'string' ? Label : <Label />}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React from 'react';\nimport Tooltip from 'components/UI/Tooltip';\n\nconst TruncatedText: React.FC<{\n  maxLength?: number;\n  text: string;\n  withTooltip?: boolean;\n}> = ({ text, maxLength = 250, withTooltip = false }) => {\n  const isTruncated = text.length >= maxLength;\n  const truncated = (\n    <>\n      {text.substring(0, maxLength)}\n      {isTruncated && '...'}\n    </>\n  );\n  if (withTooltip && isTruncated)\n    return (\n      <Tooltip content={text}>\n        <span>{truncated}</span>\n      </Tooltip>\n    );\n  return truncated;\n};\n\nexport default TruncatedText;\n","import React from 'react';\nimport Tippy from '@tippyjs/react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport 'tippy.js/dist/tippy.css';\n\ntype TooltipProps = {\n  content: React.ReactNode;\n  children?: React.ReactNode;\n};\n\nconst Tooltip: React.FC<TooltipProps> = ({ content, children }) => (\n  <Tippy content={content}>{children as React.ReactElement}</Tippy>\n);\nexport default Tooltip;\n","import { useLocation } from 'react-router-dom';\n\nconst useURLAccession = (): string | undefined => {\n  const location = useLocation();\n  let { pathname } = location;\n  if (pathname.trim().endsWith('/')) pathname = pathname.trim().slice(0, -1);\n  const parts = pathname.split('/');\n  return parts?.[parts.length - 1];\n};\n\nexport default useURLAccession;\n","import React, { useContext } from 'react';\n\nimport { Wrapper } from '@googlemaps/react-wrapper';\n\nimport UserContext from 'pages/Login/UserContext';\nimport SamplesMap from 'components/UI/SamplesMap';\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport render from '../render';\n\nimport '../style.css';\n\ntype SamplesMapProps = {\n  samples: Array<MGnifyDatum>;\n};\nconst SamplesMapBySamplesArray: React.FC<SamplesMapProps> = ({ samples }) => {\n  const { config } = useContext(UserContext);\n\n  const samplesFiltered = samples.filter((sample) => {\n    try {\n      return (\n        Number(sample.attributes.longitude) !== 0.0 &&\n        Number(sample.attributes.latitude) !== 0.0\n      );\n    } catch {\n      return false;\n    }\n  });\n\n  return (\n    <div className=\"mg-map-container\">\n      <div className=\"mg-map-wrapper\">\n        <Wrapper apiKey={config.googleMapsKey} render={render}>\n          <SamplesMap samples={samplesFiltered} />\n        </Wrapper>\n      </div>\n      <div className=\"mg-map-progress\">\n        {samplesFiltered.length === 0 && (\n          <div>⚠️ None of the samples have geolocation co-ordinates.</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SamplesMapBySamplesArray;\n","import React from 'react';\n\nimport { MGnifyDatum } from 'hooks/data/useData';\nimport SamplesMap from 'components/UI/SamplesMap/BySamplesArray';\nimport Box from 'components/UI/Box';\nimport ExtLink from 'components/UI/ExtLink';\nimport { getBiomeIcon } from 'utils/biomes';\nimport { ENA_VIEW_URL } from 'utils/urls';\n\ntype SampleOverviewProps = {\n  data: MGnifyDatum;\n};\n\nconst SampleOverview: React.FC<SampleOverviewProps> = ({ data }) => {\n  const lineage = data.relationships.biome.data.id;\n  return (\n    <section>\n      <div className=\"vf-grid\">\n        <div>\n          <h4>\n            Last updated:{' '}\n            {new Date(\n              data?.attributes?.['last-update'] as string\n            ).toDateString()}\n          </h4>\n          <Box label=\"Description\">{data.attributes['sample-desc']}</Box>\n          <Box label=\"External links\">\n            <ul>\n              <li>\n                <ExtLink href={ENA_VIEW_URL + data.attributes.accession}>\n                  ENA website ({data.attributes.accession})\n                </ExtLink>\n              </li>\n              <li>\n                <ExtLink\n                  href={`https://www.ebi.ac.uk/biosamples/samples/${data.attributes.biosample}`}\n                >\n                  EBI biosample ({data.attributes.biosample})\n                </ExtLink>\n              </li>\n            </ul>\n          </Box>\n          <Box label=\"Classification\">\n            <span\n              className={`biome_icon icon_sm ${getBiomeIcon(lineage)}`}\n              style={{ float: 'initial' }}\n            />\n            {lineage}\n          </Box>\n        </div>\n        <SamplesMap samples={[data]} />\n      </div>\n    </section>\n  );\n};\n\nexport default SampleOverview;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport EMGTable from 'components/UI/EMGTable';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseList } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport useQueryParamState from 'hooks/queryParamState/useQueryParamState';\n\nconst initialPageSize = 10;\n\nconst AssociatedRuns: React.FC = () => {\n  const accession = useURLAccession();\n  const [runsPage] = useQueryParamState('runs-page', 1, Number);\n  const [runsPageSize] = useQueryParamState(\n    'runs-page_size',\n    initialPageSize,\n    Number\n  );\n  const [runsOrder] = useQueryParamState('runs-order', '');\n  const { data, loading, error, isStale, downloadURL } = useMGnifyData(\n    `samples/${accession}/runs`,\n    {\n      page: runsPage as number,\n      ordering: runsOrder as string,\n      page_size: runsPageSize as number,\n    }\n  );\n  if (loading && !isStale) return <Loading size=\"small\" />;\n  if (error || !data) return <FetchError error={error} />;\n\n  const columns = [\n    {\n      id: 'run',\n      Header: 'Run ID',\n      accessor: 'id',\n      Cell: ({ cell }) => <Link to={`/runs/${cell.value}`}>{cell.value}</Link>,\n    },\n    {\n      Header: 'Experiment type',\n      accessor: 'attributes.experiment-type',\n    },\n    {\n      Header: 'Instrument model',\n      accessor: 'attributes.instrument-model',\n    },\n    {\n      Header: 'Instrument platform',\n      accessor: 'attributes.instrument-platform',\n    },\n    {\n      Header: 'Pipeline versions',\n      accessor: 'relationships.pipelines.data',\n      Cell: ({ cell }) =>\n        (cell.value as { id: string }[]).map(({ id }) => id).join(', '),\n    },\n  ];\n\n  return (\n    <EMGTable\n      cols={columns}\n      data={data as MGnifyResponseList}\n      initialPage={(runsPage as number) - 1}\n      initialPageSize={initialPageSize}\n      className=\"mg-runs-table\"\n      loading={loading}\n      isStale={isStale}\n      namespace=\"runs-\"\n      downloadURL={downloadURL}\n    />\n  );\n};\n\nexport default AssociatedRuns;\n","import React from 'react';\nimport FetchError from 'components/UI/FetchError';\nimport Loading from 'components/UI/Loading';\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { pickBy } from 'lodash-es';\nimport { Link } from 'react-router-dom';\nimport ExtLink from 'components/UI/ExtLink';\n\ntype ExistenceData = {\n  query_possible: boolean;\n  study_has_annotations: {\n    [study: string]: boolean;\n  };\n};\n\nconst AnnotationMetadata: React.FC<{ sampleAccession: string }> = ({\n  sampleAccession,\n}) => {\n  const { data, loading, error } = useMGnifyData(\n    `samples/${sampleAccession}/studies_publications_annotations_existence`\n  );\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  const existenceData = data.data as unknown as ExistenceData;\n  const studiesWithAnnotations = Object.keys(\n    pickBy(existenceData.study_has_annotations)\n  );\n  const anyMetadata = studiesWithAnnotations.length > 0;\n\n  if (!existenceData.query_possible)\n    return (\n      <div\n        className=\"vf-box vf-box-theme--primary vf-box--easy\"\n        style={{\n          backgroundColor: 'lemonchiffon',\n        }}\n      >\n        <h6 className=\"vf-box__heading\">\n          <span className=\"icon icon-common icon-exclamation-triangle\" />\n          Couldn’t check all studies for metadata\n        </h6>\n        <p className=\"vf-box__text\">\n          Additional metadata for this sample may be available via annotations\n          on the publications linked to by the associated studies in the table\n          below. Unfortunately these couldn’t be fetched at this time &ndash;\n          please view each study to explore more.\n        </p>\n      </div>\n    );\n\n  if (anyMetadata)\n    return (\n      <div className=\"vf-box vf-box-theme--primary vf-box--easy\">\n        <h6 className=\"vf-box__heading\">\n          Additional metadata from Publications\n        </h6>\n        <p className=\"vf-box__text\">\n          Additional metadata that may relate to this sample is available via\n          publications in the following associated{' '}\n          {studiesWithAnnotations.length > 1 ? 'studies' : 'study'}:{' '}\n          {studiesWithAnnotations.map((study) => (\n            <React.Fragment key={study}>\n              <Link to={`/studies/${study}`}>{study}</Link>\n              &nbsp;\n            </React.Fragment>\n          ))}\n        </p>\n        <p className=\"vf-box__text\">\n          These additional metadata are extracted by{' '}\n          <ExtLink href=\"https://europepmc.org\">Europe PMC</ExtLink> using\n          text-mining on the publications. Browse the studies to explore\n          further.\n        </p>\n      </div>\n    );\n  return null;\n};\n\nexport default AnnotationMetadata;\n","import React from 'react';\n\nimport useMGnifyData from 'hooks/data/useMGnifyData';\nimport { MGnifyResponseObj } from 'hooks/data/useData';\nimport useURLAccession from 'hooks/useURLAccession';\nimport Loading from 'components/UI/Loading';\nimport FetchError from 'components/UI/FetchError';\nimport Tabs from 'components/UI/Tabs';\nimport Overview from 'components/Sample/Overview';\nimport AssociatedStudies from 'components/Study/Studies';\nimport AssociatedRuns from 'components/Sample/Runs';\nimport AssociatedAssemblies from 'components/Assembly/Assemblies';\nimport RouteForHash from 'components/Nav/RouteForHash';\nimport KeyValueList from 'components/UI/KeyValueList';\nimport AnnotationMetadata from 'components/Sample/AnnotationMetadata';\n\nconst tabs = [\n  { label: 'Sample metadata', to: '#' },\n  { label: 'Associated studies', to: '#studies' },\n  { label: 'Analysed associated runs', to: '#runs' },\n  { label: 'Analysed associated assemblies', to: '#assemblies' },\n];\n\nconst SamplePage: React.FC = () => {\n  const accession = useURLAccession();\n  const { data, loading, error } = useMGnifyData(`samples/${accession}`);\n  if (loading) return <Loading size=\"large\" />;\n  if (error) return <FetchError error={error} />;\n  if (!data) return <Loading />;\n  const { data: sampleData } = data as MGnifyResponseObj;\n  return (\n    <section className=\"vf-content\">\n      <h2>Sample overview ({accession})</h2>\n      <h3>Sample {sampleData.attributes['sample-name']}</h3>\n      <section className=\"vf-grid\">\n        <div className=\"vf-stack vf-stack--200\">\n          <Overview data={sampleData} />\n          <Tabs tabs={tabs} />\n          <section className=\"vf-grid\">\n            <div className=\"vf-stack vf-stack--200\">\n              <RouteForHash hash=\"\" isDefault>\n                <KeyValueList\n                  list={\n                    (sampleData?.attributes?.['sample-metadata'] as {\n                      key: string;\n                      value: string;\n                    }[]) || []\n                  }\n                />\n                <AnnotationMetadata sampleAccession={accession} />\n              </RouteForHash>\n              <RouteForHash hash=\"#studies\">\n                <AssociatedStudies rootEndpoint=\"samples\" />\n              </RouteForHash>\n              <RouteForHash hash=\"#runs\">\n                <AssociatedRuns />\n              </RouteForHash>\n              <RouteForHash hash=\"#assemblies\">\n                <AssociatedAssemblies rootEndpoint=\"samples\" />\n              </RouteForHash>\n            </div>\n          </section>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default SamplePage;\n","export const ENA_VIEW_URL = 'https://www.ebi.ac.uk/ena/browser/view/';\nexport const IMG_URL =\n  ' https://img.jgi.doe.gov/cgi-bin/m/main.cgi?section=TaxonDetail&page=taxonDetail&taxon_oid=';\nexport const NCBI_ASSEMBLY_URL = 'https://www.ncbi.nlm.nih.gov/assembly/';\nexport const NCBI_SAMPLE_URL = 'https://www.ncbi.nlm.nih.gov/biosample/?term=';\nexport const NCBI_PROJECT_URL = 'https://www.ncbi.nlm.nih.gov/bioproject/';\nexport const PATRIC_URL = 'https://www.patricbrc.org/view/Genome/';\n"],"names":["rootEndpoint","accession","assemblyPage","Number","assemblyPageSize","assemblyOrder","url","endpoint","getURLByEndpoint","data","loading","error","isStale","downloadURL","sample_accession","undefined","page","ordering","page_size","size","length","type","title","columns","Header","accessor","Cell","cell","to","value","map","id","join","showPagination","meta","pagination","count","cols","initialPage","initialPageSize","className","namespace","hash","isDefault","children","location","navigate","useEffect","replace","studiesPage","studiesPageSize","studiesOrder","study","relationships","biomes","style","float","text","Date","toLocaleDateString","label","theme","list","gridTemplateColumns","rowGap","key","Value","textAlign","MarkerPopup","sample","href","attributes","ClusterMarkerPopup","accessions","ref","samples","useRef","theMap","setTheMap","useState","markerCluster","sampleInfoWindow","google","maps","InfoWindow","clusterInfoWindow","newBoundary","LatLngBounds","markers","tmpMap","Map","current","maxZoom","minZoom","clearMarkers","filter","forEach","position","lat","latitude","lng","longitude","marker","Marker","extend","addListener","setContent","open","Object","values","imagePath","event","cluster","this","prevZoom_","getMaxZoom","getSize","setPosition","getCenter","getMarkers","m","getTitle","fitBounds","height","status","Status","tabs","preservedQueryParameters","queryParamString","useMemo","preserved","URLSearchParams","existing","search","anyPreserved","queryParam","has","append","get","toString","Label","pathname","startsWith","maxLength","withTooltip","isTruncated","truncated","substring","content","trim","endsWith","slice","parts","split","config","useContext","UserContext","samplesFiltered","Wrapper","apiKey","googleMapsKey","render","SamplesMap","lineage","biome","toDateString","Box","ExtLink","biosample","useURLAccession","runsPage","useQueryParamState","runsPageSize","runsOrder","useMGnifyData","Loading","FetchError","EMGTable","sampleAccession","existenceData","studiesWithAnnotations","keys","pickBy","study_has_annotations","anyMetadata","query_possible","backgroundColor","sampleData","Overview","Tabs","RouteForHash","KeyValueList","ENA_VIEW_URL","IMG_URL","NCBI_ASSEMBLY_URL","NCBI_SAMPLE_URL","NCBI_PROJECT_URL","PATRIC_URL"],"sourceRoot":""}