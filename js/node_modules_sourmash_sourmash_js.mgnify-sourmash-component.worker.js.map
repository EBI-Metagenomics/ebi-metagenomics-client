{"version":3,"file":"node_modules_sourmash_sourmash_js.mgnify-sourmash-component.worker.js","mappings":";;;;;;;;;;;;;;;;;AAA2C;;;;;;;;;;;;;;;;;;;;ACAA;;AAE3C;;AAEA,oDAAoD,8BAA8B;;AAElF;;AAEA;AACA;AACA,yEAAyE,4DAAkB;AAC3F,8CAA8C,4DAAkB;AAChE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,WAAW,cAAc;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,4DAAkB;AAC3F,8CAA8C,4DAAkB;AAChE;AACA;AACA;;AAEA;AACA;AACA,2EAA2E,4DAAkB;AAC7F,gDAAgD,4DAAkB;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,2EAAiC;AACzC;AACA;AACA;AACA;AACA,kBAAkB,gFAAsC;AACxD;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA,8CAA8C,gEAAsB;AACpE;AACA,QAAQ,2EAAiC;AACzC;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,qEAA2B;AACnC;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB;AACA;AACA,kBAAkB,0EAAgC;AAClD;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,0CAA0C,gEAAsB,EAAE,iEAAuB;AACzF;AACA,QAAQ,0EAAgC;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,8EAAoC;AAC/D,YAAY,kEAAwB;AACpC;AACA;AACA;AACA,UAAU;AACV,YAAY,8EAAoC;AAChD,YAAY,8DAAoB;AAChC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,mEAAyB;AACjC;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA,kBAAkB,wEAA8B;AAChD;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,0CAA0C,gEAAsB,EAAE,iEAAuB;AACzF;AACA,QAAQ,wEAA8B;AACtC;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,QAAQ,sEAA4B;AACpC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,8EAAoC;AAC/D,YAAY,gEAAsB;AAClC;AACA;AACA;AACA,UAAU;AACV,YAAY,8EAAoC;AAChD,YAAY,8DAAoB;AAChC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6DAAmB;AACrC;AACA;AACA;;AAEO;AACP;AACA","sources":["webpack://mgnify-sourmash-component/./node_modules/sourmash/sourmash.js","webpack://mgnify-sourmash-component/./node_modules/sourmash/sourmash_bg.js"],"sourcesContent":["import * as wasm from \"./sourmash_bg.wasm\";\nexport * from \"./sourmash_bg.js\";","import * as wasm from './sourmash_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n*/\nexport class ComputeParameters {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ComputeParameters.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_computeparameters_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        var ret = wasm.computeparameters_new_with_params();\n        return ComputeParameters.__wrap(ret);\n    }\n    /**\n    * @param {Uint32Array} ksizes\n    */\n    set_ksizes(ksizes) {\n        var ptr0 = passArray32ToWasm0(ksizes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.computeparameters_set_ksizes(this.ptr, ptr0, len0);\n    }\n}\n/**\n*/\nexport class KmerMinHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KmerMinHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kmerminhash_free(ptr);\n    }\n    /**\n    * @param {number} num\n    * @param {number} ksize\n    * @param {boolean} is_protein\n    * @param {boolean} dayhoff\n    * @param {boolean} hp\n    * @param {number} seed\n    * @param {number} scaled\n    * @param {boolean} track_abundance\n    */\n    constructor(num, ksize, is_protein, dayhoff, hp, seed, scaled, track_abundance) {\n        var ret = wasm.kmerminhash_new_with_scaled(num, ksize, is_protein, dayhoff, hp, seed, scaled, track_abundance);\n        return KmerMinHash.__wrap(ret);\n    }\n    /**\n    * @param {string} buf\n    */\n    add_sequence_js(buf) {\n        var ptr0 = passStringToWasm0(buf, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.kmerminhash_add_sequence_js(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.kmerminhash_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Signature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * @param {ComputeParameters} params\n    */\n    constructor(params) {\n        _assertClass(params, ComputeParameters);\n        var ret = wasm.signature_new_from_params(params.ptr);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @param {string} buf\n    */\n    add_sequence_js(buf) {\n        var ptr0 = passStringToWasm0(buf, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.signature_add_sequence_js(this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {File} fp\n    */\n    add_from_file(fp) {\n        wasm.signature_add_from_file(this.ptr, addHeapObject(fp));\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    size() {\n        var ret = wasm.signature_size(this.ptr);\n        return ret >>> 0;\n    }\n}\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":[],"sourceRoot":""}