/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!function($) {

const keyCodes = {
  9: 'TAB',
  13: 'ENTER',
  27: 'ESCAPE',
  32: 'SPACE',
  37: 'ARROW_LEFT',
  38: 'ARROW_UP',
  39: 'ARROW_RIGHT',
  40: 'ARROW_DOWN'
***REMOVED***

var commands = {***REMOVED***

var Keyboard = {
  keys: getKeyCodes(keyCodes),

  /**
   * Parses the (keyboard) event and returns a String that represents its key
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   * @param {Event***REMOVED*** event - the event generated by the event handler
   * @return String key - String that represents the key pressed
   */
  parseKey(event) {
    var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();

    // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
    key = key.replace(/\W+/, '');

    if (event.shiftKey) key = `SHIFT_${key***REMOVED***`;
    if (event.ctrlKey) key = `CTRL_${key***REMOVED***`;
    if (event.altKey) key = `ALT_${key***REMOVED***`;

    // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
    key = key.replace(/_$/, '');

    return key;
  ***REMOVED***,

  /**
   * Handles the given (keyboard) event
   * @param {Event***REMOVED*** event - the event generated by the event handler
   * @param {String***REMOVED*** component - Foundation component's name, e.g. Slider or Reveal
   * @param {Objects***REMOVED*** functions - collection of functions that are to be executed
   */
  handleKey(event, component, functions) {
    var commandList = commands[component],
      keyCode = this.parseKey(event),
      cmds,
      command,
      fn;

    if (!commandList) return console.warn('Component not defined!');

    if (typeof commandList.ltr === 'undefined') { // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
    ***REMOVED*** else { // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (Foundation.rtl()) cmds = $.extend({***REMOVED***, commandList.ltr, commandList.rtl);

        else cmds = $.extend({***REMOVED***, commandList.rtl, commandList.ltr);
    ***REMOVED***
    command = cmds[keyCode];

    fn = functions[command];
    if (fn && typeof fn === 'function') { // execute function  if exists
      var returnValue = fn.apply();
      if (functions.handled || typeof functions.handled === 'function') { // execute function when event was handled
          functions.handled(returnValue);
      ***REMOVED***
    ***REMOVED*** else {
      if (functions.unhandled || typeof functions.unhandled === 'function') { // execute function when event was not handled
          functions.unhandled();
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***,

  /**
   * Finds all focusable elements within the given `$element`
   * @param {jQuery***REMOVED*** $element - jQuery object to search within
   * @return {jQuery***REMOVED*** $focusable - all focusable elements within `$element`
   */
  findFocusable($element) {
    if(!$element) {return false; ***REMOVED***
    return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function() {
      if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) { return false; ***REMOVED*** //only have visible elements and those that have a tabindex greater or equal 0
      return true;
    ***REMOVED***);
  ***REMOVED***,

  /**
   * Returns the component name name
   * @param {Object***REMOVED*** component - Foundation component, e.g. Slider or Reveal
   * @return String componentName
   */

  register(componentName, cmds) {
    commands[componentName] = cmds;
  ***REMOVED***,  

  /**
   * Traps the focus in the given element.
   * @param  {jQuery***REMOVED*** $element  jQuery object to trap the foucs into.
   */
  trapFocus($element) {
    var $focusable = Foundation.Keyboard.findFocusable($element),
        $firstFocusable = $focusable.eq(0),
        $lastFocusable = $focusable.eq(-1);

    $element.on('keydown.zf.trapfocus', function(event) {
      if (event.target === $lastFocusable[0] && Foundation.Keyboard.parseKey(event) === 'TAB') {
        event.preventDefault();
        $firstFocusable.focus();
      ***REMOVED***
      else if (event.target === $firstFocusable[0] && Foundation.Keyboard.parseKey(event) === 'SHIFT_TAB') {
        event.preventDefault();
        $lastFocusable.focus();
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***,
  /**
   * Releases the trapped focus from the given element.
   * @param  {jQuery***REMOVED*** $element  jQuery object to release the focus for.
   */
  releaseFocus($element) {
    $element.off('keydown.zf.trapfocus');
  ***REMOVED***
***REMOVED***

/*
 * Constants for easier comparing.
 * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
 */
function getKeyCodes(kcs) {
  var k = {***REMOVED***;
  for (var kc in kcs) k[kcs[kc]] = kcs[kc];
  return k;
***REMOVED***

Foundation.Keyboard = Keyboard;

***REMOVED***(jQuery);
